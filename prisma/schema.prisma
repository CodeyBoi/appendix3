// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  corps         Corps?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models
model Corps {
  id                    Int       @id @default(autoincrement())
  username              String
  number                Int
  firstName             String
  lastName              String
  isActive              Boolean   @default(true)
  vegetarian            Boolean   @default(false)
  vegan                 Boolean   @default(false)
  glutenIntolerant      Boolean   @default(false)
  lactoseIntolerant     Boolean   @default(false)
  nonDrinker            Boolean   @default(false)
  otherFoodRestrictions String?
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  hiddenGigs            HiddenGig[]
  gigSignups            GigSignup[]
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  instruments           CorpsInstrument[]
}

model CorpsInstrument {
  corpsId           Int
  instrumentId      Int
  isMainInstrument  Boolean
  corps             Corps        @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  instrument        Instrument   @relation(fields: [instrumentId], references: [id], onDelete: Cascade)

  @@unique([corpsId, instrumentId])
}

model Instrument {
  id       Int      @id @default(autoincrement())
  name     String
  corps    CorpsInstrument[]
}

model Gig {
  id                Int       @id @default(autoincrement())
  title             String
  date              DateTime
  meetup            String?
  start             String?
  location          String?
  signupStart       DateTime?
  signupEnd         DateTime?
  description       String?
  typeId            Int
  points            Int      @default(1)
  countsPositively  Boolean @default(false)
  isPublic          Boolean @default(false)
  prompt1           String?
  prompt2           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  type              GigType   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  signups           GigSignup[]
  hiddenFor         HiddenGig[]
}

model GigType {
  id       Int      @id @default(autoincrement())
  name     String
  gigs     Gig[]
}

model GigSignup {
  id                Int       @id @default(autoincrement())
  corpsId           Int
  gigId             Int
  signupStatusId    Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  status            GigSignupStatus   @relation(fields: [signupStatusId], references: [id], onDelete: Cascade)
  corps             Corps     @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig               Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
}

model GigSignupStatus {
  id       Int      @id @default(autoincrement())
  value    String
  signups  GigSignup[]
}

model HiddenGig {
  corpsId           Int
  gigId             Int
  corps             Corps     @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig               Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)

  @@unique([corpsId, gigId])
}
