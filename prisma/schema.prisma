generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  corps         Corps?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerifiedToken {
  identifier String
  token      String @unique
}

model Corps {
  id          String   @id @default(cuid())
  number      Int?
  bNumber     Int?
  firstName   String
  lastName    String
  nickName    String?
  isActive    Boolean  @default(true)
  userId      String   @unique
  colorScheme String   @default("light")
  language    String   @default("sv")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles              Role[]
  permissions        Permission[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  instruments        CorpsInstrument[]
  gigSignups         GigSignup[]
  hiddenGigs         HiddenGig[]
  foodPrefs          CorpsFoodPrefs?
  rehearsals         CorpsRehearsal[]
  quotes             Quote[]             @relation("SaidQuotes")
  citedQuotes        Quote[]             @relation("WrittenQuotes")
  songs              Song[]
  sectionLeaderOf    Section[]
  killerProfiles     KillerPlayer[]
  streckTransactions StreckTransaction[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  permissions Permission[]
  corpsii     Corps[]
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String @unique

  roles   Role[]
  corpsii Corps[]
}

model CorpsInstrument {
  corpsId          String
  instrumentId     Int
  isMainInstrument Boolean
  corps            Corps      @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  instrument       Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)

  @@unique([corpsId, instrumentId])
}

model CorpsFoodPrefs {
  corpsId     String
  vegetarian  Boolean @default(false)
  vegan       Boolean @default(false)
  glutenFree  Boolean @default(false)
  lactoseFree Boolean @default(false)
  other       String  @default("") @db.Text

  corps Corps @relation(fields: [corpsId], references: [id], onDelete: Cascade)

  @@id([corpsId])
}

model Instrument {
  id        Int    @id
  name      String @unique
  sectionId Int?

  corps      CorpsInstrument[]
  gigSignups GigSignup[]
  section    Section?          @relation(fields: [sectionId], references: [id])
}

model Gig {
  id                 String    @id @default(cuid())
  title              String
  date               DateTime  @db.Date
  meetup             String    @default("")
  start              String    @default("")
  end                String    @default("")
  location           String    @default("")
  signupStart        DateTime?
  signupEnd          DateTime?
  description        String    @default("") @db.Text
  englishDescription String    @default("") @db.Text
  publicDescription  String    @default("") @db.Text
  typeId             Int
  points             Int
  countsPositively   Boolean   @default(false)
  isPublic           Boolean   @default(false)
  checkbox1          String    @default("")
  checkbox2          String    @default("")
  price              Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  type      GigType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  signups   GigSignup[]
  hiddenFor HiddenGig[]

  @@index([date(sort: Desc)])
  @@index([countsPositively])
  @@index([isPublic])
}

model GigType {
  id   Int    @id
  name String @unique
  gigs Gig[]
}

model GigSignup {
  corpsId        String
  gigId          String
  signupStatusId Int
  instrumentId   Int
  attended       Boolean         @default(false)
  checkbox1      Boolean         @default(false)
  checkbox2      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  corps          Corps           @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig            Gig             @relation(fields: [gigId], references: [id], onDelete: Cascade)
  instrument     Instrument      @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  status         GigSignupStatus @relation(fields: [signupStatusId], references: [id], onDelete: Cascade)

  @@unique([corpsId, gigId])
  @@index([attended])
  @@index([signupStatusId])
}

model GigSignupStatus {
  id      Int         @id
  value   String      @unique
  signups GigSignup[]
}

model HiddenGig {
  corpsId String
  gigId   String
  corps   Corps  @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig     Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)

  @@unique([corpsId, gigId])
}

model Rehearsal {
  id               String   @id @default(cuid())
  title            String
  date             DateTime @db.Date
  countsPositively Boolean  @default(false)
  typeId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  type    RehearsalType    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  corpsii CorpsRehearsal[]
}

model CorpsRehearsal {
  corpsId     String
  rehearsalId String
  corps       Corps     @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)

  @@unique([corpsId, rehearsalId])
  @@index([corpsId])
  @@index([rehearsalId])
}

model RehearsalType {
  id         Int         @id
  name       String      @unique
  rehearsals Rehearsal[]
}

model Song {
  id               String  @id @default(cuid())
  title            String  @unique
  author           String
  melody           String
  lyrics           String  @default("") @db.Text
  createdByCorpsId String?
  views            Int @default(0)

  createdBy Corps?   @relation(fields: [createdByCorpsId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id               String   @id @default(cuid())
  quote            String   @default("") @db.Text
  location         String   @default("")
  saidByCorpsId    String
  writtenByCorpsId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  saidBy    Corps @relation("SaidQuotes", fields: [saidByCorpsId], references: [id], onDelete: Cascade)
  writtenBy Corps @relation("WrittenQuotes", fields: [writtenByCorpsId], references: [id])
}

model Section {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  corpsId String?

  instruments Instrument[]
  leader      Corps?       @relation(fields: [corpsId], references: [id])
}

model KillerPlayer {
  id          Int       @id @default(autoincrement())
  corpsId     String
  word        String
  wordEnglish String
  gameId      String
  targetId    Int?
  timeOfDeath DateTime?
  killedById  Int?

  game       KillerGame     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  corps      Corps          @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  killedBy   KillerPlayer?  @relation("Kills", fields: [killedById], references: [id])
  kills      KillerPlayer[] @relation("Kills")
  target     KillerPlayer?  @relation("Target", fields: [targetId], references: [id])
  targetedBy KillerPlayer[] @relation("Target")

  @@unique([corpsId, gameId])
  @@map("KillerCorps")
}

model KillerGame {
  id        String   @id @default(cuid())
  name      String   @unique
  start     DateTime @default(now())
  end       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants KillerPlayer[]
}

model StreckItem {
  id    Int    @id @default(autoincrement())
  name  String
  price Int
}

model StreckTransaction {
  id        Int      @id @default(autoincrement())
  item      String
  pricePer  Int
  amount    Int
  time      DateTime @default(now())
  corpsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  corps Corps @relation(fields: [corpsId], references: [id], onDelete: Cascade)
}
