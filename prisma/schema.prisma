generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByNulls", "interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  corps         Corps?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Corps {
  id                    String   @id @default(cuid())
  number                Int?
  bNumber               Int?
  firstName             String
  lastName              String
  isActive              Boolean  @default(true)
  vegetarian            Boolean  @default(false)
  vegan                 Boolean  @default(false)
  glutenIntolerant      Boolean  @default(false)
  lactoseIntolerant     Boolean  @default(false)
  drinksAlcohol         Boolean  @default(false)
  otherFoodRestrictions String   @default("")
  userId                String   @unique
  roleId                Int?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  role                  Role?             @relation(fields: [roleId], references: [id])
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  instruments           CorpsInstrument[]
  gigSignups            GigSignup[]
  hiddenGigs            HiddenGig[]
}

model CorpsInstrument {
  corpsId          String
  instrumentId     Int
  isMainInstrument Boolean
  corps            Corps      @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  instrument       Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)

  @@unique([corpsId, instrumentId])
}

model Instrument {
  id         Int               @id
  name       String            @unique
  corps      CorpsInstrument[]
  gigSignups GigSignup[]
}

model Gig {
  id               String    @id @default(cuid())
  title            String
  date             DateTime  @db.Date
  meetup           String    @default("")
  start            String    @default("")
  location         String    @default("")
  signupStart      DateTime?
  signupEnd        DateTime?
  description      String      @default("") @db.Text
  typeId           Int
  points           Int
  countsPositively Boolean     @default(false)
  isPublic         Boolean     @default(false)
  checkbox1        String      @default("")
  checkbox2        String      @default("")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  type             GigType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  signups          GigSignup[]
  hiddenFor        HiddenGig[]

  @@index([date(sort: Desc), id])
}

model GigType {
  id   Int    @id
  name String @unique
  gigs Gig[]
}

model GigSignup {
  corpsId        String
  gigId          String
  signupStatusId Int
  instrumentId   Int
  attended       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  corps          Corps           @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig            Gig             @relation(fields: [gigId], references: [id], onDelete: Cascade)
  instrument     Instrument      @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  status         GigSignupStatus @relation(fields: [signupStatusId], references: [id], onDelete: Cascade)

  @@unique([corpsId, gigId])
  @@index([corpsId, gigId])
}

model GigSignupStatus {
  id      Int         @id
  value   String      @unique
  signups GigSignup[]
}

model HiddenGig {
  corpsId String
  gigId   String
  corps   Corps @relation(fields: [corpsId], references: [id], onDelete: Cascade)
  gig     Gig   @relation(fields: [gigId], references: [id], onDelete: Cascade)

  @@unique([corpsId, gigId])
}

model Role {
  id    Int     @id
  name  String  @unique
  corps Corps[]
}
