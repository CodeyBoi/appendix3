%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: AMCBleckhornenLOGOSvart.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Fredrik Lundh
%%CreationDate: 2012-10-19
%%BoundingBox: 0 0 465 435
%%HiResBoundingBox: 0 0 464.3115 434.5742
%%CropBox: 0 0 464.3115 434.5742
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2012-10-19T20:02:58+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2012-10-19T20:02:58+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2012-10-19T20:02:58+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqxT8xPzO8pfl9pcOo+Y55YormQxW0cMTyvJIF5FRxHFdv5mGKsS/Mr88F0b8orP8wPKM&#xA;EOpw6jLDHbi6DhIxLzD+qsbKeUbx8GXl174qmX5CfmddfmJ5BTWdQSKPVre5mtNQjgBSPmhEiFFY&#xA;sQDFInfrXFWAfmr5l17Sf+cnPIFtDqNxFpF7b28EtgkzrA8k1zcQszxBgjEh03IrsPAYqluk3Opw&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">AMCBleckhornenLOGOSvart</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:ColorMode>3</photoshop:ColorMode>
         <photoshop:ICCProfile>sRGB IEC61966-2.1</photoshop:ICCProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:InstanceID>xmp.iid:F77F117407206811B34BE770979DA461</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F77F117407206811B34BE770979DA461</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>xmp.did:0280117407206811AB5FE73B9EAE8980</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>created</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811AB5FE73B9EAE8980</stEvt:instanceID>
                  <stEvt:when>2012-10-08T16:39:41+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Photoshop CS4 Macintosh</stEvt:softwareAgent>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from image/png to image/jpeg</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811AB5FE73B9EAE8980</stEvt:instanceID>
                  <stEvt:when>2012-10-08T16:39:41+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Photoshop CS4 Macintosh</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811B706FABD9D803082</stEvt:instanceID>
                  <stEvt:when>2012-10-08T16:51:28+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811B34BE770979DA461</stEvt:instanceID>
                  <stEvt:when>2012-10-19T20:02:58+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c6adae87-0560-db46-b49d-27e82e4f6366</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F117407206811B706FABD9D803082</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:0280117407206811AB5FE73B9EAE8980</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:tiff="http://ns.adobe.com/tiff/1.0/">
         <tiff:XResolution>6000242/10000</tiff:XResolution>
         <tiff:YResolution>6000242/10000</tiff:YResolution>
         <tiff:ResolutionUnit>2</tiff:ResolutionUnit>
         <tiff:NativeDigest>256,257,258,259,262,274,277,284,530,531,282,283,296,301,318,319,529,532,306,270,271,272,305,315,33432;41EBCC49E034DC6D375BB62510B70EC3</tiff:NativeDigest>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:exif="http://ns.adobe.com/exif/1.0/">
         <exif:PixelXDimension>4798</exif:PixelXDimension>
         <exif:PixelYDimension>4557</exif:PixelYDimension>
         <exif:ColorSpace>1</exif:ColorSpace>
         <exif:NativeDigest>36864,40960,40961,37121,37122,40962,40963,37510,40964,36867,36868,33434,33437,34850,34852,34855,34856,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37396,41483,41484,41486,41487,41488,41492,41493,41495,41728,41729,41730,41985,41986,41987,41988,41989,41990,41991,41992,41993,41994,41995,41996,42016,0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,30;34F849880E70D5C76EBD248E87AEEE19</exif:NativeDigest>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>FOCOLTONE 1076</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -434.574 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 434.574 li
464.312 434.574 li
464.312 0 li
cp
clp
[1 0 0 1 0 0 ]ct
252.726 10.2544 mo
253.738 5.01074 246.518 3.71338 246.245 9.05469 cv
246.028 13.2954 249.167 15.6123 251.405 18.1743 cv
253.923 21.0562 255.779 23.8389 256.565 27.2944 cv
253.945 27.8608 252.747 26.0024 250.085 26.2144 cv
247.297 21.8022 240.834 17.6113 240.365 10.6143 cv
239.982 4.90234 243.211 .525879 248.285 .0546875 cv
254.647 -.536621 259.075 3.73828 258.245 9.77441 cv
256.842 10.3057 254.368 10.3574 252.726 10.2544 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
ef
227.525 4.85449 mo
227.962 4.97119 227.581 4.27002 228.125 4.49463 cv
228.278 4.86914 228.208 5.24316 228.125 5.57422 cv
227.775 5.46582 228.09 5.13281 227.885 5.09473 cv
227.646 5.21484 227.696 5.625 227.285 5.57422 cv
227.762 9.23096 227.48 14.0137 228.485 17.4546 cv
227.907 24.9497 231.054 32.6792 227.285 37.4946 cv
225.203 39.7148 221.733 41.2544 217.325 40.4946 cv
210.367 39.2944 210.445 29.5649 209.885 21.1743 cv
209.46 14.8086 208.839 7.94238 208.685 1.97461 cv
210.559 1.58447 212.126 1.65381 213.965 1.49463 cv
214.953 7.60498 215.539 14.5381 215.885 21.7744 cv
216.096 26.1768 215.952 34.3276 218.885 35.2144 cv
222.713 36.3716 223.366 32.9614 223.205 29.3345 cv
222.836 21.0151 221.192 9.52051 220.925 1.25439 cv
222.287 .550781 225.11 .753418 226.685 .654297 cv
227.028 1.57617 228.393 2.65039 227.525 3.41455 cv
227.441 3.8584 227.946 3.71387 228.125 3.89453 cv
228.004 4.29297 227.461 4.27051 227.525 4.85449 cv
cp
ef
277.565 4.01465 mo
275.091 15.4595 271.832 26.1211 269.045 37.2544 cv
268.301 37.2783 267.841 37.019 267.365 36.7744 cv
267.501 33.957 267.384 30.2964 265.085 28.7344 cv
266.708 22.6362 268.409 15.479 270.125 9.41455 cv
270.735 7.25781 271.36 3.73193 272.285 2.69434 cv
274.022 2.69385 275.97 3.47754 277.565 4.01465 cv
cp
ef
191.045 4.97461 mo
191.147 4.95215 191.158 5.02148 191.165 5.09473 cv
193.655 10.7896 195.166 17.1309 196.925 23.3345 cv
198.69 29.5586 200.734 35.7549 202.205 42.0547 cv
200.667 42.6758 199.063 43.2329 197.165 43.4946 cv
194.633 35.7461 192.811 27.2891 190.085 19.7344 cv
189.997 28.2295 191.79 36.8672 191.885 44.8145 cv
191.235 45.1172 190.075 46.0996 189.125 45.8945 cv
188.183 45.6914 186.412 41.2129 185.885 40.2544 cv
182.802 34.6431 180.036 27.5537 176.646 22.9746 cv
178.313 31.7065 181.665 38.7544 183.365 47.4546 cv
181.712 47.8818 180.325 48.5742 178.445 48.7744 cv
174.731 36.3145 171.252 24.3618 167.765 11.6943 cv
169.88 10.689 172.428 10.1172 174.965 9.53467 cv
176.931 12.4263 178.475 15.752 180.125 19.0146 cv
181.758 22.2427 183.122 25.7383 185.405 28.3745 cv
185.29 21.3452 184.159 14.1968 183.725 7.25439 cv
185.886 5.96777 188.588 5.80127 191.045 4.97461 cv
cp
ef
168.485 52.0146 mo
167.657 52.228 165.019 54.6333 163.565 54.2944 cv
162.656 54.0825 161.944 51.165 161.405 49.9746 cv
156.864 39.937 151.812 28.9639 147.725 19.0146 cv
148.271 18.8994 151.598 16.3413 152.646 16.7344 cv
153.539 17.0698 154.35 19.6924 154.925 20.9346 cv
159.52 30.856 164.677 42.2578 168.485 52.0146 cv
cp
ef
332.885 38.8145 mo
330.947 38.1523 329.367 37.1318 327.846 36.0547 cv
328.283 33.5786 330.943 31.8887 330.245 29.3345 cv
329.725 27.4282 327.241 26.6748 325.565 27.6543 cv
322.251 29.5928 321.127 36.1055 318.605 38.6943 cv
317.849 40.6104 316.673 42.541 315.605 44.6943 cv
314.626 46.668 312.806 48.6963 313.205 51.1743 cv
313.409 52.4404 314.771 53.7676 316.445 53.6943 cv
319.71 53.5518 319.912 49.0376 321.965 47.3345 cv
323.859 48.001 325.525 48.895 327.005 49.9746 cv
325.114 56.2729 318.358 62.1582 311.045 57.5347 cv
308.104 55.6753 306.254 52.3862 307.686 47.4546 cv
308.73 43.854 311.077 40.4282 313.325 36.4146 cv
315.629 32.3008 317.072 28.6147 319.205 25.7344 cv
320.677 23.7471 322.904 21.8398 325.686 21.5347 cv
329.394 21.1274 333.425 23.6304 334.925 25.9746 cv
337.49 29.9805 335.203 35.7432 332.885 38.8145 cv
cp
ef
154.685 59.0947 mo
153.393 60.1216 152.086 61.1348 150.365 61.7344 cv
145.662 55.0381 141.717 47.5825 136.925 40.9746 cv
138.589 46.9409 141.256 53.374 143.885 59.6943 cv
144.948 62.2485 147.104 65.6563 143.285 66.4146 cv
136.689 60.731 131.729 53.4116 125.045 47.8145 cv
125.024 49.5215 126.691 50.5635 127.205 52.1343 cv
127.361 52.5435 127.719 52.1909 127.925 52.3745 cv
128.757 55.3545 131.54 58.5391 133.325 61.2544 cv
135.098 63.9502 136.726 66.6567 138.245 69.4146 cv
137.116 70.5649 135.569 71.2988 134.165 72.1743 cv
126.742 61.7173 120.298 50.2817 113.165 39.5347 cv
115.031 37.8799 117.333 36.6621 119.646 35.4546 cv
125.027 40.1924 129.087 46.2524 134.765 50.6943 cv
134.183 47.541 132.643 44.5508 131.165 40.7344 cv
130.589 39.2466 129.995 37.5967 129.245 35.6943 cv
128.72 34.3618 127.098 32.021 127.325 30.7744 cv
127.557 29.5044 133.12 27.0562 133.925 26.5742 cv
141.221 37.0396 147.986 48.0332 154.685 59.0947 cv
cp
ef
243.846 28.7344 mo
242.672 29.9795 240.305 30.6084 237.846 30.1743 cv
237.791 29.6221 237.626 29.2192 237.965 28.8545 cv
239.521 28.6094 242.867 27.6626 243.846 28.7344 cv
cp
ef
229.565 31.0146 mo
229.881 30.9785 229.959 31.1807 229.925 31.4946 cv
229.609 31.5308 229.531 31.3281 229.565 31.0146 cv
cp
ef
248.885 38.3345 mo
251.684 38.2524 253.39 39.0928 255.965 38.6943 cv
254.455 41.2588 251.198 40.3511 248.525 39.4146 cv
248.885 38.9346 li
248.885 38.3345 li
cp
ef
242.885 45.1743 mo
242.435 45.4434 241.872 45.6016 241.205 45.6543 cv
240.948 45.312 240.61 45.0498 240.726 44.3345 cv
240.32 43.9956 239.518 44.3281 239.045 43.8545 cv
240.283 43.1299 241.925 43.9897 242.766 44.4546 cv
242.705 44.8345 li
242.885 45.1743 li
cp
ef
256.325 47.3345 mo
256.453 44.9004 256.728 42.6338 259.445 42.5347 cv
259.19 44.7998 258.032 46.1611 257.165 47.8145 cv
256.799 47.481 li
256.325 47.3345 li
cp
ef
235.686 50.5742 mo
235.354 50.7627 235.018 50.9473 234.605 51.0547 cv
234.563 50.6714 li
234.245 50.4546 li
234.5 49.9492 234.749 49.438 235.325 49.2544 cv
235.385 49.6743 li
235.806 49.7344 li
235.806 49.8145 235.806 49.8945 235.806 49.9746 cv
235.359 50.1973 li
235.686 50.5742 li
cp
ef
249.605 54.1743 mo
249.381 54.4302 249.409 54.9385 249.125 55.1343 cv
248.421 55.0098 249.13 53.9453 248.766 53.3345 cv
248.57 53.0889 247.88 53.3398 247.686 53.0947 cv
246.731 52.084 247.608 51.0068 248.766 50.8145 cv
248.825 51.2344 li
249.245 51.1743 li
249.372 51.9282 249.771 52.4092 249.846 53.2144 cv
249.432 53.6211 li
249.605 54.1743 li
cp
ef
374.525 70.3745 mo
373.709 71.1465 370.58 73.3076 370.686 74.4546 cv
370.789 75.5894 373.044 76.8984 373.925 77.0947 cv
376.28 77.6187 380.808 73.7979 381.605 71.4546 cv
382.261 69.5293 380.189 66.2148 378.846 66.4146 cv
377.529 66.6099 375.75 69.2168 374.525 70.3745 cv
cp
363.846 98.5742 mo
362.871 98.165 362.411 97.3989 361.565 96.5347 cv
361.067 96.0254 359.697 94.896 359.646 94.2544 cv
359.582 93.4707 361.165 91.644 361.806 90.6543 cv
363.354 88.2588 364.733 86.1328 366.245 83.6943 cv
367.43 81.7847 369.479 79.4873 366.726 78.1743 cv
363.794 80.1733 360.929 83.7402 357.846 86.5742 cv
357.113 87.2476 355.521 89.1904 354.846 89.2144 cv
353.422 89.2651 351.95 85.7871 350.885 85.2544 cv
354.96 80.5664 359.919 76.3618 364.565 71.8145 cv
369.17 67.3076 373.669 62.5581 378.245 58.4946 cv
378.214 58.522 378.688 58.1948 378.846 58.2544 cv
380.615 58.9209 381.792 61.061 383.285 62.5742 cv
385.814 65.1382 388.451 67.2417 387.726 72.0547 cv
387.13 76.0039 382.569 80.7749 378.846 82.3745 cv
377.471 82.9648 375.639 83.0757 373.925 82.9746 cv
370.29 87.8994 367.38 93.5488 363.846 98.5742 cv
cp
ef
75.9653 82.1343 mo
76.062 82.8647 77.7813 83.7471 78.6055 84.4146 cv
83.4141 88.3101 87.3516 91.8081 92.0454 95.5742 cv
92.8745 96.2397 96.5576 99.9121 97.6851 99.7744 cv
99.0146 99.6118 100.612 95.8433 99.9653 94.3745 cv
98.5552 91.1729 94.1421 88.9453 91.2051 86.4546 cv
89.5415 85.0435 88.0723 83.9087 86.5254 82.7344 cv
84.6353 81.2998 82.5757 78.6553 80.165 78.7744 cv
78.6426 78.8496 75.7285 80.3511 75.9653 82.1343 cv
cp
98.165 107.814 mo
87.8037 99.936 77.9121 91.5874 68.0454 83.2144 cv
70.3867 79.4761 73.0493 76.0586 76.5654 73.4946 cv
82.7891 71.3018 87.1406 75.5566 90.9653 78.6543 cv
92.8179 80.1553 94.7061 81.6724 96.7251 83.3345 cv
100.891 86.7637 109.099 91.9956 105.005 99.5347 cv
103.374 102.538 100.433 105.036 98.165 107.814 cv
cp
ef
228.965 75.1743 mo
228.869 75.6782 228.08 75.4893 228.005 76.0146 cv
227.839 76.6611 228.462 76.5176 228.365 77.0947 cv
226.677 77.1699 227.426 74.2427 228.965 75.1743 cv
cp
ef
225.725 79.7344 mo
226.092 80.1279 226.023 80.9565 226.445 81.2944 cv
226.205 81.2944 225.965 81.2944 225.725 81.2944 cv
225.514 80.9604 225.288 80.0059 225.725 79.7344 cv
cp
ef
395.165 101.214 mo
397.618 100.856 401.8 97.6709 402.245 95.6943 cv
402.77 93.3682 400.704 90.4121 399.365 91.1343 cv
397.788 91.9854 396.602 92.9741 394.806 94.2544 cv
394.079 94.7725 390.586 96.6318 390.485 97.7344 cv
390.346 99.2549 392.644 100.38 393.605 101.214 cv
393.957 101.157 394.663 101.288 395.165 101.214 cv
cp
385.686 101.095 mo
380.958 103.607 377.396 107.286 372.726 109.854 cv
371.535 108.524 370.479 107.061 369.485 105.535 cv
374.345 101.485 379.715 97.9175 384.965 94.1343 cv
390.24 90.3335 395.806 86.1191 400.925 82.8545 cv
402.485 83.7607 403.64 86.0986 404.646 87.5347 cv
406.521 90.2139 409.002 92.5513 408.125 96.8945 cv
407.149 101.729 400.016 106.74 396.005 107.334 cv
390.055 108.216 388.346 104.106 385.686 101.095 cv
cp
ef
224.165 84.0547 mo
224.281 84.5698 223.576 84.2651 223.565 84.6543 cv
223.461 85.2212 224.217 85.3555 223.925 85.7344 cv
222.772 85.7334 222.891 83.4302 224.165 84.0547 cv
cp
ef
222.605 88.8545 mo
222.247 88.9365 221.871 89 221.765 89.3345 cv
221.772 89.7275 222.106 89.793 222.005 90.2944 cv
221.62 90.1997 221.481 89.8589 221.165 89.6943 cv
221.156 89.2451 221.683 89.332 221.525 88.7344 cv
221.893 88.7202 222.574 88.1563 222.605 88.8545 cv
cp
ef
186.965 92.9346 mo
186.571 93.3086 186.005 93.374 185.525 93.8945 cv
184.636 93.0078 186.469 91.7773 186.965 92.9346 cv
cp
ef
220.565 93.0547 mo
220.256 93.6572 219.947 93.8369 220.325 94.6143 cv
219.339 94.5703 219.165 92.7598 220.565 93.0547 cv
cp
ef
219.005 97.2544 mo
218.476 97.5962 217.928 97.8921 218.285 98.8145 cv
217.833 98.8662 217.739 98.561 217.565 98.3345 cv
217.588 97.5718 218.216 96.8608 219.005 97.2544 cv
cp
ef
63.4854 107.574 mo
63.4854 107.694 63.4854 107.814 63.4854 107.935 cv
67.1992 110.96 70.6577 114.24 74.8853 116.574 cv
75.5854 115.275 76.6221 114.312 76.9253 112.614 cv
72.5859 110.873 67.9727 108.768 63.4854 107.574 cv
cp
93.3652 113.095 mo
92.1074 114.301 92.0996 117.384 90.4854 117.654 cv
89.5327 117.814 87.8096 116.611 86.6455 116.214 cv
85.4277 115.8 83.668 114.632 82.6851 114.895 cv
81.8472 115.119 81.167 117.238 81.0054 117.535 cv
80.6821 118.127 79.4868 119.473 79.5654 120.294 cv
79.6821 121.52 82.0063 122.511 82.8052 123.174 cv
83.9023 124.086 85.8218 125.266 85.9253 126.055 cv
86.1147 127.497 83.8213 129.369 83.2852 130.614 cv
74.6689 123.924 64.9907 116.477 56.2852 109.015 cv
55.5518 108.386 52.8135 106.746 52.6851 105.774 cv
52.5088 104.438 55.938 100.558 56.2852 99.5347 cv
68.7681 103.932 81.5308 108.049 93.3652 113.095 cv
cp
ef
217.325 101.455 mo
216.895 101.384 216.745 101.594 216.485 101.694 cv
216.384 102.196 216.719 102.261 216.725 102.654 cv
215.964 102.736 216.009 102.011 216.005 101.334 cv
216.374 101.292 217.268 100.727 217.325 101.455 cv
cp
ef
215.765 105.174 mo
215.644 105.653 214.915 105.524 214.805 106.015 cv
214.985 106.195 215.02 106.52 215.285 106.614 cv
214.144 107.425 213.908 104.553 215.765 105.174 cv
cp
ef
255.846 105.415 mo
255.215 106.109 254.566 106.557 255.005 107.455 cv
253.115 107.349 254.676 104.479 255.846 105.415 cv
cp
ef
417.245 126.895 mo
417.054 126.01 413.984 123.848 414.125 122.574 cv
414.189 121.991 415.578 121.411 415.925 121.015 cv
417.711 118.973 416.702 115.369 413.285 115.614 cv
411.312 115.756 409.213 117.951 408.365 119.574 cv
405.482 125.099 405.412 131.946 400.325 135.415 cv
396.95 137.716 390.408 138.833 387.125 135.294 cv
385.729 133.791 384.186 131.277 383.885 129.055 cv
383.54 126.494 385.003 123.401 386.405 121.975 cv
387.065 121.303 389.297 119.416 390.005 119.455 cv
390.737 119.495 391.22 120.643 391.925 121.614 cv
392.194 121.984 393.644 122.995 393.605 123.895 cv
393.557 125.024 390.825 125.888 390.125 127.375 cv
388.328 131.189 392.737 133.12 395.885 131.455 cv
397.393 130.657 398.685 129.172 399.365 127.495 cv
401.977 121.052 402.314 113.987 408.846 110.935 cv
419.863 105.785 428.295 122.025 417.245 126.895 cv
cp
ef
234.245 115.734 mo
236.327 115.682 238.619 114.954 240.605 115.375 cv
240.81 117.472 240.655 120.595 240.726 123.415 cv
240.764 124.986 241.213 131.055 240.125 131.334 cv
238.584 131.731 237.638 127.286 237.125 126.055 cv
235.977 123.292 234.679 121.677 231.005 121.734 cv
231.005 121.134 li
230.646 120.654 li
233.28 120.649 235.566 120.296 237.125 119.214 cv
237.973 120.607 238.044 122.776 239.045 124.015 cv
239.457 121.609 239.312 119.021 239.045 116.814 cv
237.634 116.607 235.722 117.131 234.245 116.814 cv
234.306 116.274 li
234.245 115.734 li
cp
.00332647 .990387 .971069 .000885023 cmyk
ef
222.605 121.134 mo
222.965 121.614 li
220.431 121.822 218.421 121.815 215.765 121.854 cv
214.755 127.679 215.341 137.007 215.165 143.694 cv
215.413 144.327 216.771 143.848 217.325 144.174 cv
216.965 144.654 li
216.965 145.254 li
215.66 145.187 214.472 145.615 213.725 144.895 cv
213.707 137.724 213.512 127.829 214.205 120.654 cv
216.733 120.213 220.216 120.473 222.605 120.535 cv
222.605 121.134 li
cp
ef
228.365 144.774 mo
228.005 144.294 li
230.309 144.317 231.796 143.642 233.045 142.375 cv
234.289 141.018 234.472 138.601 236.525 138.055 cv
237.385 139.353 236.945 141.542 236.885 143.455 cv
236.771 147.097 236.766 149.722 236.766 154.614 cv
236.766 156.343 237.067 159.205 236.165 159.535 cv
234.815 160.028 234.05 156.13 233.405 154.734 cv
232.285 152.308 231.431 150.39 228.245 150.174 cv
228.245 149.574 li
227.885 149.095 li
230.245 149.134 231.973 148.542 233.646 147.895 cv
234.661 149.278 234.345 151.995 235.325 153.415 cv
235.522 150.752 235.577 147.207 235.445 143.814 cv
234.34 144.374 234.886 146.648 233.766 146.935 cv
232.679 147.212 230.54 144.496 228.365 145.375 cv
228.365 144.774 li
cp
ef
216.305 149.528 mo
216.485 150.055 li
216.066 150.275 215.266 150.115 215.045 150.535 cv
214.577 154.906 215.202 158.74 214.805 163.375 cv
214.252 163.314 li
213.725 163.495 li
213.663 160.638 213.458 155.556 213.485 152.455 cv
213.505 150.175 213.565 148.083 216.365 148.975 cv
216.305 149.528 li
cp
ef
235.085 175.015 mo
234.726 174.535 li
237.261 174.169 238.429 171.787 239.525 169.614 cv
240.397 167.888 240.786 165.573 242.525 164.814 cv
243.299 167.203 242.609 170.683 242.405 173.694 cv
241.879 173.515 li
241.325 173.574 li
241.058 173.098 241.563 172.122 241.205 171.535 cv
239.783 171.882 240.263 176.997 238.806 177.294 cv
237.654 177.53 236.72 174.919 235.085 175.614 cv
235.085 175.015 li
cp
ef
202.925 179.574 mo
203.285 180.055 li
200.843 180.128 198.459 180.414 196.445 179.694 cv
196.847 178.313 198.914 177.856 200.646 177.294 cv
202.343 176.744 204.888 176.028 205.565 174.895 cv
206.176 173.873 206.105 170.876 206.165 169.015 cv
206.622 154.946 206.404 143.363 206.405 129.294 cv
206.405 126.625 206.686 123.713 206.165 121.975 cv
205.072 118.32 197.982 119.297 196.685 115.975 cv
198.628 114.95 202.693 115.669 204.485 115.734 cv
204.185 116.234 li
204.245 116.814 li
203.488 116.817 202.678 116.767 202.085 116.935 cv
204.435 118.505 208.107 118.752 210.725 120.055 cv
211.256 121.155 210.958 121.891 210.965 123.055 cv
211.082 141.058 210.643 157.051 210.365 175.854 cv
208.074 177.203 204.678 177.447 202.325 178.734 cv
202.483 178.857 202.768 178.852 202.925 178.975 cv
202.925 179.574 li
cp
ef
305.045 117.415 mo
305.677 117.462 306.11 117.709 306.605 117.895 cv
307.113 121.86 306.859 127.446 306.846 132.055 cv
306.841 133.466 307.332 135.143 306.245 136.015 cv
304.559 135.493 304.165 133.399 303.605 131.814 cv
303.006 130.117 302.345 128.385 301.686 126.895 cv
301.142 126.078 300.571 125.288 300.005 124.495 cv
294.22 121.672 284.619 120.726 277.686 123.055 cv
277.686 122.455 li
277.205 122.095 li
284.41 118.851 294.173 119.116 302.525 121.134 cv
303.96 123.22 303.91 126.789 305.285 128.935 cv
305.641 125.398 305.414 122.82 305.525 119.095 cv
305.177 118.963 304.948 118.711 304.686 118.495 cv
305.045 118.015 li
305.045 117.415 li
cp
ef
285.605 177.654 mo
285.605 177.055 li
288.957 176.956 292.418 176.507 295.325 175.495 cv
297.238 174.828 299.375 174.183 300.846 173.214 cv
303.027 171.777 304.532 169.273 306.005 167.095 cv
307.443 164.968 308.39 162.212 310.806 160.734 cv
311.112 163.832 309.947 166.896 309.485 169.854 cv
309.005 169.495 li
308.405 169.495 li
308.078 168.79 308.656 168.167 308.285 167.455 cv
307.005 170.015 305.965 172.814 304.445 175.134 cv
299.111 177.16 292.079 178.724 285.245 178.134 cv
285.605 177.654 li
cp
ef
279.005 181.614 mo
279.005 182.214 li
270.934 181.053 264.942 177.552 260.045 172.854 cv
255.354 168.354 251.353 162.291 250.085 154.614 cv
248.578 145.486 251.558 136.648 255.726 130.975 cv
260.28 124.772 266.713 120.287 274.686 117.774 cv
274.686 118.375 li
275.045 118.854 li
268.063 121.619 262.627 126.047 258.846 132.294 cv
255.131 138.432 253.243 147.227 255.125 156.174 cv
257.812 168.948 267.604 177.286 279.365 181.134 cv
279.005 181.614 li
cp
ef
99.3652 179.694 mo
97.8706 179.229 95.0122 180.127 94.0854 179.095 cv
95.0518 177.41 97.583 177.375 99.4854 176.694 cv
100.769 176.235 101.798 175.62 102.845 175.134 cv
103.064 174.532 103.547 174.17 103.685 173.214 cv
104.547 167.265 103.806 159.936 104.045 152.694 cv
104.343 143.682 103.875 135.043 103.685 126.174 cv
103.649 124.507 103.74 122.374 103.325 121.134 cv
102.802 119.569 100.615 119.086 98.7651 118.495 cv
97.439 118.07 91.9834 116.428 94.6851 115.375 cv
94.8086 115.326 94.9424 115.261 95.0454 115.254 cv
98.2256 115.063 103.92 115.563 106.805 115.495 cv
106.445 115.975 li
106.445 116.574 li
104.254 116.929 101.916 116.439 99.8452 116.814 cv
102.122 118.458 106.368 118.132 108.365 120.055 cv
108.406 137.476 108.143 156.684 108.125 172.375 cv
108.125 173.275 108.421 174.494 108.005 175.134 cv
107.517 175.885 104.523 176.526 103.565 176.814 cv
101.803 177.345 100.211 177.341 99.1255 178.375 cv
99.1982 178.582 99.6943 178.365 99.7251 178.614 cv
99.3652 179.095 li
99.3652 179.694 li
cp
ef
129.388 144.198 mo
129.845 144.535 li
129.721 144.85 129.37 144.938 129.245 145.254 cv
129.396 145.624 129.893 145.647 130.205 145.854 cv
129.845 146.334 li
129.845 146.935 li
128.03 146.55 126.044 146.336 124.445 145.734 cv
125.552 144.601 127.687 144.496 129.125 143.694 cv
129.388 144.198 li
cp
ef
171.845 115.495 mo
173.536 115.512 176.019 115.256 177.725 115.254 cv
178.417 115.254 180.115 115.249 180.245 116.095 cv
180.346 116.748 178.235 117.364 177.485 117.654 cv
176.111 118.187 175.208 118.288 174.125 118.734 cv
174.125 118.134 li
173.646 117.774 li
173.75 117.319 174.521 117.531 174.605 117.055 cv
174.15 116.309 172.284 116.976 171.485 116.574 cv
171.845 116.095 li
171.845 115.495 li
cp
ef
187.205 175.134 mo
186.845 174.654 li
191.395 173.284 191.454 166.783 194.525 164.334 cv
195.85 165.549 194.717 169.673 194.765 171.535 cv
194.225 171.475 li
193.685 171.535 li
193.769 170.931 193.481 170.698 193.565 170.095 cv
192.103 171.952 192.112 175.281 190.685 177.174 cv
189.687 176.471 188.746 175.56 187.205 175.734 cv
187.205 175.134 li
cp
ef
154.445 179.694 mo
154.445 180.294 li
153.771 180.16 151.681 180.646 150.845 179.935 cv
151.094 178.543 152.958 178.768 153.965 178.134 cv
154.302 178.591 li
154.805 178.854 li
154.754 179.105 154.888 179.172 154.925 179.334 cv
154.445 179.694 li
cp
ef
158.525 177.055 mo
158.165 176.574 li
161.161 175.488 160.325 168.603 160.325 164.574 cv
160.326 150.142 160.583 138.847 159.845 125.694 cv
159.759 124.159 159.915 122.291 159.365 121.254 cv
157.866 118.428 151.257 118.89 150.005 116.095 cv
152.675 114.875 157.445 115.733 160.685 115.614 cv
160.625 116.168 li
160.805 116.694 li
159.474 117.002 157.446 116.616 156.245 117.055 cv
158.455 118.565 162.287 118.453 164.405 120.055 cv
164.458 138.787 164.838 157.569 164.525 175.975 cv
162.829 176.838 160.593 177.162 158.525 177.654 cv
158.525 177.055 li
cp
ef
319.806 181.134 mo
317.928 181.182 314.615 181.706 313.565 180.535 cv
315.488 178.031 322.104 178.714 323.285 175.375 cv
323.895 173.651 323.552 169.845 323.646 167.214 cv
324.107 154.215 324.204 141.311 323.885 128.095 cv
323.835 126 324.066 123.217 323.165 121.975 cv
321.331 119.446 315.938 119.789 314.285 117.415 cv
316.374 116.152 319.456 117.066 321.846 116.935 cv
321.846 117.535 li
322.205 118.015 li
322.047 118.416 320.856 117.785 320.885 118.375 cv
321.921 119.691 327.521 119.553 328.325 121.254 cv
329.018 122.717 328.324 126.586 328.325 128.694 cv
328.335 144.134 328.159 161.74 327.846 176.935 cv
325.752 178.521 322.111 178.561 319.686 179.814 cv
319.6 180.14 320.251 179.729 320.165 180.055 cv
319.806 180.535 li
319.806 181.134 li
cp
ef
335.585 117.595 mo
335.525 117.055 li
338.182 117.048 340.787 116.515 342.365 117.535 cv
341.034 119.204 338.322 119.492 336.245 120.415 cv
336.245 119.814 li
335.885 119.334 li
336.069 118.878 336.948 119.118 336.965 118.495 cv
336.65 118.209 335.918 118.342 335.525 118.134 cv
335.585 117.595 li
cp
ef
333.846 120.774 mo
334.205 121.254 li
333.802 121.571 333.442 121.931 333.125 122.334 cv
333.062 129.007 332.06 137.166 333.005 143.214 cv
340.075 137.402 346.627 131.396 353.165 124.734 cv
353.893 123.993 355.765 122.517 355.686 121.734 cv
355.593 120.823 353.651 120.308 352.325 119.694 cv
351.188 119.169 348.891 118.502 348.965 117.654 cv
349.069 116.468 352.699 117.047 354.365 117.055 cv
356.7 117.064 358.94 117.012 360.485 117.174 cv
360.425 117.728 li
360.605 118.254 li
359.319 118.729 356.71 117.879 355.806 118.734 cv
356.412 119.786 361.659 119.673 361.686 121.375 cv
361.695 122.027 359.265 123.933 358.445 124.734 cv
351.696 131.34 345.103 137.031 337.925 143.455 cv
337.206 144.098 334.799 146.149 334.806 146.814 cv
334.812 147.478 337.043 149.54 337.925 150.415 cv
345.888 158.313 352.845 166.429 361.085 174.055 cv
365.396 178.043 371.907 181.785 378.846 181.495 cv
378.738 181.441 378.631 181.389 378.605 181.254 cv
379.085 180.895 li
379.085 180.294 li
379.785 180.394 380.479 180.5 380.885 180.895 cv
381.099 181.496 380.92 182.028 380.766 182.574 cv
365.389 185.681 356.697 175.602 349.085 167.814 cv
343.465 162.065 338.098 156.552 332.885 151.375 cv
331.975 155.96 332.76 161.89 332.525 167.814 cv
331.925 167.814 li
331.445 168.174 li
330.763 155.947 331.191 139.818 331.565 127.134 cv
331.646 124.405 331.247 120.687 333.846 120.174 cv
333.846 120.774 li
cp
ef
367.686 117.774 mo
367.325 117.294 li
368.972 116.902 371.201 117.252 372.965 117.294 cv
374.087 117.322 376.034 116.574 376.205 118.134 cv
374.563 119.212 372.533 119.902 370.445 120.535 cv
370.445 119.935 li
370.085 119.455 li
370.146 118.994 370.973 119.302 370.925 118.734 cv
370.191 118.239 369.045 118.443 367.686 118.375 cv
367.686 117.774 li
cp
ef
340.205 145.495 mo
340.686 145.854 li
340.262 146.579 340.64 146.952 340.925 147.535 cv
340.445 147.895 li
340.085 148.375 li
338.54 147.962 338.182 145.586 339.846 145.015 cv
340.205 145.495 li
cp
ef
338.525 179.455 mo
338.885 178.975 li
340.174 179.525 341.87 179.67 342.605 180.774 cv
341.759 181.912 339.738 181.407 338.285 181.375 cv
338.346 180.794 li
338.045 180.294 li
338.185 180.117 338.185 179.992 338.045 179.814 cv
338.525 179.455 li
cp
ef
120.605 119.694 mo
128.205 119.028 134.684 122.669 135.365 129.895 cv
136.018 136.819 129.769 140.562 124.805 142.854 cv
124.805 142.254 li
124.445 141.774 li
128.525 139.28 132.273 134.363 130.565 127.854 cv
129.443 123.577 125.327 121.297 120.245 120.774 cv
120.605 120.294 li
120.605 119.694 li
cp
ef
112.865 143.861 mo
112.925 144.415 li
112.494 144.728 111.856 144.419 111.485 144.294 cv
111.199 138.854 111.135 132.333 111.365 126.415 cv
111.449 124.264 111.178 121.135 112.805 120.654 cv
113.165 121.134 li
113.646 121.495 li
112.526 122.956 112.645 127.914 112.685 130.975 cv
112.709 132.836 112.886 134.949 112.805 137.095 cv
112.728 139.176 112.312 142.283 113.045 143.334 cv
112.865 143.861 li
cp
ef
125.646 148.975 mo
132.617 150.265 139.433 153.997 139.325 162.055 cv
139.229 169.223 133.138 173.454 126.485 174.895 cv
126.485 174.294 li
126.125 173.814 li
129.844 172.298 132.707 169.814 134.045 166.134 cv
136.844 158.44 131.811 151.658 125.285 150.055 cv
125.646 149.574 li
125.646 148.975 li
cp
ef
112.085 163.015 mo
111.605 163.375 li
111.379 161.366 111.485 158.674 111.485 155.694 cv
111.485 153.671 110.815 149.211 111.845 148.495 cv
112.146 148.286 112.729 148.142 113.165 148.254 cv
113.105 148.834 li
113.405 149.334 li
112.462 149.694 112.84 152.464 112.805 153.774 cv
112.731 156.568 112.893 160.189 112.685 163.015 cv
112.085 163.015 li
cp
ef
41.5254 162.535 mo
41.5254 162.654 41.5254 162.774 41.5254 162.895 cv
45.7749 164.965 50.0425 167.017 54.8452 168.535 cv
55.2417 167.193 55.9912 165.625 55.8052 164.095 cv
51.4604 163.379 46.2974 162.908 41.5254 162.535 cv
cp
71.7651 160.134 mo
71.6362 161.782 71.0503 163.968 70.3252 165.415 cv
67.3896 165.311 64.9678 164.692 61.9253 164.694 cv
61.8608 166.038 59.873 169.211 60.2451 170.694 cv
60.502 171.717 63.1294 172.345 64.0854 172.734 cv
65.6782 173.383 66.981 173.842 68.0454 174.654 cv
67.8931 176.279 67.335 178.492 66.6055 179.935 cv
54.6289 174.591 42.3882 169.511 30.7251 163.854 cv
30.7529 161.739 31.5854 158.735 32.5254 156.774 cv
45.6602 157.652 58.9258 158.523 71.7651 160.134 cv
cp
0 0 0 1 cmyk
ef
438.125 159.654 mo
439.835 165.145 440.779 171.401 441.965 177.415 cv
440.536 177.911 438.492 178.415 436.925 178.375 cv
435.841 177.059 436.304 174.196 435.245 172.854 cv
424.42 174.549 413.413 177.102 402.365 178.975 cv
401.839 177.301 401.567 175.373 401.285 173.455 cv
412.038 170.779 423.334 169.136 433.925 166.495 cv
434.202 164.492 433.096 162.849 433.085 160.734 cv
434.498 160.107 436.226 159.794 438.125 159.654 cv
cp
ef
126.005 265.854 mo
111.13 266.765 98.979 260.456 92.7651 250.614 cv
86.667 240.956 85.4556 226.209 91.4453 215.574 cv
96.8062 206.056 106.485 199.734 118.925 198.175 cv
118.925 198.774 li
119.285 199.255 li
105.145 202.55 94.1514 211.539 92.4053 227.095 cv
91.7832 232.635 92.3569 237.894 94.0854 242.694 cv
98.6812 255.461 110.065 264.438 125.646 264.774 cv
125.646 265.374 li
126.005 265.854 li
cp
.00332647 .990387 .971069 .000885023 cmyk
ef
10.4453 262.854 mo
9.02539 262.389 4.33301 263.708 4.08545 262.255 cv
3.91797 261.271 7.50781 260.32 8.52539 259.975 cv
10.0181 259.467 12.7734 258.692 13.2051 257.574 cv
13.8359 255.941 13.6851 253.093 13.6851 250.734 cv
13.6851 238.355 13.7798 222.994 13.8052 210.895 cv
13.8105 208.408 14.3394 204.974 13.0854 203.454 cv
12.356 202.571 10.1611 201.722 8.76514 201.175 cv
7.37598 200.629 4.5083 200.075 4.56543 198.895 cv
4.60059 198.17 5.06934 198.137 5.52539 198.055 cv
9.21631 197.387 14.4453 198.664 18.2451 198.414 cv
18.1851 198.968 li
18.3652 199.494 li
15.7827 199.782 13.5234 199.382 10.8052 199.734 cv
11.9873 201.571 17.9648 200.629 18.6055 203.215 cv
18.8486 204.196 18.6328 206.148 18.6055 207.654 cv
18.2832 225.115 18.3721 242.894 18.2451 258.534 cv
15.938 260.047 11.9434 260.171 9.7251 261.414 cv
9.71094 261.908 10.6641 261.436 10.8052 261.774 cv
10.4453 262.255 li
10.4453 262.854 li
cp
ef
21.9653 199.015 mo
21.9653 198.414 li
25.4014 198.457 28.9927 197.958 32.5254 198.654 cv
32.7041 200.442 30.4756 200.46 29.165 200.935 cv
27.0649 201.696 23.811 202.488 23.165 204.414 cv
22.7871 205.542 22.8735 207.127 22.8052 208.494 cv
22.5361 213.898 22.541 220.661 22.8052 226.374 cv
23.9609 226.938 26.271 226.349 27.6055 226.734 cv
27.665 227.274 li
27.7251 227.814 li
25.9653 227.888 23.2524 227.892 21.4854 227.574 cv
20.7383 222.54 21.1475 215.556 21.3652 210.175 cv
21.4683 207.637 21.0244 204.766 22.0854 203.095 cv
23.2236 201.302 25.7324 201.446 27.1255 199.854 cv
25.6987 199.321 23.1992 199.86 21.6055 199.494 cv
21.9653 199.015 li
cp
ef
56.0454 227.454 mo
56.0454 226.854 li
56.853 226.942 57.3994 226.769 57.9653 226.614 cv
58.1445 222.856 58.064 218.585 58.0854 213.895 cv
58.0991 210.845 58.603 206.114 57.7251 204.055 cv
56.9053 202.131 52.998 201.354 50.6455 200.574 cv
49.9653 200.35 48.4419 200.019 48.4854 199.255 cv
48.5464 198.188 51.1138 198.387 52.0854 198.414 cv
53.269 198.448 54.7827 198.513 55.9253 198.654 cv
55.5654 199.135 li
55.5654 199.734 li
55.0957 199.665 54.8687 199.838 54.6055 199.975 cv
56.7578 201.542 60.77 201.25 62.7651 202.975 cv
63.0347 209.512 62.8008 217.119 62.7651 223.734 cv
62.7583 225.055 63.2241 229.008 62.2852 229.494 cv
61.4087 229.949 60.2925 228.389 59.5254 228.175 cv
58.1123 227.779 57.1396 228.326 55.6851 227.935 cv
56.0454 227.454 li
cp
ef
70.5757 199.216 mo
70.2051 198.774 li
72.1108 198.73 75.1699 198.052 76.8052 199.135 cv
76.543 201.044 73.3008 200.98 71.6455 201.895 cv
71.6455 201.295 li
71.2852 200.814 li
71.4844 200.454 72.1772 200.587 72.2451 200.095 cv
71.854 199.726 70.8081 200.012 70.3252 199.734 cv
70.5757 199.216 li
cp
ef
67.5654 203.215 mo
68.0454 203.574 li
66.7583 206.3 67.1895 213.431 67.0854 217.015 cv
66.8354 225.589 66.771 234.128 66.9653 242.935 cv
67.0674 247.551 66.605 253.443 67.3252 257.814 cv
66.8452 258.175 li
66.4854 258.654 li
65.3418 256.236 65.5439 251.515 65.5254 247.614 cv
65.4795 238.086 65.5674 227.521 65.7651 218.335 cv
65.8818 212.936 65.0703 207.051 66.9653 202.734 cv
67.0454 202.734 67.1255 202.734 67.2051 202.734 cv
67.5654 203.215 li
cp
ef
72.6055 261.414 mo
72.9653 260.935 li
73.8042 261.555 76.6665 261.435 76.4453 262.734 cv
76.2427 263.927 73.1089 263.161 72.1255 263.335 cv
72.1851 262.795 li
72.1255 262.255 li
72.4238 262.043 72.3003 262.057 72.1255 261.774 cv
72.6055 261.414 li
cp
ef
53.165 262.614 mo
53.165 263.215 li
51.8569 262.83 48.6479 263.948 48.3652 262.494 cv
48.1826 261.555 50.2681 261.443 51.3652 261.055 cv
53.1543 260.42 56.2993 259.377 57.2451 257.935 cv
58.3013 256.324 57.8203 252 57.8452 249.534 cv
57.9077 243.313 58.4565 238.666 57.7251 233.215 cv
57.0396 232.98 55.958 233.142 55.0854 233.095 cv
55.0854 232.494 li
54.7251 232.015 li
56.6221 231.564 58.3228 232.211 59.7651 231.774 cv
60.7324 231.481 61.2583 230.101 62.4053 230.694 cv
62.8511 233.628 62.6768 237.741 62.6455 241.255 cv
62.5962 246.714 62.5361 253.014 62.4053 259.015 cv
59.9609 260.53 56.1221 260.651 53.5254 262.015 cv
53.5479 262.111 53.6455 262.134 53.6455 262.255 cv
53.165 262.614 li
cp
ef
26.7651 232.374 mo
26.7651 232.975 li
25.4414 233.051 23.7671 232.776 22.8052 233.215 cv
22.1074 239.988 22.5884 248.788 22.6851 256.015 cv
22.0854 256.015 li
21.6055 256.374 li
20.7402 251.386 21.2642 244.631 21.1255 239.335 cv
21.0586 236.794 20.7358 234.141 21.6055 231.774 cv
23.4209 231.716 25.0264 231.635 27.1255 231.895 cv
26.7651 232.374 li
cp
ef
27.9653 260.935 mo
27.9653 260.335 li
29.4819 260.858 31.3579 261.022 32.165 262.255 cv
31.5073 263.477 28.9419 262.791 27.2451 262.975 cv
27.2451 262.374 li
26.8853 261.895 li
27.0962 261.703 27.9883 261.833 27.4854 261.295 cv
27.9653 260.935 li
cp
ef
176.285 263.935 mo
174.855 263.587 171.575 264.603 171.245 263.454 cv
170.991 262.568 172.556 262.192 173.045 262.015 cv
176.015 260.937 180.123 260.857 180.605 257.694 cv
181.034 254.887 180.845 251.352 180.845 248.095 cv
180.845 235.549 180.898 223.293 180.845 212.215 cv
180.833 209.674 181.314 205.848 180.125 204.175 cv
179.5 203.296 177.608 202.503 175.685 201.774 cv
174.466 201.313 171.091 200.552 171.245 199.494 cv
171.309 199.059 171.749 198.822 172.325 198.774 cv
176.611 198.421 182.725 199.098 187.085 199.015 cv
186.725 199.494 li
186.725 200.095 li
184.22 200.261 180.183 199.74 177.845 200.454 cv
180.082 201.458 182.82 201.959 185.045 202.975 cv
185.77 204.852 185.449 209.11 185.405 212.574 cv
185.211 228.058 185.174 244.657 185.045 259.494 cv
182.698 261.347 178.375 261.225 175.805 262.854 cv
175.925 262.854 176.045 262.854 176.165 262.854 cv
176.225 263.395 li
176.285 263.935 li
cp
ef
208.205 202.255 mo
208.565 201.774 li
213.098 204.371 217.528 209.561 217.325 216.774 cv
217.205 221.056 215.503 224.729 213.365 227.454 cv
213.005 226.975 li
212.525 226.614 li
218.596 219.562 215.339 205.995 207.725 202.614 cv
208.205 202.255 li
cp
ef
203.964 233.173 mo
204.485 233.454 li
203.754 234.324 201.998 234.167 201.005 234.774 cv
200.975 235.444 201.49 235.57 201.605 236.095 cv
201.125 236.454 li
200.765 236.935 li
200.215 236.055 197.962 235.078 198.485 233.935 cv
199.015 232.777 202.228 233.504 203.765 232.614 cv
203.964 233.173 li
cp
ef
229.822 263.403 mo
229.805 262.854 li
230.767 262.969 231.471 263.134 232.565 263.335 cv
232.657 264.307 231.807 264.336 231.605 265.015 cv
230.372 265.314 229.022 265.695 227.765 265.734 cv
217.031 266.071 212.313 258.87 206.765 253.135 cv
201.017 247.19 195.781 241.051 190.205 235.975 cv
189.152 241.926 190.104 250.406 189.725 256.494 cv
189.125 256.494 li
188.646 256.854 li
188.477 252.955 188.376 249.457 188.405 245.454 cv
188.432 241.782 188.007 237.778 188.885 234.414 cv
190.73 235.288 191.612 232.883 193.205 233.095 cv
194.129 233.218 196.535 236.489 197.165 237.175 cv
201.013 241.354 204.649 245.417 208.685 249.534 cv
213.884 254.839 218.437 262.026 226.085 264.055 cv
226.819 264.249 229.619 264.72 229.685 263.935 cv
229.822 263.403 li
cp
ef
196.182 262.277 mo
196.445 261.774 li
197.719 262.221 199.249 262.411 200.045 263.335 cv
199.737 264.726 197.139 263.958 195.725 264.055 cv
195.705 263.515 li
195.365 263.095 li
195.402 262.932 195.666 262.995 195.845 262.975 cv
195.879 262.78 195.732 262.768 195.725 262.614 cv
196.182 262.277 li
cp
ef
240.846 264.654 mo
239.136 264.702 235.776 265.206 234.965 264.295 cv
235.558 262.797 237.56 262.66 239.045 262.015 cv
241.941 260.757 243.899 260.341 244.085 256.614 cv
244.357 251.174 244.048 244.439 244.205 238.854 cv
244.482 229.005 243.848 218.311 243.726 208.135 cv
243.698 205.869 243.32 201.046 243.726 199.494 cv
245.517 199.028 247.658 199.409 249.965 199.255 cv
255.938 206.002 261.977 212.684 267.965 219.414 cv
267.485 219.774 li
267.125 220.255 li
262.078 214.882 256.312 208.786 251.165 202.854 cv
249.629 201.084 248.79 200.007 245.525 200.814 cv
245.669 202.058 246.904 202.632 247.325 203.814 cv
248.016 205.757 247.719 208.681 247.686 211.015 cv
247.454 227.111 248.165 244.816 247.686 260.814 cv
245.74 262.029 242.65 262.1 240.726 263.335 cv
240.748 263.432 240.846 263.454 240.846 263.574 cv
240.785 264.114 li
240.846 264.654 li
cp
ef
295.205 249.175 mo
295.565 248.694 li
296.213 248.768 296.145 249.556 296.885 249.534 cv
297.43 238.005 297.608 226.808 296.885 214.015 cv
296.746 211.549 297.016 207.628 296.285 205.975 cv
295.629 204.486 293.242 204.087 291.485 203.454 cv
290.529 203.11 286.64 201.851 286.565 201.055 cv
286.432 199.638 290.745 200.087 291.726 200.095 cv
296.731 200.131 302.15 200.094 308.646 200.095 cv
310.467 200.095 313.618 199.618 314.045 200.454 cv
314.847 202.022 310.049 202.764 309.125 203.574 cv
308.766 203.095 li
308.285 202.734 li
308.507 202.156 309.484 202.334 309.485 201.534 cv
304.437 201.267 298.199 201.414 293.165 201.654 cv
295.165 203.175 299.073 202.786 300.965 204.414 cv
300.976 215.767 300.911 228.656 300.965 239.935 cv
300.992 245.598 301.006 250.66 300.965 255.414 cv
300.958 256.294 301.764 257.878 300.485 258.295 cv
299.181 254.76 297.192 251.907 294.726 249.534 cv
295.205 249.175 li
cp
ef
305.525 204.774 mo
306.005 205.135 li
304.872 205.867 304.96 208.865 304.925 211.015 cv
304.667 227.064 304.754 241.668 304.925 257.694 cv
304.325 257.694 li
303.846 258.055 li
303.421 245.667 303.123 228.625 303.365 215.574 cv
303.419 212.707 303.1 209.223 303.605 206.335 cv
303.767 205.412 304.301 204.599 305.165 204.295 cv
305.525 204.774 li
cp
ef
304.505 263.994 mo
305.045 264.055 li
305.32 264.416 305.163 265.367 304.925 265.614 cv
304.596 265.985 304.264 265.65 303.726 265.854 cv
303.735 265.285 li
303.485 264.774 li
303.537 264.627 303.639 264.528 303.846 264.534 cv
303.807 264.256 303.864 264.073 303.965 263.935 cv
304.505 263.994 li
cp
ef
300.125 265.374 mo
300.485 265.854 li
298.618 266.315 297.396 264.227 296.165 262.734 cv
289.791 255.003 282.755 247.36 275.885 240.295 cv
267.707 231.883 260.281 223.081 252.005 215.454 cv
251.164 220.989 251.523 228.224 251.646 234.534 cv
251.765 240.741 251.783 247.079 251.766 252.534 cv
251.226 252.475 li
250.686 252.534 li
250.004 243.59 250.456 235.148 250.085 226.975 cv
249.859 221.991 250.726 216.63 250.085 211.975 cv
249.784 209.789 247.701 207.488 248.405 205.255 cv
249.925 205.906 250.927 207.364 252.005 208.494 cv
259.674 216.531 267.434 224.944 275.045 233.215 cv
283.775 242.699 292.702 251.947 301.325 261.534 cv
300.925 262.653 299.993 263.242 299.766 264.534 cv
299.862 264.638 300.094 264.605 300.125 264.774 cv
300.125 265.374 li
cp
ef
258.245 262.675 mo
258.365 262.135 li
259.503 262.757 261.79 262.869 262.085 263.935 cv
261.426 265.192 259.032 264.445 257.766 264.654 cv
257.766 264.055 li
257.405 263.574 li
257.454 263.303 258.108 263.638 257.885 263.095 cv
258.245 262.675 li
cp
ef
191.165 231.175 mo
190.538 231.369 189.109 231.414 188.646 231.055 cv
188.173 224.791 188.454 217.131 188.525 211.015 cv
188.553 208.66 188.161 205.821 189.125 204.534 cv
190.157 203.157 193.793 202.889 195.365 202.854 cv
206.777 202.604 215.26 209.68 212.165 220.614 cv
210.174 227.648 203.499 230.43 194.525 231.175 cv
194.525 230.574 li
194.165 230.095 li
201.705 229.063 207.438 225.575 208.085 217.854 cv
208.366 214.503 207.336 210.62 205.085 208.494 cv
204.848 208.271 204.427 208.39 204.125 208.135 cv
203.808 207.865 203.726 207.198 203.405 206.935 cv
201.14 205.074 197.12 203.929 193.445 204.295 cv
189.48 204.689 190.049 207.205 189.965 211.374 cv
189.843 217.466 189.648 223.682 190.085 229.734 cv
190.334 229.965 190.906 229.873 191.165 230.095 cv
191.105 230.635 li
191.165 231.175 li
cp
ef
219.365 280.135 mo
220.239 280.143 223.375 280.513 223.565 279.534 cv
223.786 278.404 221.495 278.699 220.445 278.694 cv
218.323 278.686 215.352 278.083 215.525 279.774 cv
216.555 280.146 217.639 280.119 219.365 280.135 cv
cp
215.045 275.095 mo
217.589 274.766 225.311 274.355 226.325 276.534 cv
227.05 278.092 226.763 282.245 225.605 283.135 cv
224.163 284.242 221.438 283.639 219.125 283.614 cv
217.554 283.598 215.608 284.176 213.965 283.374 cv
212.427 282.624 211.712 278.083 212.885 276.055 cv
213.325 275.293 214.305 275.19 215.045 275.095 cv
cp
0 0 0 1 cmyk
ef
190.445 284.935 mo
190.465 286.731 190.52 289.688 190.445 291.774 cv
188.93 291.929 187.048 291.763 185.045 291.774 cv
184.518 296.434 184.835 299.909 184.685 304.734 cv
186.124 305.336 188.816 304.684 190.445 305.095 cv
190.578 307.136 190.565 309.635 190.445 311.814 cv
188.143 311.828 187.157 311.847 184.925 311.814 cv
184.347 320.035 184.759 327.279 184.565 336.414 cv
181.488 336.703 178.612 336.449 175.685 336.295 cv
175.498 318.469 175.884 303.067 175.805 284.935 cv
175.8 284.729 175.895 284.624 176.045 284.574 cv
181.017 285.127 185.344 284.668 190.445 284.935 cv
cp
ef
217.925 318.774 mo
218.767 318.938 220.212 318.984 221.045 318.774 cv
220.573 311.197 220.198 304.259 219.605 296.935 cv
219.579 296.841 219.505 296.795 219.365 296.814 cv
218.953 303.988 218.368 311.561 217.925 318.774 cv
cp
213.605 284.694 mo
217.759 284.792 221.776 284.679 225.725 284.814 cv
227.559 301.751 229.4 318.976 231.245 336.654 cv
228.984 336.844 225.559 336.547 222.365 336.654 cv
221.944 332.943 221.89 329.468 221.525 325.854 cv
220.437 325.583 218.852 325.809 217.565 325.734 cv
217.086 329.234 217.258 333.028 216.725 336.654 cv
213.863 336.612 211.583 336.72 208.925 336.534 cv
210.036 319.79 211.844 301.76 213.365 285.055 cv
213.36 284.85 213.455 284.744 213.605 284.694 cv
cp
ef
242.405 285.175 mo
244.098 292.757 245.497 301.148 247.325 308.935 cv
247.637 301.063 247.313 292.716 247.445 285.295 cv
249.497 285.02 253.294 285.162 255.365 285.295 cv
255.513 301.563 255.612 320.079 255.365 337.015 cv
252.276 336.984 248.532 337.101 246.005 336.895 cv
244.347 328.594 243.011 319.969 241.205 311.814 cv
240.745 319.52 241.301 328.634 240.965 336.774 cv
238.293 337.006 235.347 336.877 233.045 336.774 cv
232.978 319.933 232.829 300.857 232.925 285.175 cv
235.32 284.78 239.588 285.121 242.405 285.175 cv
cp
ef
279.726 303.295 mo
275.921 303.239 273.996 303.374 270.965 303.055 cv
270.828 301.341 271.08 299.11 270.965 296.694 cv
270.884 294.984 271.236 291.956 269.165 292.015 cv
267.885 292.051 267.712 293.296 267.726 295.255 cv
267.783 303.86 267.674 314.178 267.726 322.614 cv
267.74 325.082 266.508 331.11 269.885 330.295 cv
271.709 329.854 271.185 323.899 271.205 321.175 cv
271.215 319.942 270.973 318.989 271.085 317.454 cv
270.581 317.159 269.44 317.499 268.925 317.215 cv
269.003 314.973 268.769 312.417 269.045 310.374 cv
272.802 310.409 276.766 310.289 279.726 310.494 cv
279.943 319.88 279.838 329.104 279.726 337.015 cv
278.481 336.983 277.627 337.082 276.605 337.015 cv
275.911 335.988 275.576 334.604 274.806 333.654 cv
272.319 338.807 260.851 338.313 259.085 333.055 cv
257.965 329.717 258.605 323.395 258.605 319.255 cv
258.605 314.385 258.693 308.603 258.605 302.814 cv
258.494 295.488 256.997 285.94 264.846 285.175 cv
269.813 284.689 276.487 284.677 278.766 288.295 cv
280.819 291.557 279.54 297.958 279.726 303.295 cv
cp
ef
292.565 285.534 mo
293.107 298.355 291.677 313.018 291.245 326.215 cv
289.607 326.233 287.032 326.201 285.005 326.215 cv
283.87 313.112 283.416 300.119 283.565 285.534 cv
286.971 285.464 288.927 285.473 292.565 285.534 cv
cp
ef
394.445 296.454 mo
397.296 295.438 398.169 299.538 396.125 300.295 cv
393.669 301.203 391.443 297.325 394.445 296.454 cv
cp
ef
.00537109 318.534 mo
.438965 318.421 .172852 319.007 .245117 319.255 cv
-.0615234 319.241 .00732422 318.853 .00537109 318.534 cv
cp
ef
419.405 324.295 mo
415.525 325.929 419.555 329.373 421.445 330.295 cv
422.409 330.012 423.358 328.869 424.565 329.574 cv
425.422 331.213 423.787 331.634 423.846 332.935 cv
423.914 334.463 427.255 337.52 428.285 339.295 cv
430.042 342.32 430.119 347.054 427.686 349.255 cv
426.615 350.222 423.379 350.345 423.245 348.414 cv
422.999 344.856 427.509 348.227 428.766 346.374 cv
427.548 345.927 427.366 344.979 426.485 343.854 cv
425.967 343.192 424.93 342.813 424.445 342.295 cv
423.19 340.951 421.854 338.313 420.365 337.135 cv
419.018 336.067 419.159 336.709 418.445 334.734 cv
417.634 332.493 415.09 330.504 416.285 326.814 cv
416.588 325.882 418.131 323.584 419.405 324.295 cv
cp
ef
419.646 324.534 mo
421.921 322.549 424.398 327.857 421.205 327.534 cv
420.007 327.413 419.701 326.058 419.646 324.534 cv
cp
ef
345.605 325.494 mo
345.733 326.303 344.854 326.104 344.766 326.694 cv
340.321 327.455 333.775 328.409 329.405 330.175 cv
324.105 332.315 318.455 334.921 313.445 337.734 cv
312.521 338.253 311.452 338.501 310.565 339.055 cv
310.069 339.363 309.729 339.931 309.245 340.255 cv
308.427 340.803 307.367 340.985 306.485 341.454 cv
303.109 343.25 299.934 345.668 296.646 347.694 cv
293.873 349.403 291.343 351.749 288.605 353.694 cv
287.678 354.354 286.598 354.707 285.726 355.374 cv
284.084 356.631 282.515 358.251 280.806 359.694 cv
279.875 360.48 278.818 361.446 277.925 362.335 cv
277.549 362.709 277.211 363.909 276.365 363.414 cv
275.517 362.918 277.008 361.271 277.205 361.015 cv
281.215 355.816 286.525 352.403 291.245 348.175 cv
297.909 343.398 304.794 338.844 311.885 334.494 cv
314.464 333.753 316.419 332.388 318.485 331.135 cv
325.855 328.478 333.678 325.047 342.846 324.774 cv
343.635 324.751 345.073 324.951 345.605 325.494 cv
cp
ef
292.565 330.295 mo
292.63 332.543 292.534 334.656 292.565 337.135 cv
289.408 337.157 286.827 337.165 283.565 337.135 cv
283.431 335.154 283.227 332.08 283.686 330.295 cv
286.621 330.281 290.007 330.313 292.565 330.295 cv
cp
ef
410.766 335.935 mo
411.363 337.776 412.495 339.084 414.365 339.654 cv
415.163 339.396 415.972 338.563 417.125 339.055 cv
417.976 340.548 416.43 341.18 416.405 342.175 cv
416.384 343.055 417.751 344.394 418.325 345.055 cv
420.604 347.675 424.235 354.016 421.085 357.895 cv
420.301 358.86 416.758 360.924 415.806 358.494 cv
415.342 357.313 415.888 355.604 417.365 355.494 cv
418.407 355.417 419.767 356.917 420.605 355.374 cv
417.801 351.778 415.106 348.073 411.485 345.295 cv
410.694 342.289 407.71 339.126 410.045 335.814 cv
410.364 336.121 li
410.766 335.935 li
cp
ef
412.925 333.534 mo
414.754 332.861 416.059 335.856 414.365 336.055 cv
413.166 336.195 413.083 334.711 412.925 333.534 cv
cp
ef
210.245 355.854 mo
210.386 352.904 205.643 352.568 206.765 357.055 cv
207.843 358.981 210.173 357.369 210.245 355.854 cv
cp
211.325 365.814 mo
209.205 365.573 206.264 367.806 206.045 365.215 cv
207.262 365.628 209.332 364.686 209.765 363.295 cv
210.3 361.578 209.162 359.124 207.125 359.935 cv
205.789 360.466 206.637 363.885 205.805 365.215 cv
201.646 367.086 203.484 361.052 203.405 358.734 cv
203.326 356.407 203.259 351.877 205.565 351.654 cv
207.673 351.451 211.053 352.431 212.405 353.454 cv
212.736 354.484 213.332 354.784 213.365 355.614 cv
213.426 357.124 211.621 357.926 211.565 358.975 cv
211.499 360.213 213.342 360.821 213.365 362.454 cv
213.387 363.963 212.558 364.87 211.325 365.814 cv
cp
ef
222.245 367.135 mo
222.315 367.426 223.137 366.845 223.325 367.255 cv
222.701 368.866 220.363 367.714 219.125 367.494 cv
218.88 367.06 218.772 366.487 218.405 366.175 cv
219.481 365.655 219.324 363.107 218.285 362.694 cv
219.481 362.41 219.264 360.713 219.605 359.574 cv
219.39 359.17 218.542 359.332 218.285 359.574 cv
218.157 360.134 218.599 360.521 218.285 360.895 cv
217.333 361.107 216.079 360.635 215.525 360.055 cv
216.213 357.914 218.983 357.977 220.925 358.854 cv
222.684 360.612 222.037 364.558 222.245 367.135 cv
cp
ef
239.525 358.975 mo
239.279 359.686 237.896 359.453 237.726 360.414 cv
237.293 362.842 242.047 362.72 242.405 364.975 cv
242.882 367.97 240.056 369.659 237.245 368.454 cv
237.719 367.99 239.356 367.713 239.405 366.534 cv
239.473 364.892 236.267 365.096 235.325 363.895 cv
233.455 361.507 236.747 358.073 239.525 358.975 cv
cp
ef
228.125 360.295 mo
228.313 362.919 232.566 363.053 232.925 365.574 cv
233.117 366.919 232.346 368.077 231.605 369.055 cv
231.105 368.956 230.604 369.218 230.405 369.055 cv
230.375 368.664 li
230.045 368.454 li
231.192 366.032 229.229 366.085 227.525 365.335 cv
225.31 364.358 224.735 360.762 227.525 359.935 cv
227.735 360.265 li
228.125 360.295 li
cp
ef
241.085 359.814 mo
241.919 360.405 242.409 362.702 240.965 362.694 cv
239.813 362.688 238.852 359.703 241.085 359.814 cv
cp
ef
232.445 360.534 mo
232.469 361.438 232.183 362.032 231.725 362.454 cv
229.697 362.486 230.991 358.98 232.445 360.534 cv
cp
ef
88.5654 362.935 mo
86.9644 363.259 85.272 364.408 84.6055 366.055 cv
84.9067 366.761 85.5791 367.938 84.9653 368.814 cv
83.5752 369.557 82.9814 367.858 81.9653 367.734 cv
80.2222 367.521 77.687 370.372 75.9653 371.095 cv
72.4688 372.561 67.8125 372.609 65.5254 370.374 cv
64.4219 369.298 63.6304 366.086 65.4053 365.335 cv
66.5952 364.831 68.5293 365.739 68.5254 367.135 cv
68.5225 368.156 66.9849 369.407 68.165 370.374 cv
71.0146 368.743 74.5142 366.645 77.4053 364.494 cv
78.1025 363.976 78.5864 362.953 79.3252 362.574 cv
79.9404 362.26 81.3618 361.941 82.3252 361.614 cv
84.6855 360.813 86.75 360.468 88.6851 362.095 cv
88.3853 362.48 li
88.5654 362.935 li
cp
ef
217.925 362.694 mo
217.306 363.709 217.516 365.161 216.965 366.414 cv
217.007 366.813 217.657 366.603 218.045 366.654 cv
217.737 368.041 216.417 367.777 215.045 367.614 cv
213.394 365.355 215.07 362.556 217.925 362.694 cv
cp
ef
90.8452 365.215 mo
91.7842 367.026 88.1079 368.24 88.2051 366.295 cv
88.2593 365.212 89.6909 365.433 90.8452 365.215 cv
cp
ef
227.045 367.975 mo
226.273 367.946 225.793 367.626 225.125 367.494 cv
224.542 365.705 227.059 364.656 227.646 366.295 cv
227.841 367.25 227.287 367.456 227.045 367.975 cv
cp
ef
236.885 366.055 mo
236.659 366.582 236.543 367.327 236.766 367.975 cv
233.953 368.41 233.915 364.704 236.885 366.055 cv
cp
ef
248.646 368.694 mo
247.363 368.607 246.729 368.536 246.485 367.854 cv
245.683 365.615 250.581 366.876 248.646 368.694 cv
cp
ef
97.6851 370.854 mo
96.7832 370.609 93.5269 372.836 93.3652 374.095 cv
93.2192 375.232 94.7734 376.372 93.4854 377.335 cv
91.4609 377.622 91.5571 376.092 90.1255 376.135 cv
88.3398 376.188 85.9009 378.723 83.5254 379.734 cv
82.1274 380.33 79.9917 380.883 78.3652 380.694 cv
76.3447 380.46 72.8984 378.607 72.9653 376.015 cv
72.9941 374.891 74.0405 373.827 74.8853 373.854 cv
78.4731 373.97 74.7695 377.949 76.3252 379.494 cv
76.897 379.387 76.8525 378.661 77.165 378.295 cv
78.8994 378.087 79.7051 376.43 81.0054 375.534 cv
82.644 374.406 84.6577 373.747 86.165 372.414 cv
86.7651 371.884 86.9404 371.059 87.7251 370.614 cv
91.188 370.254 95.1875 367.06 98.165 370.255 cv
97.6714 370.352 li
97.6851 370.854 li
cp
ef
98.2852 372.895 mo
102.275 372.961 95.7739 378.575 95.8853 374.454 cv
95.9136 373.416 96.7495 372.869 98.2852 372.895 cv
cp
ef
186.845 381.414 mo
187.617 381.886 187.964 383.278 187.325 384.175 cv
184.575 385.672 183.636 380.894 186.845 381.414 cv
cp
ef
231.365 416.215 mo
234.033 415.83 236.288 417.333 235.085 420.414 cv
234.51 421.89 231.933 424.282 230.285 424.374 cv
229.224 424.434 227.091 423.522 226.685 423.175 cv
225.869 422.475 225.757 421.068 225.845 420.414 cv
226.168 418.031 228.988 416.558 231.365 416.215 cv
cp
ef
252.965 419.814 mo
253.086 416.806 257.68 417.65 256.806 420.654 cv
255.831 421.964 253.219 421.302 252.965 419.814 cv
cp
ef
248.525 422.694 mo
250.533 422.565 252.824 422.554 252.605 424.975 cv
250.954 426.201 248.943 425.177 247.205 426.414 cv
246.802 426.702 246.756 427.271 246.365 427.614 cv
245.444 428.424 242.896 429.462 241.806 429.414 cv
239.944 429.334 237.57 426.919 237.846 424.854 cv
237.956 424.024 238.708 423.991 239.525 423.295 cv
239.867 423.003 240.124 422.295 240.365 422.095 cv
242.674 420.173 247.04 419.932 248.525 422.694 cv
cp
ef
222.365 426.295 mo
225.629 430.007 221.216 435.072 216.965 434.095 cv
213.407 433.275 214.6 426.995 217.685 426.055 cv
217.047 424.822 214.5 425.72 214.445 424.135 cv
214.372 422.01 219.141 423.396 221.165 423.295 cv
221.744 423.266 222.243 422.813 222.725 422.814 cv
225.353 422.82 225.158 426.556 222.365 426.295 cv
cp
ef
211.445 431.454 mo
211.57 432.929 211.426 433.847 210.605 434.574 cv
208.794 433.977 204.448 433.986 206.646 431.215 cv
208.287 430.921 210.536 430.253 211.445 431.454 cv
cp
ef
304.925 25.3745 mo
302.98 24.8789 300.986 24.4331 299.525 23.4546 cv
300.533 20.4341 302.676 14.0449 297.245 14.8145 cv
294.619 15.1865 293.852 19.3037 292.925 21.8945 cv
291.664 25.4214 290.304 29.8242 289.085 33.6543 cv
288.175 36.5166 285.371 42.8892 290.646 42.7744 cv
294.209 42.6968 293.878 37.7285 295.686 35.5742 cv
297.622 35.958 299.326 36.5737 300.965 37.2544 cv
299.752 41.9551 297.505 47.5537 292.445 48.2944 cv
288.728 48.8389 284.761 47.0771 282.965 44.9346 cv
281.702 43.4268 281.209 39.9365 281.646 37.3745 cv
282.306 33.4922 284.118 29.9746 285.605 25.3745 cv
287.051 20.9028 288.062 16.4434 289.806 13.6143 cv
291.078 11.5498 293.569 9.34229 296.646 9.29443 cv
299.734 9.24609 302.039 10.4595 304.565 12.1743 cv
307.689 15.1938 306.919 21.6025 304.925 25.3745 cv
cp
ef
348.005 50.2144 mo
345.28 53.6846 342.902 56.522 340.085 60.2944 cv
338.791 62.0273 336.713 64.0171 336.846 66.0547 cv
336.971 67.9854 338.728 69.4146 340.925 68.8145 cv
342.716 68.3257 344.517 65.6914 345.726 64.1343 cv
348.604 60.4292 351.237 57.416 354.125 53.5742 cv
355.287 52.0288 357.702 49.5493 357.485 47.3345 cv
357.322 45.666 355.787 44.3516 353.646 44.8145 cv
351.294 45.3228 349.448 48.377 348.005 50.2144 cv
cp
348.605 40.6143 mo
353.492 37.0835 360.307 39.9063 362.646 44.4546 cv
363.901 46.8979 363.354 50.0039 362.165 52.3745 cv
360.227 56.2417 356.965 59.0771 353.885 63.1743 cv
351.065 66.9258 348.455 71.3105 345.005 73.3745 cv
338.354 77.3535 329.777 71.1362 331.085 63.8945 cv
331.514 61.5215 333.386 59.2222 334.806 57.4146 cv
339.051 52.0073 344.118 45.4644 348.605 40.6143 cv
cp
ef
97.8052 58.0146 mo
100.01 60.73 102.347 63.3135 104.885 65.6943 cv
106.732 64.5811 107.956 62.8447 109.685 61.6143 cv
111.283 62.5771 112.444 63.9756 113.405 65.5742 cv
113.09 67.0117 109.114 68.2334 108.965 69.8945 cv
108.868 70.9785 112.049 73.7666 112.685 74.4546 cv
114.142 76.0303 115.485 77.5322 116.646 78.6543 cv
119.549 76.9185 121.495 74.2246 124.205 72.2944 cv
125.647 73.3721 126.876 74.6636 127.805 76.2544 cv
124.861 79.1675 122.392 81.3135 119.165 84.1743 cv
118.405 84.8486 117.044 86.6973 116.165 86.6943 cv
115.138 86.6914 113.574 84.2173 112.685 83.2144 cv
107.227 77.0576 101.894 71.374 96.3652 65.3345 cv
95.4155 64.2969 94.3945 63.0664 93.1255 61.7344 cv
92.2959 60.8643 89.9341 58.9219 89.8853 58.1343 cv
89.835 57.3281 91.7163 56.127 92.5254 55.3745 cv
95.356 52.7412 98.8364 49.7637 101.165 47.4546 cv
101.693 46.9307 104.759 50.5791 104.765 51.0547 cv
104.779 52.1519 102.272 53.6841 101.285 54.5347 cv
99.8916 55.7354 98.9199 56.6328 97.8052 58.0146 cv
cp
ef
231.365 43.6143 mo
231.003 40.8091 233.086 39.8203 233.646 38.3345 cv
232.077 38.4316 229.094 39.3691 227.405 38.3345 cv
230.118 36.4468 234.285 36.0142 236.766 33.8945 cv
234.257 33.7148 233.55 30.7539 230.405 31.9746 cv
232.501 29.3237 235.44 31.0068 238.806 30.8945 cv
242.563 30.769 244.676 28.834 247.686 27.4146 cv
250.016 26.3154 251.531 27.0874 253.925 27.6543 cv
257.444 28.4878 260.862 26.6104 263.766 28.3745 cv
266.409 29.9814 267.969 33.9751 266.165 37.2544 cv
272.146 37.2534 275.259 42.9746 275.285 48.6543 cv
275.295 50.8076 274.933 53.0049 273.965 54.5347 cv
273.339 55.5259 272.326 56.1113 271.806 57.0547 cv
271.428 57.7368 271.439 58.5396 271.085 59.3345 cv
269.685 62.4795 266.227 63.1978 264.485 65.4546 cv
264.07 65.9917 263.95 67.3296 263.525 67.4946 cv
263.113 64.4395 264.746 62.3975 265.925 60.5347 cv
261.434 61.5239 262.194 68.8032 256.806 69.2944 cv
258.405 66.7349 259.882 64.0508 260.885 60.8945 cv
258.47 62.7188 256.543 65.0322 252.726 65.4546 cv
252.677 64.7661 253.318 64.7676 253.205 64.0146 cv
253.045 64.0146 252.885 64.0146 252.726 64.0146 cv
252.785 63.5771 li
252.605 63.1743 li
256.558 62.4683 255.904 56.6948 258.125 53.9346 cv
259.369 52.3887 261.271 51.3438 261.605 48.7744 cv
261.937 46.2217 260.809 43.8721 261.726 41.9346 cv
262.591 40.1045 264.879 39.3545 265.686 37.7344 cv
260.828 40.0684 257.276 36.1577 253.205 35.9346 cv
251.31 35.8306 249.095 37.4902 247.445 36.2944 cv
250.552 35.4414 252.573 33.502 255.485 32.4546 cv
254.565 31.0405 251.003 29.8213 249.005 31.2544 cv
248.353 31.7227 247.982 32.7134 247.325 33.2944 cv
245.436 34.9653 242.255 37.0171 239.646 37.9746 cv
238.155 38.521 236.545 38.7148 235.325 39.6543 cv
233.82 40.814 233.328 42.5205 232.205 43.8545 cv
231.837 43.5547 li
231.365 43.6143 li
cp
ef
233.769 69.5879 mo
233.885 69.0547 li
234.697 69.4023 235.75 69.5098 236.646 69.7744 cv
236.585 70.1543 li
236.766 70.4946 li
236.766 70.6143 236.766 70.7344 236.766 70.8545 cv
236.321 70.7944 li
236.165 71.2144 li
235.303 70.917 234.433 70.627 233.766 70.1343 cv
233.769 69.5879 li
cp
ef
241.585 76.7544 mo
242.045 76.7344 li
241.976 77.2041 242.148 77.4312 242.285 77.6943 cv
247.47 76.7451 248.681 70.186 250.565 65.9346 cv
253.84 69.3403 255.698 74.1616 258.485 78.0547 cv
258.485 78.6543 li
258.965 79.0146 li
255.495 81.6123 251.216 86.9985 252.125 93.1743 cv
252.423 95.1992 253.55 95.9751 254.525 97.4946 cv
253.369 97.834 252.892 96.5 251.885 96.2944 cv
251.978 96.7466 251.739 96.8682 251.766 97.2544 cv
251.174 97.1943 li
250.925 97.7344 li
249.025 100.034 249.808 105.54 250.565 108.055 cv
248.298 107.913 246.795 108.122 244.205 107.935 cv
244.931 105.178 246.757 102.487 247.565 99.4146 cv
245.073 101.403 244.333 105.142 242.766 108.055 cv
236.464 107.808 231.288 107.956 226.565 107.814 cv
233.096 98.625 239.884 89.6929 244.205 78.2944 cv
243.497 77.981 242.91 78.7334 242.285 78.8945 cv
241.544 78.9995 241.47 77.9204 240.726 78.4146 cv
240.519 78.0879 li
240.245 77.8145 li
240.55 77.2788 240.905 76.7944 241.325 76.3745 cv
241.585 76.7544 li
cp
ef
269.75 74.7847 mo
269.885 74.2144 li
270.024 74.1948 270.099 74.2407 270.125 74.3345 cv
270.245 74.3345 270.365 74.3345 270.485 74.3345 cv
270.425 74.6943 li
270.485 75.0547 li
270.367 75.5342 270.367 75.7749 270.485 76.2544 cv
269.982 76.2407 li
269.885 76.7344 li
269.691 76.7681 269.679 76.6211 269.525 76.6143 cv
269.425 76.1143 li
268.925 76.0146 li
268.977 75.5854 269.245 75.374 269.165 74.8145 cv
269.75 74.7847 li
cp
ef
274.686 81.6143 mo
275.045 81.2944 li
275.43 81.6646 275.469 81.0127 275.885 81.0547 cv
275.982 81.5483 li
276.485 81.5347 li
276.453 81.9419 276.578 82.5073 276.365 82.7344 cv
275.717 82.8457 275.016 82.9043 274.445 83.0947 cv
274.336 82.5757 li
273.846 82.3745 li
273.996 82.0054 274.181 81.6699 274.325 81.2944 cv
274.686 81.6143 li
cp
ef
279.846 82.8545 mo
280.205 83.0947 li
280.205 83.2144 280.205 83.3345 280.205 83.4546 cv
279.72 83.7437 li
280.085 84.1743 li
279.438 84.6064 278.682 84.9312 278.285 85.6143 cv
278.045 85.2544 li
277.686 85.0146 li
277.674 83.5234 278.896 83.2661 279.605 82.4946 cv
279.846 82.8545 li
cp
ef
276.646 89.9946 mo
277.205 89.9346 li
277.078 90.3813 277.458 90.3218 277.565 90.5347 cv
277.237 90.8911 li
277.205 91.3745 li
274.993 91.9282 273.592 92.3633 271.085 91.7344 cv
272.955 91.0439 274.83 90.3589 276.485 89.4546 cv
276.646 89.9946 li
cp
ef
266.39 96.9229 mo
266.646 97.3745 li
265.802 97.645 266.638 98.083 266.766 98.6943 cv
267.389 101.685 265.214 105.731 264.965 108.055 cv
262.01 108.257 259.28 108 256.085 108.055 cv
258.32 105.968 261.138 103.428 262.085 99.6543 cv
262.005 99.6543 261.925 99.6543 261.846 99.6543 cv
261.905 99.1318 li
261.485 98.8145 li
262.229 97.1577 265.046 97.5752 266.285 96.4146 cv
266.39 96.9229 li
cp
ef
257.912 102.768 mo
258.245 103.134 li
257.217 104.025 255.274 104.003 254.285 104.935 cv
254.021 104.55 li
253.565 104.455 li
253.259 103.281 252.279 102.78 252.005 101.574 cv
252.525 101.415 li
252.846 100.975 li
253.78 102.065 255.69 102.734 257.766 102.294 cv
257.912 102.768 li
cp
ef
227.105 69.9033 mo
227.165 70.3745 li
226.41 70.3701 225.881 70.1387 225.125 70.1343 cv
225.185 69.6631 li
224.885 69.2944 li
225.424 68.9131 226.071 68.6406 226.685 68.3345 cv
226.768 68.7993 li
227.165 69.0547 li
227.028 69.4316 227.354 69.3462 227.405 69.5347 cv
227.105 69.9033 li
cp
ef
210.245 75.0547 mo
211.546 74.8354 212.245 74.0142 212.405 72.6543 cv
210.109 72.7031 208.979 70.5732 207.245 70.2544 cv
204.392 69.7295 202.39 72.9961 200.165 73.8545 cv
200.239 74.021 200.627 73.8726 200.646 74.0947 cv
200.339 74.4136 li
200.525 74.8145 li
200.314 75.1235 199.593 74.9219 199.685 75.5347 cv
199.125 75.4746 li
198.965 76.0146 li
198.588 75.957 198.496 76.1855 198.245 76.2544 cv
198.245 76.3745 198.245 76.4946 198.245 76.6143 cv
197.745 76.7144 li
197.646 77.2144 li
192.221 76.4561 191.047 81.957 189.005 85.3745 cv
188.646 85.0547 li
188.165 85.0146 li
188.008 84.9722 187.977 84.8032 187.805 84.7744 cv
185.631 87.7295 183.63 92.6104 184.325 97.2544 cv
184.345 97.1138 184.544 97.1533 184.685 97.1343 cv
184.664 97.6689 li
185.165 97.8545 li
185.181 98.0698 185.019 98.1074 185.045 98.3345 cv
187.894 97.7671 190.961 96.7749 193.565 95.5742 cv
195.563 94.6533 197.599 93.4248 198.845 91.8545 cv
194.821 92.5103 192.528 94.8975 188.165 95.2144 cv
187.792 94.9302 li
187.325 94.9746 li
187.672 93.1904 186.672 90.9487 187.325 89.2144 cv
187.865 89.1943 li
188.285 88.8545 li
188.814 90.7622 188.943 93.1406 190.925 93.2944 cv
192.303 93.4014 194.309 92.1519 195.365 91.1343 cv
196.178 90.3516 196.475 88.6328 197.765 88.9746 cv
197.806 89.8154 197.128 89.9375 197.165 90.7744 cv
198.896 91.3291 201.056 90.1323 202.325 89.0947 cv
203.129 88.4375 204.599 87.1172 203.885 86.0947 cv
203.805 86.0947 203.725 86.0947 203.646 86.0947 cv
203.626 85.439 li
204.125 85.0146 li
206.033 85.5532 205.736 82.8721 206.285 81.6543 cv
206.808 81.7144 li
207.125 81.2944 li
208.648 79.5771 211.14 78.8296 212.045 76.4946 cv
211.795 76.105 211.168 76.0918 210.485 76.1343 cv
210.305 75.6079 li
210.245 75.0547 li
cp
217.648 73.1196 mo
218.045 73.3745 li
213.693 84.062 209.682 95.0913 207.245 107.694 cv
198.093 107.603 191.282 107.762 183.005 107.455 cv
183.254 100.987 181.088 94.3965 182.765 88.1343 cv
183.733 84.519 186.248 80.8174 188.405 77.8145 cv
194.425 69.4365 205.875 61.106 219.725 61.6143 cv
220.972 61.6602 221.985 62.187 223.085 61.6143 cv
222.616 60.4829 221.532 59.3286 221.885 57.7744 cv
222.425 57.8345 li
222.965 57.7744 li
223.35 60.5898 225.472 61.668 227.885 62.4546 cv
227.688 62.7886 li
227.646 63.1743 li
227.365 63.1377 227.149 62.9395 226.925 63.1743 cv
226.925 63.2544 226.925 63.3345 226.925 63.4146 cv
226.585 63.4346 li
226.565 63.7744 li
226.426 63.7939 226.352 63.748 226.325 63.6543 cv
226.036 63.6055 226.064 63.8735 225.725 63.7744 cv
225.779 63.3345 li
225.365 63.1743 li
225.416 62.9238 225.283 62.8569 225.245 62.6943 cv
221.846 63.895 220.719 67.3677 219.125 70.3745 cv
216.979 71.9502 212.845 72.1719 212.285 74.9346 cv
214.105 74.2344 215.736 73.3457 217.565 72.6543 cv
217.648 73.1196 li
cp
ef
204.555 75.4561 mo
204.365 75.0547 li
205.373 74.7017 206.111 74.0801 207.005 73.6143 cv
207.231 73.8286 207.561 73.939 207.725 74.2144 cv
207.279 74.541 li
207.485 75.0547 li
207.108 75.3975 206.35 75.3594 206.165 75.8945 cv
206.32 76.4194 206.771 76.6489 207.125 76.9746 cv
207.065 77.5659 li
207.605 77.8145 li
207.589 78.0381 207.526 78.2153 207.365 78.2944 cv
206.924 77.9238 li
206.405 78.1743 li
205.948 77.1123 205.19 76.3496 204.245 75.7744 cv
204.555 75.4561 li
cp
ef
271.665 79.0347 mo
271.925 78.6543 li
272.295 79.2446 273.03 79.4692 273.485 79.9746 cv
273.381 80.3506 273.188 80.6372 272.885 80.8145 cv
272.476 80.624 271.933 80.5669 271.445 80.4546 cv
271.505 79.8843 li
271.085 79.4946 li
271.179 79.3877 271.214 79.2236 271.205 79.0146 cv
271.665 79.0347 li
cp
ef
265.146 78.5771 mo
265.565 78.8945 li
265.265 79.2739 264.745 79.4341 264.245 79.6143 cv
264.164 79.1523 li
263.885 78.7744 li
263.896 78.4263 263.38 78.0845 263.885 77.9346 cv
264.38 77.9194 264.637 78.1431 265.205 78.0547 cv
265.146 78.5771 li
cp
ef
199.325 85.4546 mo
199.805 85.4946 li
199.752 86.5073 200.334 86.8857 201.125 87.0547 cv
201.065 87.5771 li
201.485 87.8945 li
200.778 88.7754 199.432 87.8936 198.845 87.5347 cv
198.815 86.9492 li
198.245 86.8145 li
198.507 86.2764 198.687 85.6558 198.965 85.1343 cv
199.325 85.4546 li
cp
ef
196.449 83.0063 mo
195.965 82.9746 li
196.065 81.9644 194.734 81.397 195.725 80.5742 cv
196.403 81.0571 197.087 81.5322 197.525 82.2544 cv
197.411 82.7402 197.074 83.0034 196.805 83.3345 cv
196.449 83.0063 li
cp
ef
430.205 135.415 mo
432.093 140.207 433.877 145.103 435.365 150.294 cv
433.972 151.044 431.998 151.775 430.325 151.854 cv
429.008 149.012 428.428 145.432 426.965 142.734 cv
423.783 143.474 419.976 144.624 417.125 146.095 cv
417.5 148.2 418.543 150.276 418.925 151.975 cv
417.7 153.029 415.813 153.421 413.885 153.774 cv
412.816 152.124 412.555 149.665 411.605 147.895 cv
407.592 148.841 403.859 150.068 400.445 151.614 cv
401.088 155.052 402.706 157.514 403.325 160.975 cv
401.644 161.533 400.151 162.281 398.165 162.535 cv
396.483 157.576 394.52 152.9 393.245 147.535 cv
405.593 143.273 417.545 139.204 430.205 135.415 cv
cp
ef
56.6455 126.895 mo
55.9409 128.67 55.3184 130.528 54.3652 132.055 cv
52.1367 131.824 50.144 129.633 47.7651 130.134 cv
46.2339 130.457 45.0464 132.05 45.4854 134.095 cv
45.8296 135.697 48.6167 136.925 50.6455 137.814 cv
55.9561 140.143 60.9868 142.177 66.3652 144.294 cv
67.4722 144.73 68.7065 145.466 69.6055 145.495 cv
71.3975 145.551 73.1934 143.823 72.9653 141.895 cv
72.5967 138.779 68.0938 138.699 66.1255 136.854 cv
66.7222 135.051 67.3076 133.237 68.2852 131.814 cv
72.7822 133.442 77.7671 135.514 78.6055 140.455 cv
79.2573 144.298 77.0049 148.326 74.8853 149.935 cv
71.334 152.63 65.4795 150.523 61.9253 148.975 cv
59.6826 147.997 57.4165 147.07 54.8452 145.975 cv
48.6479 143.333 41.7251 141.593 39.8452 135.294 cv
39.7148 129.189 42.8428 124.291 48.8452 124.375 cv
51.8833 124.417 54.2461 125.881 56.6455 126.895 cv
cp
ef
389.766 265.494 mo
388.005 265.473 385.65 265.991 384.726 265.135 cv
385.091 263.49 387.364 263.314 388.925 262.734 cv
390.81 262.035 393.355 261.193 393.605 259.135 cv
394.14 254.724 393.737 249.769 393.726 245.215 cv
393.683 228.747 393.703 212.404 393.365 199.975 cv
395.479 200.088 398 199.246 399.726 199.854 cv
401.331 200.421 403.697 204.073 404.766 205.374 cv
406.553 207.552 408.32 209.19 409.565 211.015 cv
409.085 211.374 li
408.726 211.854 li
405.375 208.404 402.209 204.771 399.005 201.175 cv
397.671 201.187 396.387 200.923 395.165 201.414 cv
395.536 202.764 396.709 203.311 397.205 204.534 cv
397.859 224.536 397.437 241.081 397.325 261.534 cv
395.298 262.829 391.441 262.928 390.005 264.414 cv
389.705 264.914 li
389.766 265.494 li
cp
.00332647 .990387 .971069 .000885023 cmyk
ef
430.367 234.373 mo
430.565 233.814 li
431.275 234.384 431.869 235.07 432.485 235.734 cv
432.005 236.095 li
431.646 236.574 li
430.75 236.229 430.257 235.483 429.846 234.654 cv
430.367 234.373 li
cp
ef
443.525 248.454 mo
443.885 247.975 li
445.025 248.595 445.576 249.804 446.766 250.374 cv
447.578 238.224 447.508 224.813 446.885 211.734 cv
446.783 209.59 446.827 206.958 445.806 205.854 cv
444.813 204.783 442.62 204.309 441.005 203.694 cv
439.447 203.103 437.094 203.146 436.686 201.175 cv
438.711 200.208 441.449 200.588 443.646 200.574 cv
448.649 200.544 452.271 200.828 457.565 200.694 cv
459.072 200.656 463.882 199.999 464.285 201.175 cv
464.652 202.245 461.016 203.474 459.965 203.935 cv
458.342 204.646 455.955 205.415 455.405 206.694 cv
454.874 207.929 455.082 211.387 455.045 213.295 cv
454.797 226.332 454.806 239.642 454.806 252.414 cv
454.805 257.761 455.512 262.101 454.806 266.694 cv
454.606 266.896 454.101 266.79 453.726 266.814 cv
453.785 266.234 li
453.485 265.734 li
454.329 263.38 453.527 256.5 453.485 253.614 cv
453.313 241.729 453.55 227.715 453.605 214.975 cv
453.618 211.943 452.993 207.2 454.325 205.494 cv
455.529 203.953 458.272 203.91 459.485 202.135 cv
454.073 201.767 448.828 201.874 443.646 202.255 cv
444.541 203.813 449.589 203.155 450.846 204.774 cv
451.731 205.917 451.098 211.835 451.085 213.654 cv
450.979 229.294 451.103 240.477 451.085 255.055 cv
451.084 256.015 451.058 256.642 451.085 257.335 cv
451.103 257.769 451.41 258.81 450.605 259.255 cv
449.198 257.929 449.293 255.803 448.325 254.335 cv
446.896 252.166 444.473 250.885 443.045 248.814 cv
443.525 248.454 li
cp
ef
449.766 266.215 mo
449.766 266.814 li
448.004 266.832 447.122 264.806 445.926 263.335 cv
443.218 260.006 440.041 256.625 437.285 253.614 cv
425.606 240.857 413.764 228.035 401.766 215.935 cv
401.265 216.725 401.285 218.273 401.285 219.295 cv
401.285 230.917 401.452 240.551 401.405 252.895 cv
400.925 252.534 li
400.325 252.534 li
399.283 240.025 400.46 226.04 399.965 213.414 cv
399.866 210.884 397.437 208.387 398.165 205.854 cv
399.653 206.523 400.826 207.896 401.885 209.095 cv
416.803 225.968 432.654 242.063 448.085 258.895 cv
449 259.892 451.224 261.56 451.205 262.614 cv
451.186 263.733 449.694 264.203 449.646 265.494 cv
449.719 265.661 450.107 265.513 450.125 265.734 cv
449.766 266.215 li
cp
ef
407.176 263.184 mo
407.165 262.614 li
408.216 263.326 411.731 263.647 411.726 264.774 cv
411.718 266.09 409.192 265.264 407.766 265.494 cv
407.825 264.914 li
407.525 264.414 li
407.525 264.334 407.525 264.255 407.525 264.175 cv
407.43 263.909 406.961 264.019 406.925 263.694 cv
407.176 263.184 li
cp
ef
113.646 204.175 mo
124.916 199.444 138.659 202.813 146.285 209.814 cv
153.681 216.604 158.325 229.949 153.965 242.335 cv
150.907 251.021 143.315 257.142 134.045 259.854 cv
134.045 259.255 li
133.685 258.774 li
142.74 255.187 149.038 247.779 150.605 237.295 cv
151.061 234.246 151.144 230.31 150.485 227.095 cv
147.761 213.798 137.879 203.252 121.925 203.814 cv
118.979 203.918 116.689 204.662 114.005 205.255 cv
114.005 204.654 li
113.646 204.175 li
cp
ef
356.165 200.335 mo
360.782 200.461 364.993 199.972 369.125 199.854 cv
369.456 202.932 369.283 208.67 369.245 212.335 cv
369.231 213.658 369.58 215.965 368.525 216.055 cv
367.684 216.126 366.942 214.218 366.726 213.654 cv
365.713 211.022 364.878 207.521 362.165 206.694 cv
359.759 205.961 355.813 206.454 352.925 206.454 cv
349.846 206.454 346.719 206.591 344.285 206.694 cv
343.566 212.927 343.686 221.829 344.045 228.895 cv
345.224 229.236 347.191 228.788 348.365 229.135 cv
348.005 229.614 li
348.005 230.215 li
346.291 230.11 344.127 230.72 342.485 229.975 cv
342.206 223.811 342.349 216.611 342.365 210.055 cv
342.369 208.488 342.357 206.53 343.085 205.255 cv
348.758 204.468 356.567 206.043 362.405 205.135 cv
363.654 204.94 364.56 204.233 365.646 203.814 cv
366.564 205.175 366.64 207.38 367.686 208.614 cv
367.891 206.528 367.878 203.622 367.686 201.534 cv
363.985 201.479 359.975 201.707 355.806 201.414 cv
356.165 200.935 li
356.165 200.335 li
cp
ef
356.585 229.647 mo
356.285 229.135 li
357.668 229.023 359.362 229.137 360.485 228.295 cv
361.273 227.446 362 226.739 362.766 225.534 cv
363.206 224.84 363.862 222.543 364.925 222.774 cv
365.704 222.944 365.664 225.541 365.646 226.494 cv
365.563 230.57 365.553 234.632 365.525 238.734 cv
365.511 240.886 365.737 243.222 364.925 244.494 cv
362.936 244.044 363.219 241.321 362.165 239.935 cv
361.163 237.576 360.263 235.117 356.885 235.135 cv
356.885 234.534 li
356.525 234.055 li
358.596 233.925 360.409 233.531 362.405 232.854 cv
363.394 234.106 363.078 236.662 363.965 238.015 cv
364.055 234.999 364.558 232.063 363.846 229.015 cv
362.977 229.714 363.459 231.531 362.405 231.774 cv
361.688 231.94 361.321 231.141 360.605 230.814 cv
359.332 230.234 357.788 230.489 356.405 230.215 cv
356.585 229.647 li
cp
ef
345.125 234.534 mo
345.125 235.135 li
344.688 235.098 344.345 235.153 344.045 235.255 cv
343.308 236.625 343.665 238.619 343.565 240.774 cv
342.965 240.774 li
342.485 241.135 li
342.493 238.064 340.945 232.359 345.485 234.055 cv
345.125 234.534 li
cp
ef
363.726 259.854 mo
363.365 259.374 li
366.372 258.962 367.374 256.202 368.525 253.734 cv
369.192 252.306 369.761 250.378 371.165 249.774 cv
372.278 253.35 371.13 257.914 371.045 261.774 cv
370.565 261.414 li
369.965 261.414 li
369.802 259.867 370.158 257.865 370.085 256.015 cv
368.699 257.508 369.054 260.743 367.565 262.135 cv
366.5 261.368 365.203 260.438 363.726 260.454 cv
363.726 259.854 li
cp
ef
331.085 264.534 mo
331.085 265.135 li
329.759 264.91 325.967 265.872 325.445 264.654 cv
325.163 263.996 326.681 263.431 327.245 263.215 cv
329.195 262.469 333.535 261.469 334.445 259.854 cv
335.118 258.662 334.989 255.805 335.045 253.614 cv
335.351 241.637 335.092 225.58 335.045 213.175 cv
335.037 211.033 335.089 207.138 334.085 205.975 cv
333.307 205.071 331.288 204.334 329.525 203.574 cv
328.155 202.984 324.924 202.34 325.205 200.935 cv
325.456 199.682 330.889 200.279 332.405 200.335 cv
336.253 200.475 338.316 200.097 341.045 200.454 cv
341.105 200.994 li
341.165 201.534 li
338.152 201.882 334.188 201.442 330.846 201.774 cv
333.161 203.379 337.025 203.435 339.485 204.895 cv
339.986 221.633 339.009 239.09 339.605 257.335 cv
339.644 258.512 339.224 259.733 339.245 260.935 cv
336.832 262.241 333.393 262.521 331.085 263.935 cv
331.256 263.924 331.425 263.915 331.445 264.055 cv
331.085 264.534 li
cp
ef
328.565 311.215 mo
328.401 311.642 328.602 312.016 328.686 312.654 cv
332.069 314.191 329.578 308.58 328.565 311.215 cv
cp
326.405 312.895 mo
327.102 312.875 327.631 311.822 327.245 310.854 cv
325.471 309.369 324.694 312.941 326.405 312.895 cv
cp
311.405 310.734 mo
312.009 310.578 312.191 310.001 312.485 309.534 cv
311.921 309.73 311.618 310.188 311.405 310.734 cv
cp
323.165 310.494 mo
323.552 310.56 324.183 309.942 324.605 309.654 cv
324.079 309.128 323.229 309.818 323.165 310.494 cv
cp
309.965 308.454 mo
310.368 308.191 311.327 307.291 310.925 307.015 cv
310.759 307.647 310.075 307.765 309.965 308.454 cv
cp
323.045 302.454 mo
323.137 304.297 323.454 306.513 323.405 309.055 cv
323.93 309.059 324.341 308.95 324.726 308.814 cv
324.781 306.559 324.703 304.437 324.365 302.574 cv
324.02 302.457 323.412 302.176 323.045 302.454 cv
cp
323.646 301.975 mo
323.806 301.975 323.965 301.975 324.125 301.975 cv
324.159 301.661 324.081 301.458 323.766 301.494 cv
323.728 301.656 323.595 301.724 323.646 301.975 cv
cp
299.646 302.694 mo
303.001 301.961 306.825 301.115 310.085 300.414 cv
314.341 299.499 317.922 301.7 321.846 302.454 cv
322.652 302.142 323.188 301.558 323.646 300.895 cv
326.019 300.74 329.124 300.919 331.445 300.895 cv
331.853 305.217 331.713 309.531 331.445 313.614 cv
328.892 313.881 326.336 313.5 323.885 313.734 cv
323.945 313.362 li
323.646 313.135 li
323.623 313.032 323.692 313.021 323.766 313.015 cv
323.799 312.82 323.651 312.808 323.646 312.654 cv
323.925 312.494 li
323.885 312.175 li
323.863 312.072 323.932 312.062 324.005 312.055 cv
323.948 311.512 323.396 310.96 323.045 311.095 cv
322.745 310.723 li
322.445 311.095 li
322.287 311.052 322.257 310.883 322.085 310.854 cv
322.082 310.971 321.938 310.947 321.846 310.975 cv
321.306 310.755 li
321.365 311.335 li
319.449 312.294 316.675 311.937 314.646 311.694 cv
314.736 312.164 315.577 311.883 315.846 312.175 cv
315.077 314.2 310.46 314.745 310.686 311.814 cv
309.93 311.57 309.342 311.158 309.005 310.494 cv
309.085 310.015 309.303 309.672 309.485 309.295 cv
306.333 309.049 308.427 305.402 309.965 304.494 cv
306.882 304.215 303.59 304.646 300.245 304.975 cv
300.306 304.503 li
300.005 304.135 li
300.437 303.688 300.343 303.594 299.646 303.774 cv
299.665 303.234 li
299.646 302.694 li
cp
0 0 0 1 cmyk
ef
139.205 309.774 mo
135.524 308.882 139.587 313.929 139.205 309.774 cv
139.205 309.774 li
cp
141.365 311.574 mo
143.333 311.903 142.261 308.02 140.646 309.895 cv
140.59 310.932 140.71 311.465 141.365 311.574 cv
cp
155.885 308.935 mo
155.833 308.588 155.632 308.388 155.285 308.335 cv
155.338 308.682 155.538 308.882 155.885 308.935 cv
cp
144.725 309.414 mo
144.921 308.823 144.273 308.133 143.525 308.095 cv
143.596 308.864 144.505 308.794 144.725 309.414 cv
cp
143.285 307.494 mo
143.696 307.604 144.029 307.791 144.485 307.854 cv
144.625 305.783 144.709 303.055 144.845 301.374 cv
142.386 300.928 143.342 305.536 143.285 307.494 cv
cp
144.725 300.654 mo
145.419 300.681 145.626 301.194 146.165 301.374 cv
149.313 300.929 152.385 299.158 155.765 299.335 cv
159.858 299.548 163.841 301.368 167.525 302.095 cv
167.185 302.515 li
167.525 302.935 li
167.435 303.385 167.984 303.196 168.005 303.534 cv
167.798 303.992 li
168.125 304.374 li
167.03 304.912 166.108 304.071 164.885 303.895 cv
161.653 303.427 158.142 304.208 156.725 302.215 cv
157.704 303.959 161.871 306.34 159.125 308.454 cv
157.866 307.913 157.701 306.279 156.485 305.694 cv
156.552 306.649 158.926 308.013 158.885 309.414 cv
158.837 311.076 156.839 310.878 156.365 309.534 cv
156.348 310.229 157.352 310.565 157.325 311.454 cv
157.245 314.135 152.81 312.98 151.925 311.335 cv
152.179 310.763 152.507 310.95 153.125 310.854 cv
151.169 310.589 148.594 311.645 146.885 310.255 cv
146.788 310.277 146.766 310.375 146.646 310.374 cv
146.417 310.074 li
146.045 310.135 li
145.982 310.038 145.92 309.939 145.925 309.774 cv
145.674 309.724 145.607 309.856 145.445 309.895 cv
145.146 309.595 li
144.845 309.895 li
144.765 309.895 144.685 309.895 144.605 309.895 cv
144.571 310.323 143.729 310.37 144.125 310.854 cv
143.885 311.215 li
144.245 311.454 li
144.021 311.683 144.232 311.756 144.245 312.055 cv
143.832 312.215 li
143.885 312.654 li
141.784 312.052 138.464 313.114 136.445 312.055 cv
136.491 307.636 136.195 303.953 136.565 299.694 cv
138.699 299.481 140.713 299.982 143.405 299.814 cv
143.345 300.259 li
143.765 300.414 li
143.744 300.676 143.863 300.796 144.125 300.774 cv
144.462 300.897 li
144.725 300.654 li
cp
ef
198.245 284.694 mo
201.623 284.721 204.026 284.651 207.005 284.935 cv
207.383 294.006 207.097 303.808 207.245 313.494 cv
207.332 319.152 207.665 325.064 207.245 330.414 cv
207.011 333.396 205.138 335.828 202.565 336.534 cv
200.025 337.232 193.06 337.063 190.565 335.935 cv
184.62 333.245 187.235 322.791 186.845 314.814 cv
189.548 314.938 192.245 314.693 194.885 314.935 cv
195.138 317.136 195.005 319.821 195.005 322.854 cv
195.005 324.798 194.36 329.468 196.205 329.814 cv
198.735 330.29 198.093 326.021 198.125 323.814 cv
198.315 311.013 197.932 297.651 198.005 285.055 cv
198 284.85 198.095 284.744 198.245 284.694 cv
cp
ef
236.525 405.654 mo
235.489 407.053 235.354 410.671 236.045 412.374 cv
238.841 412.394 242.612 412.851 245.405 411.774 cv
245.656 409.83 245.439 407.286 244.686 405.534 cv
242.323 404.884 238.811 405.449 236.525 405.654 cv
cp
226.085 404.935 mo
225.798 406.718 224.233 410.043 225.725 411.414 cv
226.641 412.256 229.015 411.944 230.646 412.135 cv
232.013 412.294 233.244 412.784 233.885 411.774 cv
233.519 409.804 234.148 407.438 233.525 405.534 cv
231.159 405.01 228.491 404.435 226.085 404.935 cv
cp
252.605 405.175 mo
250.977 404.896 248.286 404.28 247.325 405.774 cv
247.896 406.958 247.301 409.719 247.806 411.654 cv
253.456 412.387 259.284 412.123 263.525 410.215 cv
263.294 407.926 263.807 404.893 262.325 403.854 cv
258.938 403.94 255.786 404.838 252.605 405.175 cv
cp
206.646 409.614 mo
211.326 410.569 217.849 411.481 222.725 411.055 cv
223.354 409.286 223.431 406.839 223.205 404.814 cv
219.005 403.622 213.129 403.793 208.205 403.015 cv
206.67 404.108 206.674 407.788 206.646 409.614 cv
cp
266.525 403.494 mo
266.546 405.695 266.771 408.388 268.085 409.975 cv
270.1 409.125 274.912 409.207 276.005 407.694 cv
276.913 406.438 275.374 402.919 274.925 401.454 cv
272.157 401.741 268.716 402.043 266.525 403.494 cv
cp
191.765 400.734 mo
190.741 402.511 190.286 404.855 189.725 407.095 cv
193.785 408.842 199.228 409.031 203.885 409.374 cv
204.843 407.688 205.183 405.124 204.965 402.895 cv
200.819 401.761 195.816 401.324 191.765 400.734 cv
cp
227.045 395.215 mo
226.574 397.027 225.478 400.319 226.805 402.175 cv
229.016 402.364 231.111 402.669 233.405 402.774 cv
234.124 400.97 234.371 396.963 233.285 395.454 cv
231.264 395.793 229.177 394.777 227.045 395.215 cv
cp
253.925 395.215 mo
253.38 395.231 252.791 395.082 252.245 395.095 cv
248.435 395.181 244.454 395.967 240.846 395.814 cv
239.191 395.744 237.738 395.306 236.285 396.295 cv
236.267 398.046 235.194 401.304 236.405 402.534 cv
237.621 403.77 243.211 402.82 244.565 402.295 cv
245.17 400.939 243.84 396.192 245.766 396.055 cv
247.753 395.912 246.57 399.726 247.085 401.454 cv
247.191 401.81 248.053 402.177 248.165 402.534 cv
252.863 402.032 258.588 402.558 262.205 400.975 cv
262.587 398.985 262.133 396.098 261.365 394.494 cv
258.767 394.085 256.57 395.135 253.925 395.215 cv
cp
209.285 395.335 mo
208.356 396.212 208.078 398.359 208.445 400.135 cv
212.701 401.322 218.557 401.68 223.085 401.454 cv
223.636 399.774 224.102 397.108 223.565 395.095 cv
219.482 393.219 213.331 394.698 209.285 395.335 cv
cp
172.925 396.055 mo
170.24 395.173 167.148 393.037 164.885 392.814 cv
163.707 392.698 163.135 394.804 162.845 395.574 cv
162.623 396.166 161.681 397.626 161.885 398.694 cv
162.021 399.4 164.263 400.647 165.605 401.095 cv
167.215 401.63 168.311 402.18 169.445 402.534 cv
173.14 403.688 177.655 404.557 181.325 405.654 cv
182.244 405.93 182.947 406.513 183.725 406.614 cv
186.315 406.952 185.933 405.755 186.365 403.975 cv
186.658 402.771 187.603 401.484 187.325 400.494 cv
187.076 399.605 185.905 399.763 185.045 399.534 cv
183.487 399.12 180.869 397.908 179.045 398.215 cv
176.968 397.184 175.003 396.737 172.925 396.055 cv
cp
277.565 400.614 mo
277.281 401.957 277.409 404.274 278.045 405.654 cv
279.164 408.082 281.141 406.792 283.806 406.255 cv
284.603 406.094 285.221 406.252 285.965 406.135 cv
287.414 405.905 288.943 404.964 290.525 404.574 cv
291.669 404.293 292.858 404.318 293.766 404.095 cv
295.754 403.603 297.809 402.092 299.766 401.454 cv
303.045 400.386 306.683 400.295 308.646 398.215 cv
308.191 395.828 307.395 393.786 306.005 392.335 cv
296.496 395.065 287.639 398.447 277.565 400.614 cv
cp
272.285 391.854 mo
270.501 392.67 266.689 392.498 265.205 394.015 cv
265.357 396.463 265.359 399.061 266.525 400.494 cv
268.834 400.163 272.051 399.7 273.846 398.454 cv
273.528 396.051 273.935 392.926 272.285 391.854 cv
cp
205.205 392.935 mo
204.761 392.645 203.811 392.801 203.045 392.694 cv
200.534 392.345 195.974 391.439 193.925 391.374 cv
192.915 393.007 192.201 395.565 192.245 397.854 cv
195.297 399.083 199.229 399.431 203.045 399.895 cv
203.469 399.718 203.041 398.69 203.646 398.694 cv
204.692 398.434 204.656 399.809 205.325 399.534 cv
205.479 397.996 206.917 394.051 205.205 392.935 cv
cp
308.885 391.135 mo
308.233 392.453 310.375 397.08 311.165 397.135 cv
311.709 397.172 312.71 395.961 312.965 395.454 cv
313.733 393.929 314.336 391.221 313.806 389.335 cv
312.816 389.124 309.198 390.501 308.885 391.135 cv
cp
159.965 390.414 mo
158.027 389.432 154.689 389.271 152.646 388.374 cv
152.034 388.106 151.111 387.214 150.605 387.654 cv
149.159 388.913 148.165 391.567 148.085 393.895 cv
151.685 395.295 154.092 397.888 158.885 398.095 cv
160.509 396.838 160.796 394.245 161.646 392.215 cv
161.183 391.517 160.239 391.301 159.965 390.414 cv
cp
143.525 395.454 mo
143.427 394.751 142.396 394.381 141.365 393.895 cv
140.343 393.412 139.797 392.729 139.205 392.335 cv
138.192 391.66 135.989 390.73 134.525 389.935 cv
133.003 389.106 131.346 387.467 129.965 387.414 cv
128.689 387.366 128.316 389.763 128.045 390.534 cv
131.243 392.617 134.717 394.422 138.245 396.175 cv
139.208 397.292 140.173 398.406 141.845 398.814 cv
142.18 398.139 143.694 396.669 143.525 395.454 cv
cp
323.525 393.414 mo
324.073 393.114 325.373 392.188 325.445 391.614 cv
325.531 390.928 324.623 389.065 324.365 388.494 cv
324.163 388.047 323.283 386.463 322.686 386.215 cv
320.786 385.424 317.277 388.39 316.085 388.614 cv
317.648 389.942 316.074 393.554 316.686 395.454 cv
319.199 395.143 321.606 394.466 323.525 393.414 cv
cp
187.445 390.295 mo
180.637 388.609 174.332 385.867 167.885 383.694 cv
167.836 383.49 167.73 383.72 167.525 383.694 cv
167.304 384.41 166.464 384.838 166.085 385.734 cv
165.51 387.096 164.833 389.365 165.245 390.175 cv
165.811 391.284 169.116 391.6 170.646 392.215 cv
174.104 393.604 177.726 395.696 181.925 395.935 cv
183.59 396.692 186.202 397.57 188.285 397.135 cv
189.002 395.322 189.541 392.723 189.605 390.654 cv
189.034 390.16 188.414 390.192 187.445 390.295 cv
cp
300.125 385.015 mo
300.149 386.637 301.502 387.549 301.085 389.215 cv
298.477 390.214 299.72 384.895 296.405 386.215 cv
294.853 387.355 297.429 390.906 295.806 391.135 cv
294.604 391.304 294.483 388.601 293.646 388.015 cv
291.053 387.192 288.828 387.313 286.565 388.135 cv
282.703 389.537 278.6 390.067 275.045 391.374 cv
274.682 393.96 275.812 396.031 276.605 397.854 cv
279.414 397.681 283.843 396.928 286.445 396.055 cv
287.774 395.608 289.177 395.161 290.766 394.734 cv
294.473 393.737 298.512 392.092 301.445 391.255 cv
302.372 390.99 304.329 390.299 304.686 389.935 cv
305.956 388.638 303.313 384.699 303.245 383.454 cv
301.7 382.6 300.7 383.892 300.125 385.015 cv
cp
263.766 384.895 mo
263.838 387.338 263.93 389.05 264.965 390.774 cv
267.595 390.954 270.491 390.388 271.925 388.975 cv
271.006 386.657 272.056 383.904 271.925 382.374 cv
269.436 382.967 265.23 382.878 263.766 384.895 cv
cp
246.846 386.095 mo
241.485 386.322 235.549 385.802 230.885 385.854 cv
228.199 385.885 225.09 385.025 222.365 385.015 cv
222.087 385.014 221.581 385.289 221.285 385.255 cv
220.909 385.21 220.725 384.849 220.325 384.774 cv
217.47 384.241 214.422 384.562 211.445 384.175 cv
206.083 383.478 200.262 382.413 195.725 382.374 cv
194.993 384.166 194.32 386.645 194.285 388.734 cv
197.211 389.28 199.865 389.967 203.045 390.414 cv
203.751 390.514 204.87 390.631 205.445 390.534 cv
206.255 390.398 206.91 389.62 207.725 389.574 cv
208.337 389.54 209.021 389.889 209.646 389.935 cv
212.713 390.158 215.811 389.1 218.765 388.734 cv
220.908 388.47 223.283 388.784 225.485 388.614 cv
227.731 388.441 229.955 388.132 231.725 387.895 cv
232.889 387.738 234.547 386.888 235.445 387.055 cv
237.873 387.506 235.951 392.158 236.885 393.414 cv
244.156 392.979 252.848 393.387 260.045 391.854 cv
261.643 390.167 260.703 386.752 259.686 384.895 cv
255.34 385.402 251.141 385.912 246.846 386.095 cv
cp
313.205 386.095 mo
313.59 384.36 311.914 382.646 311.766 380.935 cv
309.52 379.483 306.206 381.385 304.806 382.975 cv
306.151 384.628 305.837 387.942 308.285 388.494 cv
308.759 388.488 308.675 387.924 309.005 387.774 cv
310.357 387.986 312.905 387.447 313.205 386.095 cv
cp
141.245 382.975 mo
139.271 381.901 137.02 379.001 134.405 378.774 cv
133.681 378.712 131.108 383.822 131.285 384.654 cv
131.635 386.296 135.518 387.442 137.525 388.614 cv
140.093 390.113 142.02 392.141 144.845 392.215 cv
145.722 391.832 145.456 391.234 146.045 389.935 cv
146.795 388.279 149.207 385.878 145.925 385.494 cv
144.869 384.155 142.751 383.794 141.245 382.975 cv
cp
159.725 380.935 mo
159.098 379.928 157.221 379.864 156.245 379.374 cv
155.71 379.105 155.617 378.689 155.045 378.654 cv
152.734 378.514 152.377 382.824 151.685 385.015 cv
152.093 385.793 153.423 386.063 154.325 385.975 cv
157.136 386.884 159.123 388.616 162.485 388.975 cv
163.766 387.495 164.333 385.302 165.005 383.215 cv
163.796 381.903 161.671 381.508 159.725 380.935 cv
cp
181.925 377.935 mo
181.198 379.087 180.282 380.052 180.005 381.654 cv
179.134 382.744 177.579 383.148 177.125 384.654 cv
179.504 385.815 184.59 387.599 187.925 388.135 cv
188.523 388.23 189.961 388.496 190.445 388.255 cv
191.756 387.601 191.321 383.325 192.005 381.774 cv
189.246 379.895 185.419 379.081 181.925 377.935 cv
cp
312.485 380.454 mo
314.034 380.979 315.192 385.067 316.565 385.374 cv
317.919 385.678 320.882 383.994 321.005 383.095 cv
321.212 381.586 318.429 378.532 317.885 377.454 cv
315.92 378.29 312.757 377.926 312.485 380.454 cv
cp
148.205 375.774 mo
147.41 375.856 147.077 376.338 146.525 376.494 cv
144.616 377.036 141.804 376.527 140.405 376.015 cv
139.081 375.528 138.33 374.21 136.925 373.614 cv
136.297 373.349 135.819 375.068 135.845 375.414 cv
135.977 377.132 139.141 378.196 140.405 379.015 cv
143 380.692 145.571 383.045 148.805 383.694 cv
150.144 382.026 151.291 379.549 151.445 377.095 cv
150.473 376.499 149.658 375.625 148.205 375.774 cv
cp
298.085 374.454 mo
297.271 374.838 296.615 374.819 296.045 375.295 cv
295.577 375.686 295.383 376.354 294.846 376.734 cv
294.172 377.211 292.809 377.286 292.325 377.935 cv
291.848 378.574 292.261 379.548 291.605 379.975 cv
290.173 379.527 289.021 378.798 287.525 378.414 cv
286.649 378.979 285.151 378.92 284.285 379.494 cv
284.214 382.099 284.328 384.661 283.445 386.814 cv
286.411 387.345 288.65 385.165 291.005 384.295 cv
291.42 383.334 290.969 381.704 292.325 381.534 cv
292.979 381.452 293.746 382.091 294.365 382.015 cv
295.197 381.912 295.739 380.892 296.766 380.694 cv
298.401 380.379 300.115 381.939 301.565 380.814 cv
302.097 379.671 301.229 379.438 300.965 378.295 cv
300.627 376.83 301.115 374.896 300.605 373.614 cv
299.368 373.128 298.84 374.1 298.085 374.454 cv
cp
166.805 373.614 mo
165.613 373.688 164.679 374.815 163.325 375.055 cv
160.116 375.62 158.2 374.335 156.365 373.374 cv
155.603 373.853 155.352 374.841 155.285 376.015 cv
156.493 376.903 158.133 377.967 159.845 378.414 cv
161.98 378.973 164.033 379.859 166.085 380.095 cv
166.679 378.821 166.874 377.55 167.525 376.494 cv
168.085 375.587 169.268 375.239 169.445 374.095 cv
168.632 374.312 167.843 373.551 166.805 373.614 cv
cp
218.765 375.774 mo
214.303 374.886 208.669 374.171 204.605 374.095 cv
202.613 373.432 199.621 372.881 197.646 373.255 cv
197.141 375.199 196.068 377.122 196.565 379.374 cv
203.291 381.124 211.766 382.371 219.245 382.255 cv
219.426 382.434 219.427 382.792 219.845 382.734 cv
222.278 383.02 225.899 382.951 228.845 383.215 cv
235.205 383.783 241.49 383.812 247.806 382.975 cv
248.565 382.874 249.063 383.179 249.846 383.215 cv
253.048 383.359 256.432 382.308 259.445 382.015 cv
259.309 380.18 259.978 376.886 258.726 375.654 cv
257.762 374.707 255.993 375.509 254.405 375.774 cv
251.696 376.228 250.311 376.725 247.445 376.734 cv
243.217 376.749 238.129 376.72 234.365 376.975 cv
233.773 380.388 232.171 379.901 228.365 379.734 cv
226.056 379.633 224.049 379.905 223.325 378.895 cv
222.949 378.03 222.918 376.822 222.605 375.895 cv
221.639 375.057 219.569 375.298 218.765 375.774 cv
cp
127.085 385.854 mo
126.872 384.926 124.167 383.909 123.245 383.335 cv
117.854 379.974 112.042 375.158 106.805 372.055 cv
106.397 373.286 105.419 373.948 105.005 375.175 cv
111.847 379.733 118.435 384.545 125.285 389.095 cv
125.917 388.37 127.369 387.092 127.085 385.854 cv
cp
326.885 388.135 mo
327.294 388.813 327.6 390.127 328.325 390.295 cv
329.632 390.596 332.757 388.484 333.965 387.654 cv
334.917 387.001 335.854 386.694 336.726 386.215 cv
339.73 384.558 342.939 381.962 345.605 380.454 cv
346.905 379.719 347.732 379.044 349.085 378.295 cv
350.162 377.697 351.356 377.426 351.846 376.854 cv
352.814 375.721 351.737 373.666 351.125 372.654 cv
350.734 372.008 349.483 370.27 348.965 370.135 cv
347.277 369.694 346.111 371.563 345.245 372.175 cv
342.025 374.447 337.779 377.063 335.165 379.135 cv
331.827 380.876 328.31 382.438 325.325 384.534 cv
325.102 386.139 326.247 387.076 326.885 388.135 cv
cp
316.686 374.335 mo
316.904 372.854 314.829 368.977 313.806 368.454 cv
312.766 367.924 312.077 368.561 312.005 369.295 cv
311.869 370.692 313.2 372.356 312.846 374.335 cv
312.681 375.254 312.02 375.583 312.605 376.614 cv
314.675 376.882 316.486 375.683 316.686 374.335 cv
cp
133.685 374.335 mo
134.377 374.283 138.946 367.2 135.005 367.494 cv
134.905 369.748 133.062 371.206 132.605 373.494 cv
132.876 373.679 133.048 374.382 133.685 374.335 cv
cp
351.125 367.854 mo
350.387 368.891 351.214 371.12 352.205 371.095 cv
353.228 371.068 354.349 367.868 353.525 366.774 cv
352.641 367.252 351.735 367 351.125 367.854 cv
cp
130.565 366.654 mo
131.35 367.299 132.965 367.594 134.165 367.135 cv
134.063 365.593 130.557 363.786 130.565 366.654 cv
cp
127.325 378.895 mo
124.637 378.43 130.004 374.314 127.445 373.374 cv
124.953 372.123 123.203 371.346 120.725 369.895 cv
120.159 369.563 119.487 369.074 118.805 368.574 cv
116.992 367.246 114.966 363.865 112.805 364.374 cv
111.938 364.579 109.082 368.58 109.205 369.414 cv
109.369 370.518 112.018 371.733 113.045 372.534 cv
114.972 374.037 116.227 375.504 118.565 376.374 cv
119.565 376.746 119.771 377.401 120.725 378.175 cv
121.587 378.872 122.741 379.092 123.605 379.614 cv
125.271 380.621 126.73 382.419 128.646 383.215 cv
130.35 381.599 131.475 379.403 132.005 376.614 cv
129.436 374.311 129.074 379.196 127.325 378.895 cv
cp
133.085 362.694 mo
133.341 363.808 135.369 364.929 136.085 363.774 cv
135.845 362.667 134.206 362.188 133.085 362.694 cv
cp
340.806 371.935 mo
342.051 371.216 343.502 370.167 344.766 369.295 cv
345.54 368.76 346.737 368.472 346.806 367.614 cv
346.892 366.529 345.829 366.04 345.245 365.335 cv
343.775 363.559 343.411 361.36 341.165 362.935 cv
341.145 364.52 339.448 364.303 338.165 364.975 cv
337.358 365.396 336.562 366.728 335.405 367.255 cv
334.735 367.56 334.039 367.549 333.605 367.854 cv
333.286 368.08 333.282 368.596 332.646 369.175 cv
331.051 370.625 328.007 371.343 325.806 372.774 cv
325.473 372.99 325.261 373.425 324.965 373.614 cv
324.006 374.229 322.966 374.313 322.085 374.814 cv
319.169 376.474 322.565 379.646 323.285 381.895 cv
325.513 381.563 327.199 380.688 328.565 379.494 cv
333.004 378.373 336.843 374.222 340.806 371.935 cv
cp
335.525 363.654 mo
336.914 363.808 337.711 362.764 337.205 361.734 cv
335.529 360.957 334.257 362.83 335.525 363.654 cv
cp
366.125 362.935 mo
365.085 361.898 364.302 359.817 363.245 359.694 cv
361.229 359.46 360.538 362.821 358.205 362.814 cv
356.177 363.899 356.929 366.115 356.766 368.335 cv
356.657 369.797 355.697 371.352 356.525 372.654 cv
358.984 371.717 361.34 369.761 363.485 368.095 cv
364.913 366.985 367.064 366.466 367.565 364.734 cv
367.374 363.817 366.609 363.417 366.125 362.935 cv
cp
329.165 362.454 mo
329.107 361.761 329.972 360.931 329.766 360.295 cv
329.222 358.617 327.355 361.235 326.285 361.255 cv
326.051 362.02 325.369 362.339 324.846 362.814 cv
324.454 367.463 321.801 369.851 317.525 370.614 cv
317.79 371.955 318.233 373.635 319.325 373.734 cv
320.191 373.813 321.485 372.527 322.325 372.055 cv
324.069 371.073 325.79 370.343 327.125 369.895 cv
328.097 368.546 330.133 368.262 331.085 366.895 cv
332.047 366.534 333.74 365.904 332.885 364.494 cv
331.031 364.256 329.291 363.973 329.165 362.454 cv
cp
350.525 357.295 mo
349.302 357.022 345.301 359.712 345.245 360.774 cv
345.206 361.511 346.401 362.617 346.925 363.534 cv
347.234 364.077 347.427 365.138 348.005 365.574 cv
350.039 367.109 352.225 364.365 353.405 363.295 cv
353.533 360.774 352.205 357.668 350.525 357.295 cv
cp
126.845 369.175 mo
126.35 366.963 130.003 365.637 129.125 363.414 cv
128.891 362.821 128.321 363.029 127.445 362.574 cv
126.461 362.063 125.421 360.669 124.085 359.694 cv
122.752 358.723 121.389 357.793 120.365 357.055 cv
119.871 356.697 118.931 356.277 118.445 356.215 cv
117.661 356.113 114.851 360.8 114.965 361.614 cv
115.102 362.581 117.275 363.956 118.205 364.614 cv
119.626 365.62 120.471 366.837 121.565 367.494 cv
122.383 367.985 123.423 368.124 124.205 368.574 cv
125.877 369.538 127.688 372.27 129.605 371.335 cv
129.013 370.121 127.136 370.473 126.845 369.175 cv
cp
133.805 355.854 mo
133.076 356.233 131.667 357.982 130.085 358.614 cv
129.229 358.957 127.824 358.711 127.805 359.694 cv
127.785 360.728 130.341 361.359 131.405 361.734 cv
132.573 360.845 132.551 358.544 134.405 358.494 cv
135.502 358.466 136.001 359.631 136.925 360.055 cv
138.048 360.569 139.178 360.556 139.325 361.614 cv
139.568 363.361 137.531 363.802 136.925 365.095 cv
137.324 365.855 137.857 366.482 138.725 366.774 cv
140.608 365.546 142.981 365.142 146.045 365.335 cv
148.037 366.671 151.312 368.203 151.085 371.574 cv
151.041 372.232 150.449 372.956 150.605 373.614 cv
150.721 374.104 151.983 375.031 152.646 374.935 cv
153.369 374.828 154.986 372.135 155.165 370.975 cv
155.291 370.157 154.859 368.788 154.805 367.854 cv
147.737 363.922 141.042 359.618 133.805 355.854 cv
cp
101.405 355.374 mo
100.34 357.229 99.0034 358.813 96.4854 359.215 cv
97.8398 361.969 101.656 364.389 104.285 366.414 cv
107.494 368.887 109.001 365.055 110.285 362.095 cv
107.203 359.977 104.682 357.298 101.405 355.374 cv
cp
337.565 354.895 mo
336.429 354.735 335.35 356.022 334.806 356.335 cv
333.689 356.974 331.941 357.241 331.565 358.374 cv
333.548 358.687 334.291 355.669 337.325 356.574 cv
337.661 356.919 338.262 356.998 338.525 357.414 cv
338.781 358.525 339.354 359.235 339.005 360.654 cv
339.892 361.363 341.336 360.842 341.045 359.335 cv
339.637 358.76 338.879 355.078 337.565 354.895 cv
cp
317.646 355.494 mo
316.588 356.12 315.808 356.866 314.646 357.414 cv
308.505 360.311 301.85 362.683 295.565 365.574 cv
294.203 365.383 293.74 366.094 292.925 366.414 cv
291.938 366.804 290.729 367.292 289.445 367.734 cv
288.405 368.093 287.212 368.09 286.085 368.454 cv
284.06 369.109 282.488 370.408 280.445 370.614 cv
276.544 371.009 273.918 372.037 270.245 372.534 cv
268.422 374.151 264.151 373.32 262.565 375.175 cv
262.34 377.161 262.85 379.449 263.165 381.295 cv
268.419 381.226 272.924 379.375 277.325 378.055 cv
280.047 377.894 283.257 377.188 285.846 376.494 cv
288.112 375.843 287.513 373.477 288.245 371.454 cv
289.703 371.806 289.518 373.453 291.125 373.255 cv
292.368 373.101 292.092 371.41 293.165 371.215 cv
293.815 371.096 294.404 371.666 295.085 371.814 cv
295.786 371.968 296.818 372.022 297.485 371.935 cv
300.678 371.512 304.037 368.59 307.445 367.854 cv
309.429 367.427 312.215 366.884 312.846 365.694 cv
313.126 365.164 312.881 364.567 312.965 364.015 cv
313.271 362.005 314.411 360.285 315.605 359.335 cv
317.438 357.876 319.873 356.383 322.565 358.015 cv
323.151 358.369 323.734 359.635 324.485 359.694 cv
325.69 359.79 327.943 357.8 328.205 356.814 cv
326.755 356.04 324.593 356.208 324.245 354.414 cv
324.115 353.745 324.73 352.864 324.125 352.494 cv
324.045 352.494 323.965 352.494 323.885 352.494 cv
322.212 353.894 319.656 354.305 317.646 355.494 cv
cp
361.205 357.055 mo
361.289 355.132 358.406 353.585 357.245 352.255 cv
355.056 352.745 353.979 354.348 352.686 355.734 cv
353.829 357.59 354.678 359.741 356.405 361.015 cv
357.632 359.579 361.115 359.125 361.205 357.055 cv
cp
375.125 357.895 mo
377.21 355.111 372.851 353.772 371.885 351.774 cv
369.665 352.754 368.472 354.761 366.485 355.975 cv
366.6 358.579 368.571 360.261 370.205 361.734 cv
371.386 360.396 373.063 359.552 374.045 358.015 cv
374.482 358.052 374.826 357.995 375.125 357.895 cv
cp
91.9253 354.895 mo
92.4419 356.995 94.5459 354.911 95.4053 354.175 cv
96.6089 353.143 98.3223 351.729 96.9653 350.095 cv
94.8608 349.711 91.3955 352.74 91.9253 354.895 cv
cp
106.325 350.095 mo
105.902 351.223 104.027 351.514 103.805 352.614 cv
103.65 353.381 104.761 354.638 105.245 355.015 cv
106.236 355.784 107.923 356.355 109.205 357.295 cv
110.133 357.974 111.345 359.935 112.445 359.814 cv
113.712 359.677 114.666 357.048 115.445 356.095 cv
115.792 355.67 116.455 355.598 116.405 354.895 cv
116.332 353.849 114.498 353.389 113.285 352.494 cv
112.267 351.743 111.654 350.711 110.885 350.215 cv
110.495 349.962 110.018 350.02 109.805 349.854 cv
108.732 349.021 108.352 347.321 106.925 346.975 cv
106.845 346.975 106.765 346.975 106.685 346.975 cv
106.225 348.495 106.81 348.804 106.325 350.095 cv
cp
367.445 351.895 mo
367.913 351.345 369.229 350.162 369.245 349.494 cv
369.264 348.695 367.909 347.159 367.445 346.734 cv
366.797 346.143 365.167 344.902 364.445 344.935 cv
363.489 344.978 363.122 346.068 362.525 346.614 cv
361.604 347.456 360.383 347.993 360.125 348.774 cv
359.486 350.714 363.074 353.229 363.965 354.534 cv
365.247 353.98 366.488 353.02 367.445 351.895 cv
cp
341.646 356.215 mo
341.612 356.705 343.138 358.479 343.806 358.494 cv
345.097 358.525 347.129 355.858 349.205 354.654 cv
349.82 354.298 350.302 354.209 350.646 353.935 cv
351.041 353.618 351.393 352.755 351.726 352.494 cv
352.706 351.729 354.622 351.284 354.965 350.335 cv
355.461 348.964 351.992 345.3 350.405 344.935 cv
349.881 345.37 349.41 345.859 348.726 346.135 cv
347.751 348.4 347.519 351.407 346.085 353.215 cv
345.452 354.672 341.752 354.64 341.646 356.215 cv
cp
99.3652 344.694 mo
98.6768 345.648 97.7422 347.922 99.4854 348.295 cv
101.113 348.643 104.059 345.39 104.045 344.335 cv
104.03 343.158 102.639 342.695 102.125 342.774 cv
101.105 342.933 99.8242 344.059 99.3652 344.694 cv
cp
114.605 340.494 mo
113.409 342.698 111.744 344.433 109.085 345.175 cv
110.784 348.155 114.524 349.096 116.646 351.654 cv
117.436 351.584 117.613 352.126 118.205 352.255 cv
119.484 350.333 121.716 349.365 123.365 347.814 cv
120.031 345.789 117.819 342.641 114.605 340.494 cv
cp
354.125 343.255 mo
354.469 344.083 356.912 347.07 357.846 347.095 cv
358.462 347.11 358.952 346.28 359.405 345.895 cv
360.268 345.16 362.569 344.05 362.646 342.895 cv
362.722 341.735 361.082 340.172 360.245 339.414 cv
359.775 338.989 358.595 337.882 358.085 337.854 cv
356.343 337.76 355.416 340.995 353.885 341.335 cv
353.905 341.856 353.921 342.762 354.125 343.255 cv
cp
347.525 341.095 mo
346.881 340.14 345.944 338.304 345.005 337.975 cv
343.314 337.383 342.032 339.786 340.565 340.614 cv
337.671 342.248 334.875 344.394 332.405 346.374 cv
331.657 346.975 330.596 347.182 330.605 348.175 cv
334.572 348.107 332.906 353.612 330.125 353.814 cv
329.709 354.44 329.098 355.664 329.766 356.335 cv
332.256 355.505 333.868 353.797 336.005 352.614 cv
336.964 351.694 336.483 350.224 336.605 348.895 cv
336.776 347.029 338.408 344.169 339.965 343.135 cv
341.306 342.244 344.335 341.604 345.846 342.654 cv
346.446 343.072 346.436 343.848 347.285 344.215 cv
347.809 343.698 348.563 343.412 348.846 342.654 cv
348.441 342.118 347.946 341.719 347.525 341.095 cv
cp
106.565 337.255 mo
105.076 338.398 103.891 339.161 104.525 340.734 cv
107.244 342.181 110.105 339.201 110.405 336.295 cv
109.115 334.399 107.822 336.289 106.565 337.255 cv
cp
96.3652 336.774 mo
95.4937 335.943 94.2153 333.841 93.1255 333.414 cv
92.0713 333.002 90.6948 333.413 89.5254 333.295 cv
87.5654 333.096 85.7163 332.384 84.2451 332.935 cv
85.0786 335.501 87.5581 336.422 88.6851 338.694 cv
88.9585 338.781 89.2983 338.802 89.5254 338.935 cv
90.6582 340.842 92.6099 341.93 94.4453 343.135 cv
95.6182 341.507 96.8662 339.955 99.6055 339.895 cv
98.9932 338.387 98.0693 337.19 96.3652 336.774 cv
cp
355.925 336.055 mo
355.852 335.104 354.498 334.69 354.005 334.015 cv
353.165 332.86 353.073 331.641 352.325 330.654 cv
350.63 331.879 349.138 333.308 347.525 334.614 cv
347.902 337.277 349.892 338.328 351.365 339.895 cv
352.591 338.631 356.071 337.938 355.925 336.055 cv
cp
114.125 333.534 mo
114.349 332.093 116.845 331.502 117.005 330.534 cv
117.176 329.503 115.965 329.036 115.325 328.734 cv
114.686 330.162 111.378 331.407 111.605 333.414 cv
111.659 333.891 113.468 336.156 113.885 336.654 cv
116.704 340.018 122.331 343.776 126.845 346.854 cv
127.505 347.305 127.916 347.956 128.525 348.295 cv
129.193 348.666 130.048 348.747 130.685 349.135 cv
133.003 350.546 134.112 354.093 137.405 353.814 cv
137.876 353.983 137.622 354.878 138.005 355.135 cv
142.643 358.039 147.042 360.563 152.165 363.175 cv
153.565 363.888 155.778 365.61 157.205 365.574 cv
157.926 365.557 158.459 364.81 159.365 364.494 cv
163.897 362.919 171.128 365.398 169.445 370.854 cv
176.549 373.91 184.781 376.478 192.725 378.295 cv
193.559 376.916 193.87 374.414 193.925 372.654 cv
191.624 370.506 187.564 370.574 184.445 369.534 cv
180.57 368.242 176.994 366.924 173.525 365.095 cv
173.15 365.07 172.645 365.176 172.445 364.975 cv
156.864 358.836 142.997 350.982 130.565 341.694 cv
128.731 341.533 128.417 339.77 127.445 338.694 cv
126.233 337.354 124.356 336.734 122.885 335.574 cv
121.752 334.682 121.097 333.362 119.646 333.175 cv
118.737 334.187 118.665 336.034 117.245 336.534 cv
115.067 336.404 113.846 335.333 114.125 333.534 cv
cp
86.7651 330.534 mo
87.521 331.102 89.2168 331.135 90.0054 330.534 cv
90.0059 327.966 86.9585 328.468 86.7651 330.534 cv
cp
382.806 337.015 mo
383.387 336.265 385.145 334.496 385.325 333.414 cv
385.688 331.247 383.172 328.733 381.726 327.774 cv
381.704 327.761 381.631 327.777 381.605 327.774 cv
380.167 327.595 379.102 330.047 378.485 330.895 cv
377.849 331.771 376.681 332.407 376.205 333.055 cv
375.71 333.729 375.567 334.605 375.005 335.215 cv
373.927 336.382 372.659 336.979 371.885 337.854 cv
371.154 338.682 370.184 339.293 369.245 340.135 cv
368.445 340.852 366.968 341.869 366.965 342.895 cv
366.964 343.622 368.332 344.887 368.885 345.534 cv
369.584 346.354 370.72 347.467 371.525 347.454 cv
373.607 347.423 375.231 342.934 377.285 342.774 cv
379.042 340.362 381.029 339.304 382.806 337.015 cv
cp
369.125 327.414 mo
368.357 328.245 366.672 329.099 365.285 330.414 cv
363.95 331.682 363.121 333.144 362.165 333.895 cv
361.299 334.576 359.907 335.259 359.885 336.055 cv
359.86 336.951 361.27 337.595 361.565 337.854 cv
362.484 338.662 363.467 340.673 364.565 340.734 cv
365.843 340.806 367.115 338.555 367.925 337.854 cv
370.469 335.656 373.248 333.842 374.525 331.135 cv
374.256 330.444 373.153 330.587 372.365 330.414 cv
371.148 329.487 370.095 327.837 370.445 325.734 cv
369.507 325.723 369.621 326.878 369.125 327.414 cv
cp
91.3252 327.055 mo
91.8311 327.589 92.1875 328.272 93.1255 328.374 cv
93.6772 327.517 92.8516 326.808 93.1255 325.975 cv
92.3877 325.239 91.4185 326.105 91.3252 327.055 cv
cp
90.4854 347.095 mo
90.8745 346.741 92.3423 346.318 92.4053 345.654 cv
92.4766 344.906 91.4648 344.745 90.7251 344.215 cv
90.1909 343.831 89.2559 342.954 88.6851 342.414 cv
87.2646 341.071 85.3481 339.336 84.1255 337.854 cv
82.9424 336.421 81.9673 334.862 80.8853 333.654 cv
78.707 331.224 75.7432 328.953 74.5254 325.975 cv
73.8906 325.729 73.5938 325.146 73.0854 324.774 cv
70.1455 324.829 67.4375 323.887 64.9253 324.895 cv
65.7344 327.175 67.5405 329.016 69.0054 330.895 cv
70.8296 333.233 72.9287 335.535 74.8853 337.494 cv
77.3521 339.965 79.2451 342.844 81.4854 345.295 cv
81.9717 345.826 82.7388 346.048 83.165 346.614 cv
84.5381 348.438 85.2754 351.101 88.2051 351.175 cv
89.0342 349.76 89.2686 348.198 90.4854 347.095 cv
cp
378.245 353.935 mo
379.042 353.938 379.109 353.296 379.806 352.854 cv
380.096 352.67 380.461 352.802 380.766 352.614 cv
381.811 351.972 382.213 350.701 383.165 349.854 cv
383.516 349.543 384.088 349.509 384.365 349.255 cv
384.715 348.934 384.85 348.386 385.085 348.175 cv
385.486 347.815 386.036 347.737 386.405 347.454 cv
387.527 346.597 387.877 345.528 388.806 344.335 cv
389.15 343.891 389.708 343.796 390.125 343.374 cv
392.738 340.736 394.109 337.066 396.965 335.335 cv
397.748 333.712 398.647 332.735 399.965 331.015 cv
400.709 330.044 402.365 328.657 402.245 327.414 cv
402.147 326.408 399.911 325.23 398.885 324.534 cv
396.787 323.109 395.791 324.538 394.565 326.215 cv
393.44 327.752 392.529 328.515 392.045 330.055 cv
389.372 332.649 386.725 336.107 384.125 338.935 cv
383.265 339.87 382.753 341.182 381.965 341.814 cv
381.629 342.085 381.119 342.043 380.766 342.295 cv
379.496 343.195 378.415 344.848 377.285 346.015 cv
376.064 347.274 374.689 348.288 373.806 349.734 cv
375.305 350.737 376.154 353.928 378.245 353.935 cv
cp
102.125 334.015 mo
103.003 331.983 105.4 330.054 102.485 328.975 cv
100.483 326.896 99.0498 324.25 96.7251 322.494 cv
96.0063 322.638 94.6924 323.016 94.6851 323.935 cv
94.6758 325.137 97 325.348 97.4453 326.694 cv
98.2686 329.187 97.0166 330.541 96.2451 332.694 cv
97.6929 334.327 99.1206 335.979 101.165 337.015 cv
101.947 336.252 101.602 335.225 102.125 334.015 cv
cp
68.4053 322.374 mo
68.8457 322.564 70.0493 322.615 70.3252 322.255 cv
70.3096 321.55 69.8911 321.249 69.6055 320.814 cv
68.5273 320.693 67.9067 321.626 68.4053 322.374 cv
cp
78.2451 322.015 mo
74.6646 322.672 76.9678 324.693 78.3652 326.335 cv
79.8364 328.063 80.3921 330.22 82.4453 330.774 cv
83.0264 329.235 86.7417 327.91 86.7651 326.335 cv
86.7813 325.252 85.0903 324.936 84.4854 324.295 cv
83.7432 323.509 83.0708 322.193 82.3252 321.654 cv
81.5967 321.128 81.2905 320.758 81.0054 319.975 cv
79.3262 319.896 79.2856 321.455 78.2451 322.015 cv
cp
390.005 318.295 mo
388.161 317.68 387.527 319.16 386.885 320.454 cv
385.977 322.287 383.486 323.796 383.646 325.614 cv
383.728 326.549 384.872 327.375 385.565 328.135 cv
386.116 328.738 386.91 330.354 387.846 330.414 cv
389.182 330.5 390.374 327.607 391.085 326.694 cv
392.247 325.202 393.209 324.053 393.965 322.494 cv
392.34 320.738 391.995 318.958 390.005 318.295 cv
cp
71.6455 318.175 mo
71.603 319.159 72.3818 320.234 73.0854 320.335 cv
75.3657 320.659 77.647 316.075 76.3252 313.734 cv
74.7104 314.34 71.7314 316.174 71.6455 318.175 cv
cp
383.646 314.215 mo
382.924 313.332 382.594 311.432 381.605 311.454 cv
380.681 311.476 380.317 313.207 379.565 313.734 cv
379.535 314.165 379.926 314.174 379.925 314.574 cv
377.204 317.735 373.454 320.5 371.766 324.295 cv
373.576 323.773 374.848 324.695 376.565 324.654 cv
377.461 323.221 376.82 321.136 378.726 320.935 cv
380.461 320.751 380.319 322.618 381.485 322.734 cv
382.823 322.867 383.994 320.275 384.965 318.895 cv
385.531 318.089 386.453 317.697 386.165 316.255 cv
385.751 315.432 384.579 315.356 383.646 314.215 cv
cp
62.2852 310.734 mo
60.1704 313.219 62.1987 320.04 65.165 320.095 cv
66.313 320.115 67.3193 319.226 67.4453 318.295 cv
67.7959 315.7 65.5249 316.919 64.2051 314.814 cv
63.6436 313.918 64.1333 310.098 62.5254 310.614 cv
62.377 310.662 62.3711 310.634 62.2852 310.734 cv
cp
68.165 312.654 mo
68.1514 313.44 69.1724 315.319 70.3252 315.295 cv
71.6675 315.266 73.7085 312.012 73.6851 310.734 cv
72.1523 309.45 68.2002 310.64 68.165 312.654 cv
cp
83.0454 305.215 mo
82.0811 305.127 81.3271 306.014 81.2451 307.015 cv
81.1172 308.584 82.7964 310.242 82.8052 312.654 cv
82.811 314.163 81.9009 315.656 82.2051 317.095 cv
82.6592 319.24 86.3711 321.295 87.0054 323.335 cv
88.4302 322.959 88.5796 324.444 89.6455 324.414 cv
90.4736 324.392 91.7778 322.794 92.4053 322.255 cv
93.0591 321.691 94.6587 320.911 94.5654 319.975 cv
94.5234 319.554 93.5957 319.037 93.1255 318.534 cv
92.4199 317.781 91.896 316.489 91.3252 315.774 cv
89.9868 314.098 87.7813 312.271 87.0054 310.374 cv
85.0244 310.132 84.9521 305.388 83.0454 305.215 cv
cp
64.8052 307.015 mo
64.752 310.215 69.1855 306.901 70.4453 306.414 cv
70.9912 306.203 71.5913 306.492 71.8853 305.935 cv
72.3335 301.24 64.8384 305.019 64.8052 307.015 cv
cp
107.405 320.814 mo
102.512 315.668 98.4487 309.691 94.2051 303.895 cv
93.3667 303.761 92.6909 303.085 91.6851 303.055 cv
89.46 302.987 86.3286 302.676 85.2051 303.295 cv
88.6953 308.804 92.5249 313.975 96.8452 318.654 cv
97.542 318.595 98.1191 318.035 98.8853 318.414 cv
99.5483 319.083 98.583 319.893 98.6455 320.694 cv
98.7192 321.646 100.283 322.603 101.045 323.454 cv
102.372 324.938 103.395 326.843 105.005 328.015 cv
107.137 329.565 108.901 327.209 111.245 327.055 cv
111.929 327.01 112.613 327.602 113.165 326.814 cv
111.772 324.768 109.768 322.292 107.405 320.814 cv
cp
77.4053 306.055 mo
78.0137 305.901 80.0698 303.601 80.0454 303.295 cv
79.9155 301.682 75.1812 302.694 74.4053 303.414 cv
74.7842 304.791 75.834 306.451 77.4053 306.055 cv
cp
413.045 297.414 mo
410.265 302.114 408.084 307.413 405.245 312.055 cv
403.526 313.296 402.476 314.813 401.285 316.854 cv
400.412 318.353 398.479 320.023 398.766 321.414 cv
399.011 322.605 403.01 325.001 404.525 324.414 cv
405.3 324.115 405.506 322.992 406.085 322.135 cv
406.461 321.579 407.223 320.893 407.766 320.095 cv
408.345 319.242 408.878 318.243 409.325 317.814 cv
410.362 316.82 411.159 315.56 411.965 314.454 cv
414.793 310.579 416.885 305.52 418.806 301.015 cv
419.283 301.375 419.702 300.847 419.885 300.534 cv
419.511 300.22 419.363 300.901 418.925 300.895 cv
417.855 298.912 415.225 297.892 413.045 297.414 cv
cp
98.2852 296.694 mo
98.1558 294.979 93.6851 295.626 92.8853 296.574 cv
92.5317 299.438 98.4775 299.242 98.2852 296.694 cv
cp
403.925 293.335 mo
402.999 295.082 402.326 296.739 402.005 298.854 cv
399.766 300.786 398.958 304.124 396.965 306.534 cv
396.007 307.694 394.839 308.569 394.325 309.654 cv
394.113 310.102 394.11 310.894 393.846 311.454 cv
393.019 313.204 390.471 314.357 390.365 315.774 cv
390.186 318.198 394.072 318.335 395.646 319.614 cv
397.514 319.165 397.605 317.201 398.525 315.895 cv
398.968 315.267 399.871 314.954 400.325 314.335 cv
400.91 313.535 401.121 312.446 401.766 311.694 cv
402.744 310.553 403.762 309.436 404.525 307.734 cv
405.481 305.604 406.44 304.596 407.285 302.574 cv
408.219 300.342 409.653 298.547 410.405 296.215 cv
408.646 294.98 406.463 293.003 403.925 293.335 cv
cp
396.125 288.774 mo
394.792 288.756 393.914 292.188 393.125 293.814 cv
392.612 294.872 391.563 296.075 391.325 296.694 cv
391.2 297.019 391.296 297.596 391.205 297.774 cv
390.816 298.541 389.323 299.919 389.525 301.015 cv
389.647 301.674 390.789 302.146 391.205 302.694 cv
392.133 303.917 392.686 305.395 393.365 306.414 cv
395.348 305.373 395.991 303.246 397.085 301.374 cv
397.772 300.2 398.975 299.196 399.605 297.895 cv
400.563 295.915 400.679 293.703 401.646 291.654 cv
399.853 290.844 398.193 288.804 396.125 288.774 cv
cp
387.965 284.694 mo
386.969 284.548 385.189 288.021 384.846 288.774 cv
383.429 291.882 381.694 295.299 380.285 297.654 cv
380.437 298.556 383.548 298.244 383.405 299.694 cv
383.218 301.601 379.351 300.341 378.125 300.534 cv
377.205 300.68 376.558 301.676 376.565 302.694 cv
376.577 304.366 378.968 305.675 378.485 307.135 cv
377.64 309.694 374.832 305.609 374.165 305.694 cv
373.589 305.769 371.166 309.029 370.806 309.895 cv
370.631 310.314 370.714 310.808 370.686 310.975 cv
368.688 312.987 366.078 315.426 364.325 317.814 cv
363.68 318.695 361.737 320.475 361.806 321.534 cv
361.881 322.715 363.743 323.649 364.085 325.135 cv
364.355 326.31 363.745 326.975 364.806 327.774 cv
371.266 321.474 377.037 314.029 381.965 306.534 cv
385.946 300.481 390.759 294.718 393.365 287.454 cv
391.96 286.384 389.767 284.96 387.965 284.694 cv
cp
96.8452 302.335 mo
108.803 319.701 124.107 334.301 142.085 345.895 cv
151.169 351.753 160.834 356.858 171.245 361.135 cv
181.916 365.517 193.317 368.332 205.925 370.734 cv
212.59 372.005 219.377 372.785 226.445 373.255 cv
227.463 373.322 228.137 373.054 229.085 373.135 cv
229.882 373.202 230.658 373.659 231.485 373.734 cv
239.232 374.437 247.627 373.63 255.846 372.534 cv
260.05 371.974 264.688 371.829 267.726 370.494 cv
270.422 369.488 273.279 369.595 276.005 368.935 cv
278.338 368.37 281.05 368.052 283.205 367.135 cv
283.581 366.975 283.785 366.621 284.165 366.414 cv
287.271 364.727 291.222 364.088 294.726 363.055 cv
295.787 362.356 297.182 361.991 298.085 361.135 cv
298.445 361.135 298.806 361.135 299.165 361.135 cv
304.475 359.243 309.799 356.292 315.005 354.175 cv
316.688 353.49 318.122 352.576 319.806 351.654 cv
321.269 350.853 322.595 349.438 323.646 348.175 cv
324.332 348.061 325.811 348.132 326.525 347.694 cv
326.931 347.14 326.637 345.886 327.125 345.414 cv
329.567 346.038 330.254 344.683 331.686 343.374 cv
336.281 339.172 343.179 336.109 347.285 331.614 cv
347.547 331.396 347.264 330.633 347.525 330.414 cv
350.152 329.828 351.133 327.412 352.806 325.614 cv
353.219 325.17 353.891 324.919 354.365 324.414 cv
355.019 323.72 355.433 322.805 356.045 322.374 cv
357.991 321.007 360.27 319.86 361.686 318.055 cv
362.696 316.766 363.18 314.981 364.325 313.854 cv
365.627 312.573 366.853 311.667 368.045 310.255 cv
368.473 307.001 372.354 305.832 372.485 302.935 cv
372.597 300.457 369.557 299.741 369.605 296.935 cv
371.112 295.2 374.384 296.703 376.445 296.935 cv
381.712 292.681 383.267 284.716 387.605 279.534 cv
392.905 283.164 399.394 285.568 405.245 288.774 cv
406.523 289.475 407.794 290.367 409.085 290.935 cv
413.169 292.728 418.151 294.034 421.445 297.055 cv
423.679 299.103 422.648 300.287 421.325 302.935 cv
417.793 310.002 413.877 316.686 409.205 323.215 cv
408.617 324.036 407.029 325.681 407.045 326.454 cv
407.078 328.028 409.4 328.075 410.045 329.335 cv
409.607 330.097 409.168 330.857 408.485 331.374 cv
407.686 330.294 406.129 329.971 405.005 329.215 cv
401.583 332.831 398.627 337.25 395.045 341.215 cv
391.58 345.051 388.304 349.242 384.605 352.734 cv
383.346 353.923 381.706 354.96 380.646 356.335 cv
380.255 356.841 380.229 357.479 379.806 357.895 cv
379.469 358.224 378.685 358.374 378.125 358.734 cv
376.315 359.901 374.687 362.039 372.846 363.654 cv
371.959 364.432 371.009 365.245 370.085 366.055 cv
367.818 368.04 365.723 369.392 363.245 371.454 cv
362.021 372.474 360.728 373.666 359.525 374.574 cv
358.577 375.291 356.897 375.956 356.766 376.734 cv
356.557 377.968 357.814 378.353 358.085 379.374 cv
357.895 379.903 357.662 380.392 357.245 380.694 cv
355.902 380.903 355.557 378.621 354.125 378.534 cv
353.25 378.481 351.008 380.26 350.045 380.935 cv
348.595 381.951 347.296 382.744 346.085 383.454 cv
343.512 384.966 340.602 386.979 338.165 388.374 cv
337.11 388.979 335.719 389.325 334.686 389.935 cv
334.092 390.284 333.746 390.879 333.245 391.135 cv
331.746 391.898 330.526 391.92 329.646 393.055 cv
329.727 393.857 329.974 395.313 329.165 395.694 cv
328.185 396.158 327.579 394.677 326.525 394.614 cv
325.917 394.578 325.473 395.137 324.726 395.454 cv
323.296 396.062 320.895 396.084 319.445 396.774 cv
319.005 396.984 318.835 397.518 318.485 397.734 cv
317.329 398.45 316.076 398.388 315.005 399.055 cv
313.695 400.664 314.012 403.9 313.445 406.255 cv
310.373 406.916 311.275 402.592 309.726 401.335 cv
299.962 404.571 290.049 407.658 279.605 410.215 cv
279.013 411.795 282.041 418.097 279.605 418.135 cv
277.497 418.167 278.148 411.899 276.846 410.814 cv
267.381 412.359 258.956 414.705 248.646 414.534 cv
247.23 414.96 248.296 417.864 247.445 418.854 cv
245.656 418.684 246.431 415.949 245.525 414.895 cv
238.43 414.854 231.817 415.148 225.005 414.774 cv
223.311 416.259 225.299 420.028 223.565 421.374 cv
221.771 419.933 223.659 416.534 222.725 414.654 cv
219.244 414.169 214.214 413.928 209.885 413.454 cv
208.836 413.34 206.486 412.6 205.925 412.975 cv
205.521 413.245 205.16 415.36 205.085 415.854 cv
204.804 417.726 204.655 419.835 205.445 420.774 cv
206.899 420.835 208.421 420.123 209.165 419.095 cv
210.062 419.397 209.752 420.907 210.365 421.494 cv
211.152 422.574 213.072 422.445 213.125 424.015 cv
213.204 426.323 210.117 426.431 207.725 426.055 cv
207.271 425.548 207.279 424.581 207.125 423.774 cv
203.828 421.54 201.683 426.428 197.765 425.574 cv
196.927 425.392 196.545 424.704 195.485 424.255 cv
195.745 422.524 193.462 421.756 193.685 420.414 cv
193.805 419.696 195.014 419.627 195.725 419.335 cv
197.559 418.58 200.261 416.582 202.685 417.295 cv
203.896 416.473 203.789 414.429 203.646 412.734 cv
190.815 410.415 178.678 408.191 167.646 404.335 cv
166.617 403.976 162.728 401.658 161.285 401.935 cv
159.707 402.237 159.361 405.825 158.765 407.574 cv
158.548 408.211 157.581 409.871 157.085 409.854 cv
156.224 409.825 155.903 408.19 156.365 406.614 cv
156.757 405.279 158.548 402.601 158.165 401.215 cv
157.827 399.987 155.084 399.637 153.605 399.175 cv
151.678 398.572 149.92 398.099 148.685 397.494 cv
148.166 397.24 147.728 396.493 146.885 396.654 cv
146.279 396.771 145.261 398.901 144.845 399.654 cv
143.578 401.95 143.151 404.384 141.245 405.895 cv
139.993 405.907 139.414 405.246 138.245 405.175 cv
134.77 401.57 129.291 399.969 125.405 396.774 cv
123.653 396.197 121.482 395.133 120.245 393.654 cv
115.99 391.55 112.692 388.487 108.125 386.694 cv
105.843 383.883 100.419 382.266 99.4854 378.654 cv
99.3066 377.964 99.7129 376.91 100.205 376.135 cv
101.425 374.211 103.477 372.195 104.765 370.374 cv
96.5498 363.536 88.1865 356.312 80.8853 348.295 cv
79.3921 346.655 78.0205 345.53 76.6851 343.734 cv
75.9814 342.788 74.9199 341.737 74.0454 340.734 cv
73.1641 339.724 72.3423 338.471 71.5254 337.734 cv
71.0024 337.264 70.1997 337.038 69.7251 336.534 cv
69.3916 336.18 69.332 335.637 69.0054 335.215 cv
68.7036 334.824 68.0957 334.623 67.8052 334.255 cv
67.4712 333.831 67.2749 333.113 66.8452 332.574 cv
66.2588 331.84 65.334 331.252 64.8052 330.534 cv
63.9473 329.369 63.4951 327.433 61.8052 327.534 cv
60.8711 327.591 60.1255 328.764 59.165 329.095 cv
58.3755 329.367 57.0464 329.555 56.2852 329.574 cv
51.4219 329.704 48.3525 328.171 47.4053 323.335 cv
47.2817 322.704 46.8535 321.538 46.9253 320.935 cv
46.9912 320.38 48.1455 318.176 48.7251 317.574 cv
51.6294 314.56 58.1675 318.678 56.0454 322.854 cv
55.2412 324.437 52.4258 324.467 52.2051 325.854 cv
51.9976 327.162 53.5859 328.095 54.7251 328.135 cv
56.0171 328.18 60.2871 325.464 60.4854 324.295 cv
60.6475 323.338 59.3057 321.151 58.6851 320.215 cv
56.3062 316.621 53.9883 313.263 51.8452 309.534 cv
49.8306 306.028 47.792 302.265 46.5654 298.614 cv
46.6553 297.984 47.5029 298.112 47.7651 297.654 cv
51.0635 299.036 51.2495 303.53 53.8853 305.574 cv
54.4619 308.158 55.8374 309.942 57.6055 311.335 cv
58.5479 311.061 58.6758 309.594 59.0454 308.454 cv
59.8755 305.896 60.5986 304.127 58.4453 302.335 cv
58.2988 298.978 54.2021 297.499 55.6851 294.055 cv
59 293.745 59.4346 298.272 61.3252 300.175 cv
61.2026 303.924 64.1948 300.454 65.165 299.814 cv
66.0181 299.252 67.9688 298.867 68.0454 297.774 cv
68.0986 297.011 66.0181 293.562 65.5254 292.614 cv
64.7759 291.174 63.1777 290.117 64.8052 288.774 cv
66.9746 289.129 67.7075 291.386 68.6455 293.215 cv
69.3677 294.623 70.3433 295.512 70.9253 296.814 cv
72.8438 296.787 75.791 296.928 77.165 295.975 cv
76.3862 294.142 75.2422 291.451 73.9253 289.374 cv
72.9648 287.859 69.9312 284.334 73.3252 283.255 cv
74.689 284.589 75.2217 286.752 76.4453 288.654 cv
77.5693 290.402 79.0493 292.153 79.9253 293.814 cv
80.6934 295.271 80.9873 296.761 82.4453 297.295 cv
84.2988 297.974 87.6362 296.726 87.8452 295.015 cv
87.9443 294.202 87.1211 293.5 86.7651 292.854 cv
85.1812 289.98 83.9014 286.999 82.3252 284.335 cv
81.415 282.795 79.9448 281.576 79.4453 279.295 cv
79.9927 278.591 81.498 279.087 82.2051 278.335 cv
82.2852 278.335 82.3652 278.335 82.4453 278.335 cv
84.4214 282.308 86.0962 285.896 88.4453 289.734 cv
89.1655 290.911 89.9092 292.913 90.7251 293.215 cv
91.7666 293.6 94.3623 292.11 96.2451 291.895 cv
97.7021 291.728 99.4688 291.655 100.565 291.654 cv
102.175 291.653 105.549 292.126 105.605 293.935 cv
105.658 295.614 102.461 298.778 101.045 299.814 cv
99.5801 300.887 98.3916 301.416 96.8452 302.335 cv
cp
ef
302.045 414.654 mo
305.935 411.684 310.571 409.736 314.885 407.335 cv
315.429 407.032 315.878 406.431 316.445 406.135 cv
317.814 405.422 319.242 404.999 320.646 404.215 cv
322.832 402.991 325.184 401.893 327.605 400.494 cv
328.604 399.918 329.409 399.03 330.365 398.574 cv
332.39 397.609 334.356 396.691 336.245 395.694 cv
336.877 395.361 337.09 394.678 338.165 394.734 cv
341.18 392.729 345.425 390.848 349.325 388.494 cv
351.125 387.408 353.136 386.368 355.445 385.135 cv
357.319 384.133 359.039 382.399 360.726 382.374 cv
363.866 382.329 360.308 386.422 358.806 385.854 cv
349.727 390.816 340.645 396.114 331.205 400.614 cv
328.686 401.815 326.174 403.324 323.885 404.935 cv
332.25 402.739 340.001 398.89 348.485 396.414 cv
353.929 394.371 359.325 391.556 365.165 390.055 cv
365.893 389.867 366.713 389.133 367.565 389.814 cv
367.376 392.174 364.851 392.756 362.525 393.295 cv
360.959 393.657 359.687 394.608 358.205 395.215 cv
357.449 395.523 356.567 395.429 355.806 395.694 cv
355.243 395.891 354.802 396.464 354.245 396.654 cv
353.773 396.816 353.17 396.726 352.686 396.895 cv
352.179 397.071 351.758 397.523 351.245 397.734 cv
348.884 398.707 346.178 399.385 343.686 400.255 cv
339.287 401.789 334.58 403.73 330.005 405.414 cv
328.637 405.918 327.172 406.354 325.806 406.854 cv
323.506 407.696 321.073 408.641 318.726 409.494 cv
317.211 410.045 315.556 410.262 314.045 410.935 cv
310.609 412.465 306.271 413.934 302.766 415.494 cv
302.405 415.074 li
302.045 414.654 li
cp
ef
1.06528 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
246.186 38.5947 mo
247.095 38.6133 247.985 38.7734 248.885 38.9346 cv
@
.598333 lw
241.325 42.8345 mo
243.374 42.1367 245.563 40.6519 247.767 41.312 cv
247.226 43.3735 244.593 44.2842 242.705 44.8345 cv
@
.776067 lw
255.329 51.5947 mo
255.749 50.21 256.111 48.7827 256.799 47.481 cv
@
.616841 lw
241.025 53.4346 mo
241.051 53.4414 241.1 53.4502 241.149 53.459 cv
242.528 54.395 240.362 55.6543 239.42 55.7832 cv
237.486 56.0469 235.905 53.8481 234.948 53.5591 cv
234.099 53.3027 232.987 53.5986 232.642 52.8545 cv
232.204 51.9102 233.527 51.313 234.563 50.6714 cv
@
.685657 lw
239.433 49.2354 mo
242.783 48.0532 246.415 47.1025 249.346 45.0742 cv
@
.426659 lw
235.359 50.1973 mo
236.722 50.4346 238.405 50.2017 239.433 49.2354 cv
@
.490975 lw
239.433 49.2354 mo
238.369 48.0952 236.269 48.4346 235.385 49.6743 cv
@
.501006 lw
248.825 51.2344 mo
250.073 50.1499 251.979 48.9927 253.662 49.6011 cv
253.801 49.791 253.896 50.0156 253.861 50.2559 cv
252.902 51.834 251.215 53.1763 249.432 53.6211 cv
@
.872435 lw
233.315 57.4146 mo
231.481 57.2886 230.627 55.5454 229.925 54.0845 cv
@
1.17391 lw
231.005 121.134 mo
228.229 121.149 225.382 121.103 222.605 121.134 cv
.00332647 .990387 .971069 .000885023 cmyk
@
1.14285 lw
216.965 144.654 mo
220.759 144.675 224.592 144.817 228.365 144.774 cv
@
1.09773 lw
204.185 116.234 mo
214.198 116.132 224.266 116.244 234.306 116.274 cv
@
.99295 lw
202.925 179.574 mo
203.196 179.577 203.471 179.556 203.735 179.629 cv
209.2 179.742 214.938 179.682 221.379 179.819 cv
226.84 179.935 234.892 180.621 239.693 179.991 cv
242.359 179.642 241.448 175.615 241.879 173.515 cv
@
1.05675 lw
235.085 175.015 mo
230.704 175.046 224.671 175.02 220.719 174.89 cv
219.261 174.842 216.325 175.23 215.246 174.146 cv
214.11 173.005 214.444 170.598 214.385 168.962 cv
214.313 166.986 214.374 165.332 214.252 163.314 cv
@
1.09343 lw
216.305 149.528 mo
220.315 149.499 224.25 149.708 228.245 149.574 cv
@
1.06959 lw
309.005 169.495 mo
307.777 171.922 308.818 175.887 307.246 178.029 cv
306.492 179.057 304.399 179.492 302.793 179.987 cv
296.181 182.025 286.585 183.214 279.005 181.614 cv
@
1.14799 lw
274.686 118.375 mo
284.413 114.865 295.189 115.138 305.045 118.015 cv
@
1.15832 lw
285.605 177.654 mo
255.652 177.093 248.175 131.366 277.554 122.507 cv
277.599 122.494 277.641 122.469 277.686 122.455 cv
@
1.18811 lw
106.445 115.975 mo
117.187 116.41 133.684 113.098 138.306 125.85 cv
140.836 132.831 136.724 140.766 129.388 144.198 cv
@
1.04048 lw
99.3652 179.095 mo
112.329 177.935 128.296 183.253 138.39 173.087 cv
144.878 166.553 144.99 156.315 137.734 150.192 cv
135.52 148.323 133.372 147.321 129.845 146.334 cv
@
.901906 lw
194.225 171.475 mo
193.746 172.561 194.891 178.487 193.125 179.478 cv
192.482 179.839 191.116 179.813 189.975 179.851 cv
180.812 180.151 166.823 179.951 156.704 179.819 cv
155.78 179.807 155.19 179.958 154.445 179.694 cv
@
.961102 lw
154.302 178.591 mo
155.636 177.916 157.14 177.631 158.525 177.055 cv
@
1.15574 lw
187.205 175.134 mo
182.842 175.293 179.131 175.239 174.343 175.25 cv
172.409 175.255 169.736 175.647 168.948 173.006 cv
168.042 169.974 168.793 166.3 168.599 162.421 cv
167.993 150.321 168.29 138.765 168.288 126.781 cv
168.288 124.681 168.12 122.193 169 120.81 cv
169.863 119.453 172.726 118.827 174.125 118.134 cv
@
1.13972 lw
171.845 116.095 mo
168.119 116.01 164.36 116.06 160.625 116.168 cv
@
1.09704 lw
321.846 117.535 mo
326.437 117.485 330.972 117.607 335.585 117.595 cv
@
1.06607 lw
319.806 180.535 mo
325.955 180.844 332.193 180.826 338.346 180.794 cv
@
1.14647 lw
338.525 179.455 mo
334.769 178.04 332.24 177.544 332.062 174.077 cv
331.963 172.155 332.068 170.169 331.925 167.814 cv
@
1.12231 lw
333.846 120.774 mo
334.667 120.508 335.419 120.068 336.245 119.814 cv
@
1.15518 lw
379.085 180.895 mo
366.512 177.366 356.212 163.941 346.842 154.592 cv
344.604 152.359 342.534 150.013 340.445 147.895 cv
@
1.15071 lw
340.205 145.495 mo
348.199 138.941 356.976 128.747 365.72 122.436 cv
367.255 121.328 368.816 120.647 370.445 119.935 cv
@
1.08744 lw
367.686 117.774 mo
365.307 117.692 362.844 117.703 360.425 117.728 cv
@
1.08275 lw
113.165 121.134 mo
115.496 120.183 118.136 120.289 120.605 120.294 cv
@
1.0173 lw
112.865 143.861 mo
116.888 144.24 121.079 143.908 124.805 142.254 cv
@
1.07282 lw
126.485 174.294 mo
125.088 174.794 123.567 174.99 122.097 174.97 cv
119.091 175.321 116.943 175.124 114.767 174.431 cv
110.622 173.113 112.854 167.344 112.085 163.015 cv
@
1.06125 lw
113.105 148.834 mo
117.284 148.61 121.558 148.54 125.646 149.574 cv
@
1.00722 lw
125.646 265.374 mo
144.159 265.517 159.706 249.981 159.604 231.477 cv
159.488 210.637 139.93 194.423 118.925 198.774 cv
@
55.5654 199.135 mo
60.5435 199.221 65.5649 199.168 70.5757 199.216 cv
ef
1.0889 lw
55.5654 199.135 mo
60.5435 199.221 65.5649 199.168 70.5757 199.216 cv
@
72.1851 262.795 mo
65.8188 262.904 59.4902 262.736 53.165 262.614 cv
ef
1.01617 lw
72.1851 262.795 mo
65.8188 262.904 59.4902 262.736 53.165 262.614 cv
@
27.2451 262.374 mo
21.6792 262.412 16.0371 262.415 10.4453 262.255 cv
ef
1.01681 lw
27.2451 262.374 mo
21.6792 262.412 16.0371 262.415 10.4453 262.255 cv
@
27.9653 260.935 mo
25.6021 259.969 22.2344 259.125 22.0854 256.015 cv
ef
1.06293 lw
27.9653 260.935 mo
25.6021 259.969 22.2344 259.125 22.0854 256.015 cv
@
26.7651 232.374 mo
36.1309 232.363 45.7388 232.467 55.0854 232.494 cv
ef
1.07344 lw
26.7651 232.374 mo
36.1309 232.363 45.7388 232.467 55.0854 232.494 cv
@
72.6055 261.414 mo
70.7632 260.247 68.1021 260.134 66.8452 258.175 cv
ef
.997503 lw
72.6055 261.414 mo
70.7632 260.247 68.1021 260.134 66.8452 258.175 cv
@
67.5654 203.215 mo
68.7627 202.335 70.2578 201.876 71.6455 201.295 cv
ef
1.09325 lw
67.5654 203.215 mo
68.7627 202.335 70.2578 201.876 71.6455 201.295 cv
@
56.0454 227.454 mo
46.5879 227.313 37.1055 227.39 27.665 227.274 cv
ef
1.04337 lw
56.0454 227.454 mo
46.5879 227.313 37.1055 227.39 27.665 227.274 cv
@
21.9653 199.015 mo
20.7178 198.837 19.4438 199.083 18.1851 198.968 cv
ef
1.15011 lw
21.9653 199.015 mo
20.7178 198.837 19.4438 199.083 18.1851 198.968 cv
@
1.1363 lw
186.725 199.494 mo
193.855 199.988 201.809 198.175 208.205 202.255 cv
@
.872344 lw
176.225 263.395 mo
182.713 263.544 189.216 263.768 195.705 263.515 cv
@
1.03974 lw
196.182 262.277 mo
193.458 260.882 188.495 260.735 189.125 256.494 cv
@
1.1473 lw
229.822 263.403 mo
217.894 257.552 210.713 245.295 201.125 236.454 cv
@
1.15015 lw
203.964 233.173 mo
207.354 231.79 210.623 229.825 213.005 226.975 cv
@
1.06879 lw
303.735 265.285 mo
302.531 265.351 301.313 265.29 300.125 265.374 cv
@
1.0284 lw
240.785 264.114 mo
246.419 264.309 252.111 264.202 257.766 264.055 cv
@
1.1416 lw
258.245 262.675 mo
256.199 261.383 253.486 261.536 252.097 259.766 cv
250.648 257.92 251.771 255.393 251.174 253.021 cv
251.208 252.879 251.223 252.669 251.226 252.475 cv
@
304.505 263.994 mo
304.596 261.9 304.41 259.784 304.325 257.694 cv
ef
1.15677 lw
304.505 263.994 mo
304.596 261.9 304.41 259.784 304.325 257.694 cv
@
305.525 204.774 mo
306.52 204.07 307.688 203.643 308.766 203.095 cv
ef
1.14624 lw
305.525 204.774 mo
306.52 204.07 307.688 203.643 308.766 203.095 cv
@
295.205 249.175 mo
285.746 239.574 276.814 229.5 267.485 219.774 cv
ef
1.14978 lw
295.205 249.175 mo
285.746 239.574 276.814 229.5 267.485 219.774 cv
@
1.16592 lw
194.525 230.574 mo
193.397 230.698 192.24 230.752 191.105 230.635 cv
@
.675392 lw
410.364 336.121 mo
410.466 335.146 410.709 333.909 411.905 333.774 cv
0 0 0 1 cmyk
@
.545376 lw
227.985 368.435 mo
228.725 368.736 229.596 368.978 230.375 368.664 cv
@
.595584 lw
227.735 360.265 mo
228.293 359.426 229.359 359.441 230.225 359.635 cv
@
.713922 lw
88.3853 362.48 mo
89.4521 362.59 90.8125 362.987 90.7852 364.314 cv
@
.59227 lw
99.4253 372.234 mo
99.2036 371.328 98.4121 370.82 97.6714 370.352 cv
@
.936376 lw
230.165 67.3745 mo
230.284 67.7739 230.693 67.9546 230.928 68.2744 cv
@
.575053 lw
230.928 68.2744 mo
231.948 68.2842 233.161 68.6431 233.717 69.5825 cv
@
1.08665 lw
233.717 69.5825 mo
233.734 69.5845 233.751 69.5864 233.769 69.5879 cv
@
.712954 lw
236.585 70.1543 mo
241.212 71.2769 246.594 70.082 249.186 65.7544 cv
@
.965123 lw
258.485 78.6543 mo
261.342 75.6919 264.841 72.6694 269.294 73.7534 cv
269.489 74.0781 269.502 74.4854 269.75 74.7847 cv
@
.595442 lw
270.425 74.6943 mo
273.885 73.7344 275.492 78.8687 274.686 81.6143 cv
@
.687477 lw
275.982 81.5483 mo
277.496 80.043 279.31 78.4312 281.527 78.2896 cv
283.145 79.7139 280.735 81.6357 279.846 82.8545 cv
@
.683627 lw
252.796 106.98 mo
253.127 106.145 253.646 105.374 254.021 104.55 cv
@
.864916 lw
252.525 101.415 mo
251.5 100.219 251.648 98.5869 251.174 97.1943 cv
@
.689833 lw
230.174 70.0918 mo
229.153 70.0732 228.119 70.0654 227.105 69.9033 cv
@
.70987 lw
222.425 57.8345 mo
223.25 51.918 228.687 48.2036 231.837 43.5547 cv
@
.540303 lw
231.785 63.5947 mo
230.41 63.3535 229.051 63.0811 227.688 62.7886 cv
@
.409878 lw
228.281 65.7783 mo
227.702 65.0107 227.216 64.1646 226.585 63.4346 cv
@
.598665 lw
221.945 68.1543 mo
222.458 66.0767 224.302 64.7212 225.779 63.3345 cv
@
.689053 lw
217.648 73.1196 mo
220.069 71.7988 222.601 70.6348 225.185 69.6631 cv
@
.78151 lw
226.768 68.7993 mo
227.866 68.2681 228.928 67.5078 230.165 67.3745 cv
@
.695068 lw
230.165 67.3745 mo
231.891 65.9795 234.006 64.8154 236.192 64.2817 cv
@
.563519 lw
236.192 64.2817 mo
241.726 60.9556 248.061 58.6001 253.865 55.5547 cv
@
.668041 lw
236.192 64.2817 mo
241.499 66.2358 247.371 64.312 252.785 63.5771 cv
@
.598736 lw
230.928 68.2744 mo
230.697 68.8892 230.388 69.4736 230.174 70.0918 cv
@
.581722 lw
230.174 70.0918 mo
230.858 70.5557 231.604 70.9658 232.43 71.0947 cv
@
.606131 lw
241.585 76.7544 mo
242.016 75.645 243.063 74.8203 243.226 73.5815 cv
241.343 71.9668 238.268 72.3877 236.321 70.7944 cv
@
.551543 lw
233.717 69.5825 mo
233.142 69.9497 232.789 70.5342 232.43 71.0947 cv
@
.51539 lw
232.43 71.0947 mo
234.134 74.0493 235.793 77.457 238.917 79.0918 cv
239.565 78.9878 240.037 78.4932 240.519 78.0879 cv
@
.601598 lw
200.339 74.4136 mo
201.81 74.3066 203.174 75.0195 204.555 75.4561 cv
@
.532476 lw
207.279 74.541 mo
208.191 74.7461 209.298 74.8496 209.899 75.6333 cv
@
1.17576 lw
209.899 75.6333 mo
210.024 75.6592 210.137 75.644 210.305 75.6079 cv
@
.718908 lw
257.912 102.768 mo
259.619 102.016 260.505 100.231 261.905 99.1318 cv
@
.793369 lw
266.39 96.9229 mo
267.943 95.9648 271.34 94.7246 272.91 94.4131 cv
275.472 93.9043 279.987 93.8711 280.727 93.4731 cv
281.219 93.208 281.627 92.7578 281.517 92.2363 cv
281.171 90.6108 278.845 91.7236 277.237 90.8911 cv
@
.737914 lw
276.646 89.9946 mo
278.782 88.9546 285.036 84.3682 279.72 83.7437 cv
@
.624832 lw
269.132 88.7012 mo
271.492 87.4771 274.023 87.7588 276.119 85.9238 cv
276.599 85.8716 277.103 86.0005 277.563 85.8218 cv
277.782 85.689 277.901 85.4565 278.045 85.2544 cv
@
.808294 lw
266.705 85.0444 mo
269.339 84.3076 272.369 85.0713 274.336 82.5757 cv
@
.855231 lw
263.985 82.2344 mo
265.284 80.8848 267.114 81.2388 268.692 81.5044 cv
269.188 80.3823 270.393 80.0425 271.505 79.8843 cv
@
.669788 lw
271.665 79.0347 mo
271.041 78.1382 270.569 77.1543 269.982 76.2407 cv
@
.737611 lw
269.425 76.1143 mo
268.321 77.4092 266.753 78.1431 265.146 78.5771 cv
@
.777441 lw
259.146 88.9146 mo
263.053 86.9287 261.414 81.8047 264.164 79.1523 cv
@
.853773 lw
206.808 81.7144 mo
206.67 80.4629 206.92 79.1875 206.924 77.9238 cv
@
.729707 lw
203.626 85.439 mo
204.63 81.2993 203.814 76.7197 199.125 75.4746 cv
@
.69455 lw
209.899 75.6333 mo
209.022 76.3643 208.082 77.0435 207.065 77.5659 cv
@
.696965 lw
203.626 85.439 mo
202.794 86.1763 202.259 87.3379 201.065 87.5771 cv
@
.768493 lw
198.815 86.9492 mo
196.05 89.9443 194.488 84.9043 196.449 83.0063 cv
@
.744068 lw
199.325 85.4546 mo
200.908 82.4893 200.964 78.6255 197.745 76.7144 cv
@
.742542 lw
184.664 97.6689 mo
185.708 96.7681 186.999 96.083 187.792 94.9302 cv
@
.859581 lw
187.865 89.1943 mo
187.61 87.7534 188.438 86.439 188.646 85.0547 cv
@
1.05139 lw
453.785 266.234 mo
452.452 266.405 451.099 266.328 449.766 266.215 cv
.00332647 .990387 .971069 .000885023 cmyk
@
.955843 lw
389.705 264.914 mo
395.733 265.071 401.762 265.105 407.825 264.914 cv
@
1.12073 lw
407.176 263.184 mo
403.194 261.878 401.209 261.148 401.004 257.515 cv
400.916 255.951 400.986 254.422 400.925 252.534 cv
@
1.17583 lw
443.525 248.454 mo
439.811 244.215 435.664 240.392 432.005 236.095 cv
@
1.21961 lw
430.367 234.373 mo
423.236 226.749 416.085 219.11 409.085 211.374 cv
@
1.10408 lw
134.045 259.255 mo
122.197 262.992 109.639 258.931 102.646 249.675 cv
94.439 238.813 93.915 223.178 102.348 213.022 cv
105.186 209.606 109.053 206.371 114.005 204.654 cv
@
1.17453 lw
341.105 200.994 mo
346.127 200.891 351.162 200.93 356.165 200.935 cv
@
1.01407 lw
331.085 264.534 mo
340.896 264.923 354.933 264.74 364.679 264.787 cv
367.495 264.801 370.667 265.634 370.565 261.414 cv
@
1.10034 lw
363.726 259.854 mo
357.69 259.42 351.61 260.588 345.675 259.716 cv
342.672 259.274 343.263 255.456 343.192 253.021 cv
343.076 248.937 343.107 244.988 342.965 240.774 cv
@
1.12018 lw
345.125 234.534 mo
349.037 234.636 353.018 234.566 356.885 234.534 cv
@
1.14479 lw
356.585 229.647 mo
353.723 229.7 350.86 229.811 348.005 229.614 cv
@
.674833 lw
300.306 304.503 mo
299.646 304.594 298.838 304.708 298.361 304.118 cv
298.248 303.901 298.299 303.642 298.44 303.452 cv
298.827 303.288 299.247 303.232 299.665 303.234 cv
0 0 0 1 cmyk
@
.50388 lw
321.306 310.755 mo
321.726 311.225 321.668 312.25 322.542 312.143 cv
@
.555919 lw
322.542 312.143 mo
322.693 311.685 322.748 311.202 322.745 310.723 cv
@
.63498 lw
322.542 312.143 mo
322.736 312.304 322.826 312.41 322.947 312.523 cv
@
.497411 lw
322.947 312.523 mo
323.245 312.38 323.619 312.37 323.925 312.494 cv
@
.521229 lw
322.947 312.523 mo
322.916 313.069 323.379 313.617 323.945 313.362 cv
@
.693469 lw
167.185 302.515 mo
167.923 302.697 169.474 302.385 169.487 303.428 cv
169.15 304.014 168.399 304.059 167.798 303.992 cv
@
.510603 lw
143.345 300.259 mo
143.592 300.084 143.904 300.038 144.186 300.151 cv
144.421 300.329 144.426 300.634 144.462 300.897 cv
@
.50056 lw
145.265 311.154 mo
145.975 311.293 146.218 310.603 146.417 310.074 cv
@
.856971 lw
145.085 311.295 mo
145.158 311.243 145.212 311.199 145.265 311.154 cv
@
.543765 lw
145.265 311.154 mo
145.291 310.629 145.161 310.118 145.146 309.595 cv
@
.5755 lw
143.832 312.215 mo
144.469 312.66 145.174 311.97 145.085 311.295 cv
@
.572992 lw
145.085 311.295 mo
144.706 311.17 144.282 311.195 143.885 311.215 cv
@
.708343 lw
299.825 416.305 mo
300.815 416.214 301.55 415.503 302.405 415.074 cv
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Fredrik Lundh) ()%%Title: (AMCBleckhornenLOGOSvart.eps)%%CreationDate: 2012-10-19 20.03%%Canvassize: 16383%AI9_DataStream%Gb!R&kB\mFZ7,Y,!;?K%0c<%"d+D_]fZ#g-3!W-_btBm%X]bPA^@kKg3n&p>hon+,4S(2,<`_khb#5X[hY_IQkm\usq<>XlmKDRI%isBq"9tK?dj77MsK=h+Lf-MnC%#asNR3]g<BD=d!!k^fhPOTn'Y8*tke[RhHf&tM"J$CCq8(78XjY$J[T"(uXhsdH/IdW7de%a`7%;7eo3H#r0=<d?CaQ`'FpHg.E,."rRRVNkKt7_S-<\C7(Jgao'_c"mc?]O(Xi!/l;ik4;/g[-I>M!4:WF+2d+BHB;h!hi7VU$1i\0%cnNPXeaoV`J13E"V-'&BiJ/OPCbgQj,\W&On09ENN4]&MS&.n%H#m8C5pl@,!"-Qk7%@_"pb/6Np`tcI:^k5a!#3\!DZB$.s*LtP%cJ-OYFRgIaB/-%(`pNR57RY)mGa`V"&Dba?Aq)o^[?l;8FdD%CXM@L/'mfqonC+dh(&I\))YF&)!R\N3a`=uf+bZm,\qK.Tq6DaM%+.se%E>1k@,u<r0U]11?10DEG0N<V9H8Y*_8!nhdqrL]P>9#j-;#Va]RdKopIgJe**Nd]4;spH7!S4X/rhhtfLsUh+c)a-D:*8t]%,=4_Q-93[ZK;.@]Z-X]a4:_l-RKhdCn5#4kSTiPA+:j$hrZue#<!6,d"ru^+"#o#Z#N(/*8fVT?<LFAD$AX-[,fr8q2US>cs+9lm%12NW!EnR(@df>[c>UaV?.XKVFN29+L0HHoW!KQg7JJffMI&#pbGp`R2:Z1orN/ShXh7B1EDcf;Ul+4l1P-+Ro"ck/)l"YB*q3nnm%\_a^BG;n\uXhW[NSNm)@1>qka%EbloC9[%pgOiYE&eI`PhKP0=n1suAqQKkP`Vp[0ZLU%j/PZ60O/=]J=Lk7kl+%njo9haTOR>\e%m`+WLjP&NFGgZd7.Bo'q#=.%e+&GH*8T,ci,_'RfOZ%Q2N@n[t\N<#_/UlL"l#\2'eNT.iMp8aHp&FKr;9(=`DC1$%l^5U#H;'tL%rp-dRDfZ?Vn@oieTfj;'^?=n:c_,',^u2b^M*0OGZ2PVbVPCt:XRMFRV;@ds#Mi7ln]t[t+'V#ueG'qUHGG>=kpW<tNb?G6E&W7"%ZTa,Sr$gZt%2iQd"c?0ZqB?MeS[e1t!dTC!i:<KPp^4:Lan5$.rkk:Iq-QFG[9'-bHb^Z6DNF\_YUe9AJ6hS9>q#H,$i:,B9=ld)%OT.JOiIs@[]t6O'fi-0BR8itA+8FjtIf+bo^YPFWb5M03\U2^"FQ^NfH`e45J0usn%#,8l`KLG)-r[LL;nY<qld^2&V"Kc._<O0'%CkSG[a0k(*e@R=\NY]"+'IP"[1el"NoSDWH=qK840S4''>4]u=<BW"]=IRkh/5_%^X8-._TX_lt]LPo]&WnUIk5Q*a!KaJ3"LpEl%akJ>SQYi(u'pJV$p-aB>\qokCq*3s/VlSN/pi(ru:Ybr!NCOY,*!(IL+*:Q,5+'5AlC+3gg].;(fE6M$YO2q>&+fdRoO6O[F.eKi%'`GB9#H8j<e:0S`[/Ogd(FL?p%=eq;Pc!bRmEnPkMqSsor?e0g82kN6$dE&YQVqHOSb*p6Ai/lbq`Q<kOa;c^Zh*GjE-t;?Ql@^a%39Sn<')(oqpYOBimmmc=OqNf;5A571I4'tl];kli$$tkia.eU*reEKP9s;04/>qP.X=!i=nR61[7Xc2[Gp$Qkg%!rP(GM0TU7qM"%+Jk""^]04onUFXL(8F1is)q[A1<Q+KG1UYn//Hmcir5i5YFHB;RE[rkB(O>uH8Zbh79Q(fS'9cBhX\_/KZ&oNiCU:Z1nLpYU7_GC%qo=OOQ[A^e=jJ,3:T"sAl:dQ&&CgP`99T-p1:?e!rX4ZLep<>?C>S@<]rD%Ao`lH/T,tkZ^MNY[);93Q_N*Y9m"sC#-etQ`N*?"$%S;iI%F6A.e4^WB0m<R%676=:_g>.n]:_L+tc9XZd@,-CR'^_;Sa$(!t/3=@i&:RAU9D:Bu8Kdl!P4Seo_,Z!Tj1]:^QMpX;IrGJ4%XmBV]2rY7d,g?S=!;(`tC#?H8%C;:2*&jq[$jLH0&k3%M3H%\/ZSj@MpE(6gT]]Virho4('FL7F=%"o+gV37>B[(kQkP[i!r`A"5%m/Lkc0(fFlG%WKI/4JkpZSG5</EaJ2(7DecSp[`qhgK]s3g5lVs*E5a%9?sRI8Kq:IPU*gs%,=e"AR[mld*\?Q>S!hf5#DmQ^2:8%me([<2Jt1&\sY0_e"s3KHSehq*frA#hJ<`<NKi&s[%#7uOummN<m.Jd#4&Q;\7b1HN.3Q!Y=<A_2/(H]O[7pgBL=g>n$d?lftX>^%.iR5>\Y]>R33u=V@Yu+R,QpU5aj]h,!.IZ?9@4(*N+@;AKfE&'9e&dgX\b]Sq5_2BaE(Cg&EWnS(N(QSe+BjCI"nr'Mfg&5IKAMZ%1mmpk940pq1dri5VsZUdA<6Z=mk00`47,mldPXik7aMspq/e$Q8@,RF7tV[1$4:SK"iBg>X!bX?Vn"5&:o.'F\b#B,1m5rOd%;ta%4$8dq"h:m#SbMuoFnTsuY,BH;*rB<j8#$eoiPWT6HQkM=MCHh9%%(h[a$:@_P.4?E&'87n=Dg]65_TND!e=Kgc\On)8-JQhUIKV"%#UE99L$8`VR82&DpacYWKDp6+-noOZT&j`AlJ'V*lG`T6]U+-7?cT&r@.8Z.V02X'L^>/VEVQ,[rjhHEg1`4^@0t-/SFF)FHfclO%Ltf[]+cn08Xp*b)VQ6f%rbY/kfU3%$=pE@W_/j(;'NX7R7mp[qq>,]gjnX"gRkOf5cA0[/Cn'&EPX&ie(\9U]f]GmB>A.lFd;)f^%E7TKrXZkH"#1=XN^)Tg7e'#]ZS!T&^^F(:<Ll[/L3`F/7Z'=(V"L/"o^YDk1Ab<\lDQ>]H?kQJ']j8#\VhebT`']"&I(ls6XgIP7%1/h%Y)%W+li'i>^f$hS+D*(PLbA.aGquQ>/UD$JIT>%p-Cn>tsT'LFsrR7CK([\u!+L`_9[=(I.fA0c+B(>4[Yq-,#;>:"jK7n`^%_#Bb)gb[;bDU9bZ@eh]m!q*Z`R(*A>6t&"sP@'mQ_,u>.3($1Xh1I$=gieb4s.B@i4e%!;+M)<mlMdI8SPP.A`Sc*;J0EPl+Ls!>%h=O?+5?PEsP9Dt*&Tq\B!H`NLQmqYa=UNrp3J[,rZ%59C/=n<c8(!CP3<^A8$aYFrBfg?MoIi23hi22odKAsnP&/\ZX;0KJp8+_q%&+(\?7e3DK%^Jsp`i=Y*r,f6W6PHq^c=%nk]D5==mm&,WDRI;k.*pAtcJZEOX(:*l[[Hhp<Hcg)ZXVml-rOa@h4+#Ppo6J!55$l'%/Y"_$Pl;Z9dZef0Q7mcG6q=TMHXcr@DpK6n>sT7R#TWK$k%F'(MYN#k!&$XF"`Z%3K$4uk&$86UG.e=oNh&<kZJj@:_fXCgbgqRg%@BgM]E(1rH*H]BU_).8)BJ98-T@LG-Bb*\al\:Z;fIY6]0Fp1C`nDsb#erE["2R/`+\ll?NXaU7k=5?PrY8Ph!DG[)-7[TaB#-Wu%.M4j"FXW!30(9H?$O9q%r*eBkF/stT3_7;>$Ret'LnVt^@AkAm-,Dn6J]&j[PIO$G%=H\FTHk44!DS.Zo5I*DWJ4A93`LuC_ML((%0o.1V<N8!JdXZEt-c12e)pp>se1mYc<hu3p@Zg)J;N&2!:G1B9aF;SZMrc?:3gDLq`#X+IkV]XF`2VpPhjO/Wn9?d04K+Z(Igj"W%%[tIW(`L?GC`XT>#<b+GXJ'dWV&[A#N-3IW@P&7F:#Cu%9@-+Us.84(eZRYfY1jj`s%GL>;<2>ufCSY2Nd+toieEcP)Ta">R`?=&%makce#0V"5B&/aERHoOCW-<GBO*5MHC5J,-(=iT\Pa-=qeTk<iSbJl-3>1\e%=775"^:,&3r^:A42[j1[KgPL#)e;A_?`[!=nKaC%^VA"52Z"O+U\tK[I,dnHn-_X3PgsmH%P6:RYa!bs`3$s`6(j>Y<c,O>%XeN_19gB\EOWLD4L\$d]Z&5pH]]YMll\e9UrcY#BK@du%4a(]"\W+e8mG5%jBAr9gG#(27#G%3I\N+Na\P5CcgKQgU,NYVi,=M?*lt%?Z?^#'.2k&"+V@tIgT.QdC`M9m.#9"80Y7p,7Q%Aha%/3;B5,ibC)o_`m,\tG[o\Q$1(QMj?<gDo4c2d^5ESi0augeA./(Db`<4,uop=P`L3<r,_Y3*lOUk8"1*4%3,-"^aM:dI>nZ>a6M<%0Xg6k0n+)45Qg]7SU]G6q;<n_>"];0mjjEUKosrb1c#e^'2%:[GdlIjp-lDf1H%V$LO:[8F#*d(2`]7J03-<:\C[J0*q^g][f%c$%([3aq=f$dBTC-5u78i?U<(2\AemX+:BPdNePgkf*Q'k8`eS*#lJSCFgYg6e/O_//=gOeE'p&F<</6,neJ-$#"/sH9Y>M37?<MeX3%9s"5NkUm@Of:j>"])?@;qK(2aS7+(Q7Q0%M"1>)`@l$uQi14$9i9@=YiF:^T$]D"E%_\-=P\VGYn@H"-'4nkGF<)e5gq,_;8B3fV%#^`\?SJDF#Y&LB?52(h(+8[&a\(aPPSo=VJj%]J(i;SY>#sj\f:dkUYi<Jp?6):%!4d"(MTR9@,lKC]'Z$*oTGcs2:Z'I'uN;k?5%?;9)sgI1%e5uDtcZ<@If&"Hm$pYQ`[N4LTqK,MTY'+5b<]$:+cJ%gtu2g5h?_>)a<XHis8,JBch[FoLqqOoJe_6f,H1$tXXYORd=%V6Dp7UJ9u$Mre$K\4HH%KdKa2n[$RiggC9Q)tHOJZ78)#Q9*VGS=_1h`BL"#HH;Z5*5@5'+4Irfp/Ca<4hcd6Zh)?7-hTXm>a.B[%^TT>)7i+\nIC7!8VR#r]bS>>fWkJ52ZL_'T;(aS)8MA>.LD7-Er[E;OWMAh%7l6Sr%F5gC`?c1=H*\kUcWoaWZ-7]!Den$)Y2:W9%d[=u-)YJN^TrRdW!FMR'p8/HUQ"BL3H_,S@KQH0fD36nu/:Tu(rbtjiE^u2d59o'\b?On=/ina&NY931io0V(/_;OA+3]kIqk`/U%Vo/(P2RS@$6cH9R<VBL??S3uY<r'(EZRUF;5:5rrm-#nkQ2au&IM+<@L)ci+`@bHnc(:O&*XNf'ntPXDr@s"5a1oUbhRP!U8cC`m%2'Reh15;]MDrpNsJ,H!XW>iVF(OimFa_B&D*f'=<iQk?/i4CWYqQ"#diSs@iUt]_sdB>j7oMtc3Qt\&$:<Wr5T;fZI75$mrT(sT%%d+^$OCE3AKnHZ?I(I,"EbF^o0B609>D]DAVS\u0$\+Cf*Lb6?ngq7u/LP@6]L=e(a/09=X$"#peaAT_$TFbnVqU/GZIjEgqNtV+?%RDEshRk:/&*^5n,6@8h"ErO3'AeKg^8*KT=pR5PPL[Q'rB&\LNAbb1,>*;tdOh[G03b@m"!$;eUo:]6\kkDuq@]Y!(>kWhWjp2?U%*dh?D\;SO'FUl\Wr&^,lT8LBY+%qrrHQcYj,f#d[jr@LtM$dfLV(bh1qbE&g*n.#7]g(*jGU;GP"2(+N>f6]7ne^ishN\,grq%5r%eE:dTgljD"0WC!/`>Q_2n:/$[B(8Zqp_CF=/[a?IUHIGE^HJ\7>FAafVn:1'O1JE'-H!^ck7[70L[\(-V=aD*[ZX3M\5pME+%$36%EYP'GV$24;(;Cca*i:<8D$NCq_imTr63sm?>ADQZLHP<Q;9mJM5PJFJlL>:d:bk5%o<<JUE%!pc54kZ#:0^M;M,%Si&La"?,a;X2%bJb'aV_6sXpnpFf#b2=\R:]6`bCa'k@_#YiV/@SZFI*dBC$n9(:!dCbd6UN'Vq%?b0DgfCJ\hqIpJU9QVnlhl4qCTjHMU#N#U+ss%N*7OZ\tCdeSOPfd85_+9`Uc<N2N`EnTZP4BpbI'bOhW@^^+PQ_IG*kM$bc'd<h9M2:s"dnoV2JW?e3XYq.fLTXW)o9$_uqC'IuOh%+&Ldb+q;Ff?`D*1qIoR#]'q5_XNV/8Je1!%Y&tF=3F>Ip$A6<J8(o`h>%[nlk>c(o-iMQb(aSo0JCs0;PeMCQOH=q+JKA=[WOEYE%/6ff-Y46d7N"+571'-n+X7Eg`eats#coc659?Gp9QhN=)Q/6%lbY$jY2,c^$;bsX[/"tH5rZ4]<Y^h\d6noduqJ)ZEe%XVnBGOSA%]5:V8rV<tAh+o_n]6nKi>[E[&Q_([lc,B-HU%[6:2'sPm>l;b?4u>1UY$>iJ4?n'/TQ;K/&?0nEpJbCGoR*UB1oe$;?plNo;RkCS%!u5_r6*QuA6CB[Vihs=V3'/Pt#.H`P2%T!#/7)X`,N[BP4Fj&u\U4W0UjM\_lckJCW$kiM=%,:dag49pb<C#WM0ej[Np_;MkLa:j%;2GT!I2(m;TpA-^1;MmkRd,)pB6;d530W)P0!FshdM'*`5P%Dp(@[7W:VK\9DUHoiITo9<5](cJ.X)d[-fU9J*Rf>&Pu*fGd)i4J%C+.6'nu1$F!f(/Lpp;0Lo&)=p)^i-')GM4_$',,L!cW0j-to&[_Iuc%3_e+IJq5@Q0F0gud#a6Ki]fkh+c$RZ1%@=QkUE+CR6jNo%)%DU&EUnNu/!HWWkp^+&<R!s8]Stt#3aN*J1:Y!.Kcoh,@O\PO1bbK-j@J<6.=Yf'1?OHL#+&E'Q5Lp5ZWn+uAGf)l'g\kt8U/I@%0c[D$l<KNcV6GiKB?=CPM3TDD`KDI.,H]0-FhTRSW_QGt?C?I\h)&]3UpM8i[%f&un)C6+UuJs6Ei7n6c)P@iY/QqD-#s3aE[$RK%/h7ILUgu)h9LfNB.B-<WYiHToE`d`X7i?Ki8-._LaeH<`)r_#E'K_Qli%a*Y8NLgCIhD7p1JR?Ld4\>SIot+d$+WXqmd'`_grdg.%c=#_%&!rK#QDTEiDoGpp!DVR&?KIZXDS;t0f!61;SksQ*W:]RYPtY?A8EEUF]E3MGV!\JXMuj+@^46M"WBrCEJ:Q`:chkNN$bVot%;i-^)=ujV5O"PAkTUemb#7)r#EdC"t8s/TZ=1gZmjj[E'Xa]\Ud^[U\QKR:+W#"u?T8q&s_)mj4MS"BOHk?MEYKbt[9d*k65)e]2%NAZB?#S_Pmg6nt2NPnE_r[sO^]=9@tb_)NW!-7Vpqg%W#nJ;%5EFeh#@:aH-T8TjZNR*71IZ)@R6e"/?Y`9]bG9Op8#Zr9js5(LA%IbcUpYsJ='gud%'Jb[tNF7<ob%%2i:0!@;Q;E,@bNC;Dp\XRX0cXX"0pqt-I^;f#Jn8Eq9cm84N8DNm8BQ+R&58)f)`op\/"e7+F%qgU'#i.H&6+B/2u"O7:)>;l'ZNnTJrn.U+#`!2WO8mEkuSM[Um&D00M<WZ^VA*PqM=#'LO.=6l6#;sBi,'0ag@MVo_B*b+[!`6(\%+L4iAJ$&IK)Q5@V?P[$9]hnO2PnAn=kJS0ij!BFh.bp:1m&_Z)V@-9-O-LutT=;eCqbRIgFLfHqH6jbd3)W1'5TksMj7IS0-<H&p%a*[<[>ah`X)6Y_hMQ;4F5)R$#'A_A2rjJDP\NGqV`;kD\m*4?m2]g,\5Yl^!0`1L08dndl3`WfYb`irIT6"CHL9N:aT/TOqPc;#n%&nemJ@0NEmq;G<Z>l4Aa,-r__C&,g\RC#J0+=@5h<,XmnO:f#me:(9#*>%`Yi8-D)i[J067<]N\%@oYhIjG6B7/#^4q#J:P+-.32%9s.@XrIK)_c^F.58&/nj=!6m;0n$u\?haZcZ*U(A$88]($VD/<I'`oBF&?\skYCj4hA90<adDkei8eZRs-%6T\"<[eC.+?EZ7Ls3%)NhG65(V\`$D[1abD]qE\S"j(?8XEld`\XHMUq>k0mrE!f\uZ9>No,s"A/&@E,ms8+.\XSnJ<O:H%$:,6Z`n$X2*:cd[RGJIP<on%>r)>sWYiG87C&oY5==*l2>MmqU`cN=Jb^Lrhs$dNHTK8@o^qfd5Q-X=7*gQH\4SJ-C=("C*1;(!5JG6i("5,`f3J;e`P)>OmhV`r%OT/3]/;<O(/+H,b^WC<WnTSsC<UG0H;bps^.&*t<ln3Bb?>QlB_p<]F_cGH.Yp\Xg3.9J6om8\Jp1H<Alq[&*2=;$`0u_>ueU`<9%nM$t#_9e_nQ!2\u^%g,/I_!+fnFUI\Me@+7V/C\qd()eYB(F\<"GJ<F,SmZNLKq0O7:IZ5ed$]icd!cP.TaBC]r)&VaY-cd`uqIA%b.St\-liDMW<L+(H+P`=:4?YuUeKop%#b&Nao7lSqoT#J<i]K21]*3\eVCB]#"oC(=S(`8;YEn?JF4$*WLYgP#hcqd+^[b1UG;EF%r%`ZY1T?l,m)_qof;Bth6gFe:'?T!Cd'OJSP3V^$^[#03,"5+KnWaK1I[FmdgN7n/4A8XHpihfoh;"%[JuLTN)AhB2M0/LV'niH/%Q+LgDJ(Ju+E)@IJY85ejg"YZ8pnpaC]'sYcH\]7I?P98hmVD@*HWSO7O3DW]iBIf8?p(CBZN&pc-</mF9@4%](GQ8UG0-@]*p(+n%hhUZ*+uP8o^`=<r'i<QK6bpG4;oEd]Vh$(2$ZYoTW=sWHBg$AiZ=NS%W)7FQ*]IJUTsrIjT4Ji%+P5j\=dD,ET\nj*?%pq_>dJ_B%d4ibs\I>nnAuS2,W"C=,rV:'B+P"AM+nlI!@eT^+oN3j'N6=4K10S+R.lDASiU0q.54`9OA=bRDJdapaKh?p;,i"X?1Pio:%qifH%BkI&E[W43uNX\8Go0_F+,0rCogfMsCSBoSV75n!E`?0Lq=GH"j&:Tk@C:WB2;e-=j:p(J/)eT[)7!K:X&1K[)\Ln,Ylc\)F1YktQ%9j_6$MS68+<ps2,aS_^mDhd/,rZt0]qY:e+8ZKFM5nn5#HMXQ7-!ZCdS`%:6e3<&njkONiJCC2QIY$$>>C!466L:h!H$L;QXr;B9%Lm1R)QbT'5h&T#oqWJ1/hi.*iE\<R=]sDtR]KPhgl(:g9!47$d6b5*X]KAD,J@<r7ctR`)IkGB5AII(:dOBNp@2_JbHh<?6JE3r,%+GON#'j*BX&!5^)d7epYHWO@RG5"]V_F`F150aI!DqBd+@f<<(p<GWo/s#u"/=V.J'Nl.++S_cm=Ek?0QY7?SEq'*Dp,!Bk(h,e%%N[lM\r!&]am(/,r%We.)Ip_b"3q#V%d!B.uMsq*\!>+&-ZRM20/^FR6RYDquhaJ'0ba5m)cV74V3E\p'ApYudZXeGDq>Q7q!RP")%`HJ$I<q05IPJAihQ)aG]<dohScQ6Lr"Rf235FKi('r*]PV^ejonDS(A(^T`k#'!rT-*ec.fm(p]\e!d9*.Mt3SuFaSEQ45=_?W[5%^W'buZT[W&Q2R$a6+t@,=)Zt+d=Y<!d@#EFBT_6a^@UB;j<'YbPc`5[-)jl1$c_bYT!f:[[l<tb@s-,!)jL-1GWm0"^hi,Q0Z"E/%rk.e/jrV<4lLYQ7G1EW6)DAS\;^@'2XBXs`WtChMc/Zk=;Z$(`+?p>VWslAR@k-s-m.q#hHD'!$f)\glh:bPb62>93,$'?2i,YGs%9,8DGcTcL.;u(YqlfYfY*[2V\ZrJh@mP=J`6%_X"U\p`Koka02GIoD4q#+d2%=1eCNH1ff(qW86jmflO_L/TiDg^AdXVlDgU)Q0Y%llj(NkAGo(Y`RZqX]EIYX!Mof=uk-TK/aZd:qFp$og`Xprqp0DLrWVC1]9be9'Le2V>cUI'0:B;i@>b#-\([PG]q.]0:1pDCD;bB%YRE_4hln#W?m>7UC7tNuOFCKf^k;lHJ8==-T5Q4+O-d+VZEdT,@ftZ9S[Y5sMnme-nab]<\(EqD3)CA!qu!'+R-:^kW/nD)TBb2O%4+/'].mS&RXd327pII=1lSl5@EBG!NU1'k5TFRhZ)u3&,^2Tq>P&.jt3mHGinN21^ctP.9ECi2a[aIQ>M+^a`CZ4jD/]bfTlfi=J%=3o/i=,YU.Ri:A`?WsriFpm\G0fXu3';oZG?[DN/0?NHMgnb#ah^B`(eBT?bd0#U@WF3,f.9:pi1dA%GEcIA^gQK&(EVL`sng&D_%p9PXX%o5qFU4]1mp^IS5Z"iusK,[2tMEl(jo'nt*#(!A;.XnG*V>.]K-rO3Dh0n^/>5RA:^O`(>A4AE$qbCq'n9Z59I@_<,a]V:g%Ye=rWTNL>8GZ!fip$Y0"1=aNgC\EU-Ub"\VPa<1VbS-j>JOdk<r;=!L#-Q8iW9DF^4<BZM*G'-e9>jW(r-c6p"%g0:QbBaJio]"-%E:Lg:7B'ob3mVL=iV+jX9g[N;9;H[6jj(YOjl;]r8b$Tm*l=m$_u-p@lLRT3*H"nYdFh%Xng0As<Z`=_n<LScK9,(fQ#-kEpu8+)%$9t>.F-5E<92hD7f#%56I/fFZB\,>F)6sZY``I30haIsEm^O^[&"X<^]@Dc?86rSEY*A`t_WY4nJ$7#/MRQh2b@(tc8<69gi^N&b%Y/WS-*gO=-E"AK`G\#+<f($R2>5/m(f1n2kme9-Cj<LtQ2%,6V7%HJsY[`f=DOTmXQ,+%\X?Uol4aFfg-RS"N](l:'Nc$F`N3Y/E%)!Hm(&*.YJ$5;"#U8@F#V)D84,=Oc9_?8+k%)2OLjS=KYGp<(:c_T/V'##IN0\36g5O.Fr_SGd."*k1V]>$f"-o/X$4mja%Bo!)8%#N5%-G:G"^lD<26c,`EGZq')4poAi<e87OFe7\@%]p/*HPP$_oaup9h])^3o4`X$m3jC%qF5]/cFc55;]20jRR=H-_';K$1Wt;5Y%-&[4,h!&[5Ponf(^[Qjhp8kgKKDT!n<Y+ZID-5<NN;SnHV=41$:OoRE4cu*B*">^V_c'@hqF0n,Ig5E+o.0)4X\oU(q!+jBM,77^%'h^dg0mXsZi0IS$M^oWLE<tY)bcpmgRflGFI_c7un?.iCPcD1gi;V'cR<0emSm>]6082hA=Zq1lQDZCk6YZPn65<kMccpJkQgW;<%>[emd@?5:nKh1\CnC;cil&l?AfpZl5>Vgf+g1!61=Yp.Npmd4]%5JB(A;auDq7qAOLW<B_R)YM3'X71QC2jTbPH.NWi]5!la6QVC%7Uq?eKhME:r..'_,C'*rW($P@J%p<A2+Cb@I)JtH+&PD$+%OpjS98K[V#9/Vi\a2OlLE1:[!-DHZqeAU#>?VG+E_rEZjU79.Umud%ro7qoSkI'o\`Y??9EhU.OWKa6i6E;gmK2!0F/@%(a.`l<rm4kfjDnj'5H2fabIrKA+'+ZS<[(](GpiH!8DpsAD-fV6p\AplAP\Ve%*_$LLfI:OdoGKXaS[l7"BERS$)L^_q=+q2.jecgpoPn%m72d9(*%Vi#$7?LomJ4f-pV?uH\][cr4DTapOaC`cOB-pAe(<c^nQ\j#%r!QlkG]&1V^A=Y=!WUj=]+Ir@/<hms;S]#4eYC.%r59F$p\[dOhlCsU1Hd->:;"Ks6c02/b=bjPX)!p0nqTC7r,58@lA<b%Zhb8#%)I+NUD)lj,aEjuhBk$5qlK;>DjI\l:cOmo%.Gq'5*sg<CgT[cIkt@>B]p@YI86t)k61oGa(`qQ)(p+kD<H(,U7@G7*$98cqY5tYc%l7Xhh*6;k$Hl74Am.J7h6_o^mfnh0+laQ.Jh?YRYr7l(=HLO'D%1.DY4'XYW42%F5dYA`(2+;guM,d"^WQT'2f1YC;`b%r,Scp0!%*^=_#80?/=5pN1uP7cML/%9m_+n-F@^#(XK`^m:O^Ag;1:P4Bmhj;_pN"js3osp+KU#RLVUh-QKqg3(:oHkNE^ZH:8*E'\)d?ac"%GS:-+X.I@IW^`)Y&!ds4d%&?^O09Ni)HmfCS&:H*a(jB2WU(Y'kPD`<#4IR?UdH<(ZS]_PeTDiVAUGAF<Jr[p?[Q3#,,>eS.:<`&%6nR\L464S81qQjgKl9n@+?f=__E.76Eoe5^62J;h?"h:u\.>-0dhdN<d)OX:iB82Qe;jP/ddg"kF?VYlLe(IR;=.&XpNc5t.7VIO%h:HBY.DeF6HMG(-G@'S@.CDY'CZ5'HBmG%88=;@&4O8-spE;2:CA]o\"J,I<?[KC=I(j?B:9!iod*h!S0132bog>LPYQEpja.#:C%U8LI!VV7I-M=M7<T!,ED61nk;R51P8PBl0M]c,KcPuk`3>UJ^Z9>^Jko4(Sik-9#DnoT.tH%'bC0Re=>]t:qb:aj%5H-Wn%Z^I*)%jQYc-4dC8J(d:Z#^X/,iA\nWcX&2CX>"7)8o#LLlf2BWLl)F]VE;GsP4d@Hsb6K,Mk(C=ggXU8D^c1/0T3gX%J'n?U@/TZn%P71C%7B7+XH2dGKbV!@`aj]eK1c"DFNLrDLfD3%%KY2(cZ1m1Wbh_T'[sfDEI;&,WrPYKB_MPQ9`VNB^jlO<QhtZRllM\ctkPW-bWV>qk%pYbdNT,Be_cdT"#Q^>tRqYfW'FT"4`5JObRO3uE6,rErU`XC,)YA!]QopP@U]r.Gtr,dp-n2q]sAflYBjmC8CE&s1-^)9sL)52BK%#AYumqH5JmTio5\1fHm[T&A]:m0OTt*^/J;%u;`?]r&jM)H`\?FVK<@4H[f&pd.co"F2S_Sdo0cN@`)I@#eM=-U%f+T2mr(_,8Y4%WJpO)2Fr#ni8G]@+P_ffp#c1&nYPO`1"\LTW_IHpO@AI7@SDBEcI(HED>2Ro\\O[pdY%*\`"XY#cLWtA8GPW/Os]Ne90oUEqYXcQ%[,Qq3,HXr-cSACGcpNLF=Zu]E=)S`"b",1`G;W:$EMOrMD>$_Y[!-nFW#u6p-_pQS"g*g#LtcO]8@dnrF/0'&Db;7>>-p840L6&n%,fC051SekdUrXLY:asl(@ZSGA.Ip!sc,^i)O:q"K44j(6h5\n3n22nGr(C:NlW)8.^RN-T:A.D.*o*PS%f4FOXeAgm/^U#!D>AHs%VA!6[47!L>Vi,?-rU?k<r4d;H(l>Q(`)gjEJAtZ!nXhU0Q+k*1+V\!uiB+G0eW3!ZqHaQh\D)4Q(hdZQRJD2(IF\\Nk@6aTU)3cL%-mK#_dTg7i#KH@=UkAJ-A^lP_+;D5MacsH<Im>e>rjJ38;K],as%6S8l,pOE(c$4GpNl?oL`&%#L,cIXGm;5aVScG7"B<d^EaOSd%O-/O-"Yi1l0BRmjkQ[k&;J^<>$KHUA4\<?l6W$qh3^YG6bgfbf7*#>_WFKt$q45p"25BuX]]pBoJ(d[eUD6bZO$.i'?J2Gfpe'T`%'Fu?.>G!'tp*=<G/Ec>#5m;"m&^(7.K/p9M]FNS"+Vsb4qgEM-=UJNX'N9)(P\qT=WZ+glN:&ESPBWmOB44MYQPHcIWolB)dArke%>@FBu+O=ApH<ae2ebCQ?V>!DI#/M2kY]>"?3b=%D=aI\_>)ijRp+Z@+<Ln5;UKn0pd$I4:gKZ31VGguc:+g<$9hfEB#cZ\km7D_"%AB8R0<578#=(\;k1!Qd$a*:Y)C@jMKe!^T4$(5IodT\H+d4hjCCA==af;$Ai?X:?=REF8;-B"BihMs9s.K><oQ+iNO-EQ4fO9MjT%o[Nsr@o+:jRN-.@_bB`Df06/33flF=WPb7]0$BeZehUJ;PCLNYU*mrsd:!QEQ4nO9g''qFLft?;YmkrQI;hWEnj_tY)G9>8KfM0d%CGI[-QcZuJ(WMXIkPYTkR!qU`HV'W6Ei*%RGl)r-WGA')SdP&/lFsQ\@C#JB28%SBBXOk_/@iD4Y4"'Tg>%$1Q@0Tta(%gp1r#FF%OG!]D>H*S%JP-7CILaVWPSIcekmEljFJ=q8XaHEu^LdZ:>WV'62j[5R.rk,4^j<_<aa.2EY>\hPEJN)S1je4!Ql44g5"W_ogB5F%%RW_2YBf4Va'GE9,,,6mgVrrjoE31<].;eJn.q?PDIPdX-`^Y$J**Qi8p0BOuY?g!B#M[m4W9PVt*Mi8<b.OqKQQ$(MA2e^\-'r7N%Kf3Bc^,^>+LODE,dC3AU:8L-tRRT!!94jkG"Z(FDYY8(@So,[h;_f>MSJH0"&A<"m'i"&5?5eV6,D.?Y0JlZ&V\ZaE9MW#QjV52d%%*<,hDj'"W;qq<2E\dhF8W@es_cteZI@(9GKOG+_6ZRH2)Ut&[5isedaSe-VP6-:1*H)kbS'LIRFaI[oEgK.f(RL#_i$b4kn`862%53@:`6gof05Tl\!kltU(XE0qE1&7G_lAIiNG/0_&q\:Y7SVjpkfHWjWLfj0fLc&,3N6h,o-f@OVd2+;<;7Cssks@&]Af25^>QX]B%8(OFip#"@V,j\A8,ms!j@L"@8$cRU^3-k*P$%VM,9lD0!Det(Zf$*\#l&G3:eR&_,?!`_bK[U65X;p<b>W,_Gp.4u?S.`i+//V#q%^.AgQ/7/M/1!A0^3E`1;244ZN.ufQ9;d*9!;X[4nM=:!rE2LT38DP>)8NY$9,NCN9PHse527/iYC<[m%NQ!e2KW3]haNLF:#&_9?%WETm^9(jdEbso$PpKlFeKO!)uI]5,L>:G*U-",-R]Bol6SLelbRlV3i(/ZHaR2qH==lPKV9jPOVd[o?H=ZnXDjj%&p[%%OsGj##3%P^JPUk.J,Ql82k%JAn&"$fNi+Hn,7fmAc?X=H@#p47Xk-2%,VGg>fMpUCAJ-(lbgKNoB=UJJcP!5%h(Iad^*!d-dmmI03m2*Q!ep%W+LMj>NEdl+&\iAII/`HI:SnbffJYT`bMsHA%ourk!V<h*Kj=^I_*0]n[YaKJd*.\IWLK\Q6?:^fRlXt%/%6_c96CS@-3qBP-&i9%K7nb0]6d-R#S@s[]?:,dO[e(lp?srlBL]N?$tjdDG/'Z_<t)!<\oj=8qTJaQAfm@RB'Vpm?mh1Q"Kg?<2"jdWhbkGO%g(Z_:j8k]%l+mT0B<IgI9ET"l>Oo"g7S6_,^i-)^!SA_k(<aFkRXLcEIel>`b[8(kcK3m85s\!N6I%EH/KDGK\'\ks/eX\FO$I)$L7[?"cFYYJ%F3-.ZaUNG-0X)"mITEm2/ESRlf'mYqs'EU=Dnjp?mM>>d#g:5<aa21f)?MT?iM3A(e3k&PD!.<]!EQ.K[(@'"gcVEEBZ2$:naA>3%6sI0b'mhe.mu=!M]XDc!=[Qt/-u#(B_%j;72:U;GF<iuMfKp1ng=_gpN[(7N58i-@`E&uL:FX=<9RQpYf8"'"WZ`[S9'_E>$5RG?%8dCrjUlthH,CsspklRfn>und>f4l`mnN'rIU+K(aU*k_:DRFfuU4DfEMrCFfQFB(RV]V),O:k<3+C7+H'K%R;c_b<r1nST!QoYV5%+O0!.RX)RGX?T?r7S3p&"d+'/BkSM+3Bcq6!)UFVe"U$4NHT4OYbbhV[\]@TI'VGNJ9E4N-Ynb"=opL"0ac<q`Sk%Z#]rC5jGB7V%6!:%</VHd*aC5WME>ZcjE!(LQDmT6-NY7rQc^tEAN2q4Ja[jURK$NK6:CWk;"l3A$d$?P2eeN9PHJQ8hcFSVQW`jA*)ER0k3c2:_%p,-sC'm)(sIVS)J/*M**Jm6jR=]`t\]_e\%Z`]t=V`XTK6YG3c=$Q)GL<dA^:7[*nV2!:,JkksYltbgl#Em=^b[s?$[cJBOo1G\B%mm]Z"bOjAHkB7*>diH2UH7>-2\)YTaqQ\;%;!46QTMp9&ZfL7qI!)(W8[FE?ZsI=MIaTe2YS\qP+GliKj0J_$hKaS&K=.nQF$@@;%S\-p/\o'=EIRrUdO#C]+M]o3hbb=CeL.-1/FNnl/-.\Nk4e!0_D/^2BaM->9OH7h=p?'HL;8Zk;c),+;]$%!hCl@,V-QtEA$qg5)%f8Qt6lt3nIUQ:RSMqtg&$DQ(:5T#E-?$0gq)hoJ3E]!s(q\oUc*l3Gq[1^pUfT^M5\O#>P6_2akGd9NmTF-!NRVs%G/SNhEaE40i%;mDA/BaLP_CgT*Sb?"FKqUCp]i\7a2-L"Nh$Ac.FYo4t6$i>p`_!kJ1dlO_bV6rCi8KFGrV[FK:Zg1Ub:Dg.Y>U`5po?t"io'F5(%8/AA8;$J'GAUXhi?91UB-QLg1J`!,\Ddr[IJ\qr^phX_TbaCaq_^be(9_QA,b0GcfA]c@8ZrUa.MS7\2/K7R2Hn/af8W"F'>Dd,.%^PVd?6)S:+U%?=5$m<9b[KVVaW12p$/aDHig;48KU2WdV+.G+_a%!Y,B1EG`(mgFoD_8A4&aYp5,D+$%*us_N!gR137P3oh<EX#L%R]&m@[ToO!SItI\a1T@8?M<d.@D9^Z@s_-`W4o<?7h.&qV/#tN'DZDkcMU5qIF3mdrQ'&lW`W.RA6J4C<VfBI8R&9M8s6)_=Wh@M%Fj)A1N)j=:Igh(mFdfb#r@q53/cAG`e[iuMkHYti;`a/eEO78><S0<@!P?K6dimu@O\n-n7N!)%+gIM>0rkXCB,MT!e*.@"i[fh[%s)uF#IBh.1ACr,8AeWWRaiL""QNt-p;S-n0OcfD5Cr1qs`@`#Gm9KhdV/Q+-).[9BdiH`Wco04k(fUkM^Y9e@<j1%W7I#'hH(/>T%9_/+;0Qni2*>[f<D0SR@m-Ks)G-t@aT"=UIT,W"6/C,sC;3Q6J:KsG.E"ZiG/DT?9Oudi&7OMiV(>27s=urn`+ZZ*AR9_j7\mS`+%VE;@s<\7ud=1?jc7`,n>QVPlm=kD1Q2U8U+f`$C,0!7#18<oX-SK65_b_JC<Z#saO>G&t\L<aB-IF!>k_iaOE2JM]Plf#;Jrn-B+%E5nfKpK\<=dg9$pol)f:<;0?&LNW15&nk>WBD=nle+8.Ff#-`J6V6$^qlPW0q!KO3[c_rr#@@ei6TprS?.;C@p08,@&;urml_$qo%[Ms>"HEjb5"$&OYWVaW<\Sp`n9]XnVM="jRIeWDZUkB_ZKX?GCFY_V>%PNF/$_B9pNU2^734mbo'.E0dZgeoXH]<2eR1Ri>G8=cI%;@F#Cnk]X^FWlc7#j'fjN%;U8;A"&XFRAMC9>DUm--&E7R>PG;m<OV1;Oo`Vo\P3;50rrn2.-j58dq7ZY8GOp@]5"_6Fc'bD?q6R%rH.)'Bpg$K7_lC'R'HN,RMs]0f,E$F6b46QC9r&ZXTE6;7I&ns.T5/QpK3Ob_"LilqY%OVMH'Ep^5n0$p;'b])N(kY<.M<=hGi$`%3Vob3m:ZpGVbJ[>SUUiI*>0<`lb`d5n^5i\%iM&olD4@:2).f#D&0uk?:ui'1Y#u^/VQRkR-f_Om3K.hKelr"rKb=fPdba>$Fa/C%\SWdcmMeQrq7ia?c7l<'pJNuWr0YCs%.'l*<M95<Z:3`9p41(n?\I&.A']N!TGf:>PL@M&h]?m$5XrPr+!TUYLZp@s*uWpOF$X#i%?AQT@D;eS:>sMD=CH4F5('hh'\fj)p#ZZ&t^c[DjTNcGPS09seXrkA#1\(/7PpjA2*u`hb11)QV5LQZUZT+adhEjDLnQ7p??SmXQ%Tggh$r=&5cX&=_E^-_Y[Xk[E6R=c^R$$!OXPtui_.!E3d;qGKPJfVLf-l'?75!7HIkpoI7==.$mI5WU!HSV]a6T=Va();#f>&=qK%r#rXNqq\@+c)/?q`gS,@f4pd!7@.b=S(1sOZk[bq@^gZR;'FJUJDmQ+AYf032fq@JaK37=$WpB\*L,;U;l!Cgo!E:d']$gmjfXN6%B#SX>X(&O_hAg7kp@(L:\oo0fpL\Bp2FDe'6/LqN#?.Fka%E3*Z?B6/a9N*K?fGpGX'e!NW#o6:FT%$.k^-4"_,S\\`)(3[/1IG0%k5<Hf*Dn+Tnei:oK%699gEX1R%i35)%qt]nM@L+U3@jJglb9C(bGARsT+YKmF(IP6K$AR=lZ4+foX_N$jG`Mh1]4,m:,g:3R"\cA%kh4P;OAhL4ZMBNjp0=6O-#tp,qY##fSE]rFmX9/$<nDLc[W`0?-G"i)PaZNiD1@&*F*X2-I4sLA\>uqDkj1(<Roe'URto[uRa*;k%:pP';WhqSPV)/*7bV%Ff7QEa:H.fHkcD[%HLW[XH[]rP&g2C7kV^%,6[X(a"F@Mp>^C[\j24[T@n&uto;GCf2:SY4\H`Er!Whn23%N9m7,c7%#5r@ZkhWp,I_m7R#^YA-+Vmp,7bRa.jt:4%/++4YI&7N8Q1?E<=LL8=jTna=qL7dK7.DWIBMW2;@S5JtrH4&sb3K<i0h%G`-;tF5M#1eT;a-D!PiIF\q:+CAY02gQl<<<RVgS=K]>=dhr2%[FKW+VDA;3g3Y]Jd;I([)>Kc'l&9BAo[3!meT=:BA(mK9I8nZ5%e^E^LbO3o&7`<[/QF3&o3X:pTH`3etWhm&3O)OamnB>70irDo"^Y$#TMrCm*bbLrF_;-*V$D/;R$fYIYqn>+d+^'+->MW@nl!69D%PO6W')CC`KUotFrGMlR_@tEW;.8V_#H8ZhoqN)\r!_9`CD8]4>6R&Eic5kE`4/J.g5mf+O@mR$,;sDh3EbQaBK>$I<L"7Ld*4*)p%bc.\2q*fKHe>sNpF/Su^Pr"bSo5!d<29^c,rF)VUgf[Ts3@gnHoM';jo?#u\G<8R`@KdJ#[CF2l20VeNMAMahpLBXh[(,>F8Zbn,%lC'f6p2-"7^nt6Xp?XtbBJen3^2l0Dgfp>g=mFR8nZ2U#-(%lY^N2!Qm*a9a%,aqWm&4nIS]u9\pAB1bT'+uu+eA#R?^IMp6h<Yb%:92eS@JIMU,.f[+rTQ>qaUMHV8$:GWe]4PAcM6-jB)=`i>V3P+KaR\*:lYFEL2-)H1fVBOBdfI'c1S>?iNoM2%.(VAJt\Q\%c$1%%%*j#C:D5$_34hd*L8*/QAsL7,-bD&dqncNp)qah;[IP]&<Kbfm:0Uq:k?eB\^^A8E4?R\W*s#jkSIATQ/lP[Ikm)@,FE$-<KbK$M%[=J5Z272U$BsNT6:!ZYnDreK6gm#:W)[qk2gfqb[_pl&T@2%=$$lrV1A7,.W'&;$..'.opGcTY8$tlnm:6U%+eilsDmB#sS,]7i=%O%qsA$Q1kXiC1I^E355<pM4!$i_U&-]&?D`Y;EuRDC[GH]A[Z)H`K*9iQf:Za*6>+U[kZ,g=&cA2WEclVS'Ul-(3S/\+-O.5OH-b%QfR5%ac15KZaoN^]Um$H^Z!K&=3],9Q+[lTM8qKtUK?W4[I&U49eEHiH!tReTOX?EE"I\;.NeC]=Sqf-<8G:QGHM4A9s[tlhhV7l%HRPsa:o&_=f!1T**:rX9WK5W/^'SLW`q6c<ICk%uca:<YT7MfL(d@>Wf2CH%B)Z3VN>pfKLoE8``EHFqAm<9^<Y=IFCfd`sC#Jut%o3j28<'E<7;`cF;C<^n+qt>"U.eIgd`$F4h]WSbpU(?CDGpC@k<2<!SQ8(C?$k(I=c7q^h$;haHim9E-2K]Gu\Vj0t>k:`UVI+'l%r+8+f6G$r#Qq^]DFN9,49RfRmQ3h()atPidN=W@=I`$>M_=DK[h621l/?m6;<:t(2d@Mr)0Vtgr[]4=IUmHt(>7i*-;OL\&0V=ub%?;dNL4A.fK]Z$6.F0kX>RV-\A^3NSs8%XIA5'DdCEAhEliUMr8_\9@L\pN)tB;8P'H8q6-'rS`K>]b1ZWiK8o;\'[*l/%dBiPg:u%hG_a"Xcp-r>NW>CMh?%'Ar;g&2tOLJ86oPB&"C.&9TShplC,>@TL,Z\&t:OPTnOt?TtffOHhs_4R+2*Upe=E1k,V;3YQtafL'`6R%1033kV^o[6h6*ZHl)RhGhjDgP@.gpWdq7&Cl#Ej*dkaAF2aT"Mqj+n/I53*&<P!X]Qlo+(24#-EOksQC.Z8\178k0+rZr=gVUef*%\DN-W5Okh_K_qn6#U1(`PCB6oXRQKiV^/e6eS+@<-d+Vlf#ZQJ*LdJ"YKQ0J0ftsf4[3OiRpV*-I0IVVL;^_Ml.>0]8-O[cTJeh<%@oh68o[oaq<kT8C%p!CcYRWE[FeAX=RY.Fm\s_Zf\Co7ZMZPU2QRB8G9!^UQ.@u07`(s;PF)H?5Vmsj29tMQ_=joWB*#%0(.4q&c%[OMG;cP(4F0,E`XZ=H)`B4J@7.QUki]RC?km`RGijDq-#5"\SZ0.h4Kpq(Nmq.a.@Xo=olOZlBaf]@[`^$VC5q^Cjj]8a&W7U+F_%Ib/nhbd.67BPAP1Tg^hh:@#l8UD=!Vr03M2r0Zp!8;EVuX(L)k2=!7aeM&"U[BCG#5s!Y,1:V.HArc4)34Zau6`_g0O'NX"lnHD[%Y*Hh1L<pn_W7ZTB619l%7cM+=KlPnLO=[rL^GEiK+k_YM3sWpnDHp[_kIbN7Z-n`blX,&(^?KhO*-gN/+g%;6g7]3WX7$Kj3Ha5i%1+rgdC&Kl2(;BE.A8f]]&CoJ4SUe[!N([A\CB;ZQo&!.iAp_:Ro1:_7U_p^>MK,N/f#i]u]gG4p[]'=M=p(]fdChu"R"NaaqPo8f%#huXp7l>g1os_++e?>KI%A<!>l5!BMehnF_qdNc1!U<e+1r<K^#A^b7]A0>T.(3t-TOpbHC&lk#XA$a@bDghJ(jV#h5k?.5F!\Er%8i!!G=m<SsNA'DJkXN"_0BL[>QM'^XPg:bYYl@Allu-Fha/+//7eZ5):8XBKiLRp3DSY#d;Egj,h#8tgZb.B*DjU#T]t\TC9DLDI%"Z3.rpLZ1ZRsRZ%_'ZYfmGlqtk[)$;<-%BngJGN<l_g;B^9D=0e$b#*qH7Hb$u2lP]%9`uQ+C2u[f&+Kra%hTXH7-A^>ZbS-7^@u%l=]g-W(laRF2Z0^hs4p'1.7D<g?Dp.#F/P@\CZd@Eg`bFAc&dn]meO2>JIpn]6jLXDtVlM"qZE6rN%AWHpVuIHi4A>ani(#>MSOW%IH&K3>L6R=3%[?M/O!'XI669NB5Ql%0$bU,os;B_Do45)RGR7B*U9)`K&69/5GM.Ub,p+ShoE3]RWmrhqH62%X1sF:rN%qW<%#8$%]%>9>E7U[+FfTlfN&O_3>Q&ZQ1MhKChtf&eorW\k3Mik$;oF%]XHf2HB=kUcf?\E.7WoqGPdL>$Ib"b,[2#[qhs72>hcdYBDs]Vf%>Me[Y9gIr4[U&@pZ]qkE`6%ndf?\beG_>ngG5-rMp--4HlQ2"'p"R-J_t[P&lRcT;e$bb%lY#V,PFD7%n+F$$eSdZPBm/Yq>i,G7%lY!ogX?T.XmCdu"\,,K2+5[9X1p$-*g\G>?nu[@f\W>&pQ?McjL@ool2S"]@VdXb\f5IeD6?B3">VWVG]m__`);aYf9i]p0DN60,%D0W7VQ(.C=$h=4&me,=)h5gLfIa74bGJ2U(L>q]?o^2)>g[*.L_7b<P(W4G*qJ#@f<pqMT>k;KKX.R@4c8N8ccU<hNDSV\Ug[\Z8%l[qrJ3Me=roeS+Zj6S2V]]L[)G:&S:hs7aS>e078IN$25G,sLQV[(cHqH7lmb@-RcmTr+na&(Vah!n]8l[i6X,4B]YTCo=8#6*7U%p\J#Q6,\Q3a1ZpsI@/jYp!^(>r`28,lIl^8os6Od2H?9-n+F"F%\fkS[OS%fk+Tdt%%5b%ob/FYmn0iT_D"IG^+-OKG;2h2g%sX?%[VSg=a11W0G5(-$,PM,A3ou&1Z[<o%/ea==TT\SN\,HLBWX/4k?NVfS,j)^rZ8LT3l;V!3kKG.5$%C3=@hEYER!lW)kMgl&nT,b@%Y1gU)5:H`]?B8D&4Qjn<-We$?*B\i@WM@Jn@F70,1hsc(cRe)Hnr;@A.l$D@^9b`'l^u@L6P-EXWkT&RH?T,7pphE(mOPQCeO-AM%n@)ST:uKZ@r6NWt*]j+cKjM(.\[UPlc0+GUk@!#9`k9gKcUm&kepRf1TdtWTpLmf!ZL==ukOZ#Zh%P1>>^;_7bp[\^jg%jR3m1@]%k$sgZ*)<]:b0BV*Hp0NJbZ@"Hhng2Dm\#D``(J4sD^goG?GE3\n_g]3Wq;Bdbno7RLI`n5qM#>K>SgXPRTV2"0BHH@SBdtCaq^$!%*^O04pWf..,FWEGg`M*>4O6dtCX;&6A]SPfA>ZERkY^j%qc#dPSrE6sHD>N>qeVe#3T9aj&';eaYY8u38>:;*#M:5"?6#3U,G+_h%*B4oOE8H.[\X@6pWLt$!:[^i<>=It5QuC5";cBcYRLWs:T*lKKb&F2tr9m!2[L<p=!nW:j92%2ND-%P,YP[I)Y0)6#LP0pKX=P@I%oa:.(LK-H8-N>&8&[B?f.[eGS+8tbcMIGtRm'!"Qe"r,TWQSK_ZstprS4T\Ar"Z0_dkJYGWkC)$C]?kcNB]`W+sQ5f0UV+hO?L3?%LgmTODEmdP@#0]Z\H)UB.$gF@T;`D$'7[FSmM?eI(lf+Lp;?YAHZXT1=`+CL0<).9m!&0!k*a,s0@^.6;j1#Q5u@NQi9eSrd)f_H%UO0R"5DlH_I&Fa?#F+L>jQQM3H>jn?1SlV0K=9PN_OXt=d_52`mE1J6.QE\rMF)/7d3QZ6.9*N.VQ5*("i=fe5X<YQMUf&Lgj!",%j=VMr>;uV9[PB1&&=r*6lf[dF+uPk.$44$YFLm=&q[LGN:k"J`c[-SF!t'1`KKihsfMuG&_Rn&h.!'WZLn6s2I2j8+Z0,:Y7f')l%q+QMur(Eh&CS)ZG^*gYlnnEsXUSr.Z;lVt9WjdVW]XfB92$$0+.Ho[j-gq%4&etg0E07dJP*L(=f5DGNHYJOS".l,u=I0YAPshrj%Pgs.CUXl-[f["D0SpD?[/-V114#`NW_a)]S0QH8>L>tDkogI2ug3E[I^!`'&*p\2-)<%*:e`sMEkuWq`+N1)shI23PCieR]V\k6r%@`)8>qXm.tUZm;q<Qg2n)>:kX:d+[EYUqCKbidN[(XL',lU]%#rL;<'n&eZ<<RrtL@o)%TRR:-B_#nR`d;r8\St]R.kas['i5-0,%S_]qDn7RdKH,<WY<DW,YE/q:o6<%nH0/2570i9_NmpAebX9*(&+OMOMF<cTuKe&"bE^B%cM9=qbe0b$bhejSJ^$<YtK0fn:+fT4<%TL,9!@Z$<"&87>N=BYT;"FCU)>)8mij,)hci#h2FT^d'Hpg?JeS<=^%AW!:*&J`K.IZUu#.'f+eInEtE9F=S5%uRagMMFl\CE`>8%S]_:9+/!CY`J`1o"eEh6Gtm1Y6SurH%OPc#efc(c[Ll(+7)^$EZ6?Th=8;2p;7T`MR)]81[6!CT%,'R7]p.<IFIrQPDU),D,7YdF%h%KN@\!hV`ip0"*/\*'rO1WM,9st;9HC"Pa%&1H?JdYVR>W"GU?'4b9W-6ju8N_uo">[\qRdgd3XSOOg>kmdXk)YB4M!jdOLjVl"%JhB8fBZ20Rl7r8(a'9Q&AF>TYXA<>YE%2Mfhm5Rf-#%f&Q!0gCZ,+[1Uf]>W3Nb"Mb):?'!cKPa$%4QpEg#nqe&%gB6B1E:2)us.%+Hk3:Aea,JR!fCOZ!0Q/c[Z52Ib?J9[.kPE]E2p/AgeGl1FjC$odh(2hoJ(RH%<p+XSlHj5bZhoB,W:_O$_(^c``^2(ob8kFS?!.%T<%1i(4igCoLpUKLRJLmpT7,B(GueH?gJUVB+bNVCe40bN_`=Mcss+P/uB0\NG#1N<t1lC0d;4,"D=^m6m=qDX!IfBDAM@h$*Eu6%%(mj/6i[jqQP/bj4:2BWguA!/`s:$o2%V.6%tUVC99HLNJP2C:ebA:DT6lD*U(L<f5e>Gm;%_\hDTk_=+TD$3$4$k:>i%=LpnP><%JC"B@TC^RRK=!6@,spCFfQ7Per0WjAh.7N"j&>8QmIE<1"qK4n)M9$uhkspF0bl\7PUQV!>M=Y$_nI5-[<,Wr2TdCGPJAdnkch9"%m\XDh+;-F4iK,:Git.M#E=3?C0s#r9V^$B.ffm*hX"T'4?Uo39%H8V;/Q7K+^u<*00ZCI&0e6)/F:]`cP^P\#n>U(0@W>5Dk!S]p%JV((Hp/feJP5buIrQ9V'V4X*d/q.P[$sYM+(9s9-jkapNFYLcc6$u)<47RUXRu>A@Suj7Z`O8MY7*T4f&CmOlCo:uH,@sL,Yq;jS%OZ;`M$mLb7NT0;bYp&3k';OYD<4QT4r_s&ooAN]SPf=n/V*sK.'\[4/@)_c5R*iN#<VImRd;ai%7CHBZDBp6FTX])Y95TgU/mjEO%UUY9C3)2h_pIq4>f/0WlqA')P)CEgt]Uh?`0^WVLUhrGpLSlWIV*L,'MMbgo%QGUi&CUnX5>kRbV&0KYUH[oYmDf5Drr*a,4iA""%P!<_(SBl.^9@@DIVq3qhBVcNg0fe)jkHMal[cHLM5lErM[U!58;+UYa(6T>6Qg-sS=G+?c+JsTA.k$68>+PN4s5FrtppE.U#J*^V%dTqXY&&(%a7s>um_%'?R'M];a3CaL'9p=TcZ-#4^dp+kR,NgZEKb2O`M$0oP8#1rZ'bk^3oidTUbC&P%#X[j$'WSO9iL_1fo8/!/%c^Ne5irhg/-lTloLU'(hkBIF997]8=OZqYj0bu[>A<SD>O2+iULG.QG8'/ZElF\$lhB3FYI%]@6<_a5,`4OYC+Tf<'8qG%?Vc*bc%2g9b!nlb`Z>g@B7guOT.fCH,]&!C3*FIrccC,B(IYp#j4jeYXR/Z_R<Oc[+p8(\l2[jHVM55<qtGT]"(-/6>u?e?j^ms/O%=/Y6V%Q^G)FI)egiN6'iE5)QLTVd\,=\1/U&Y]G9aX*mr<bH!jD1TF,OroO,QHLT0N!qHs?kOM"]@d2F#\;tTuKIS*UY)qc^V<qt6,)hY6%q>cNn*^jLjKDI;?4QVVV_uq:j2NBZ6>]-&>i:pMJL')Z"6!8hT==3L+b7!c$TT!k*(]S)E/Q3?rT9./bkIITIPEU>nHr!m25(Ii.%4h1-ZU?#Z-F,m*f1+9#r$Jq11j@g>1[pRA*B?k!d]Q8pM6/&+p3+Yu3lUK!#IZVJ[@C\uKAZ`oh?AELp/1.YdYj/n;ZXVi\`5H1c%mXI$q6o#X@`nea]1'.E3h5s0Fq9=<V4d`asXqOkfG>?W]PMWZ/n+W=MIk?T-mV:OL/DVb!/Cu;?T-r[<IWsN3]CE?tih$N;EY"!o%'BP!,gX&#JGJ<0s?UA=+4hOFsMdOtT7O<4;=q@jf1s1R0\\'=HHKkfA^BgG#cN##7IRQDn<N:U*UI@t3\me2[a_\SILuf"/IQ<C8%QD]R0QKfnpEOlL&2jnb8(S4o>A1rX*-<WK[N0^@pgd>fTp-R_VYMsscXSUL,G&)]or[!t/n@cJd\V,J34F+dS+!hd%j-.M*BckF\%h\27CXi%6$5<OM5.-$.XDVmRMDH&mS$En3"'q\%a0=+5d726<[m$Y5A`c"8upsRK.8Z#[Y"XB2`Hs<7.jkZ-#:]BH'qQIXNU6G8M%6nlmoj420ZKkQ^,POr<X&N@*UbA_nV-`bGW.M)#4RIhU@<orK$eS0A)Jep9!7ojq4UK!Xg(&CN0DjCRVQn-i$mL32/p!gK%AS(&e%!sj,^*^QVLD(JY(.&:ZGU.3ZM92eb<f+[Mg=IP[N&^0$)S$Ar7H1tu'9hcpQo)=TEWMr9D@;j06e5RnueAPH=B.gRSU]<=BP,)\f%enPCG$rSp.2$;"M:\L)>Dq:&RWHuF4Z_i;B3RXrG_XX:+M<RLY-%8?\P5*$jm*u#o8=hg(=$1KUH1kZ.M/o)a8t[(F>>8J=?i2;L%o/n='h2F#QGo'O(Bp^UReeqeaf\gH]-0BC_:5/2"(A?sfFCB8*&FU,@L6V^(&+1n;R@m4tT[kfkXCfm(BulWLd>6]?,R?BlRD_J#%n2\_ce.*%'*SHVA>]_#&kPIa>e"mp+?f`jeg%%Is[#m>DEZQNBmXugH$.>?]Q1gN."#ub03FiLHX561#:Wod!2f:]*j::5[U^,][%'&L`8"OnR2K9?^4W,QiJ%e^cW+lTk^K?RK;F:ZOU>o]*P?3LJ^5D[@%+J,1i3>ocNY<&e==dSK7U@g%MSOD,jP?/Z9>R]ZZNd,J#%DFI</PdJ.X=tI+?&du(4)Tj/ue2o/>kFCG3pNP,0\+53jE7nW?",4qe-CYtL>Kt0W)^r!Hg#c3$n2uIR]4@c-(D\MEOU/op6RK[>%RL#tG)jpuC0>!!=,^>ld*JjnYPou7*jUDo1H63b3U(IhHn/&g?GBe^0.MA6dI])K0*Ii(C>M^'dZ*W-EP5,+"bM#]u/@<;i+,X.t%.Oq1bOn_rL%JImF!?DFN!;*bU"?-RZ"V<GP#J;Za,so96C@a/.?]5XOle,\b;,a`CGo]X)[`]LY`=fR/;pj.r<7tD1&E/-Al*ccB%E7!_&'u]MY-6+oEiKPS(g3mcn&=P?;5su_E-_%gBqlrmc+PLHe=qEbM'`t&4'\Y4r$3]aHP_s!Zg"1ja,S9mI,$p1[b%3lf0,@O`%Tdq>P])+)?IN_3DAi6WV'<U<c>(VRsaQKh,MT</hpm>OqOa1aP"L[PP<*I?(h/4.T7UqO's"kj#HYKO$kpm&*nJLDV33*(qkd?F[%Oe#C%$#`!3SOI.6AL]$A`"?c#fkNA]-dE0%>WT9h=Cd/,b*T[oi33a/s6P>J6ZJKi4df$==8gh=I@n_1=S-74pO+f$b4TJpB(,V-%2VF;GT?Z6OA2[W0CN>:ID9]MSXSH^hFR%(``6#J#fjd3THl7DK[7*ZR/mgk_DCOr!e(s9ur_isSI<hZc9NaA$T@&tqQ:ug)ab4@t%#o5"0Pba[D_cmHUJWK.(ol+FY99\/q>$\BQN]1HG`4%[]PR8HP4'\;1mSA@BI-.$4c6_=oIT#DAG\MDu"5'eL$L1Pu0.*pg%AenG%W`Xs(<msV5*sm-I`KtWaZb=Q*'Y?;5!kC;%B>e/Xf+39,Pplmj/b'YK*Ch73"@VQ%M]f`%na-?NCK)OjND+,17pn-FJYsT$oj?4(%aZiRIJ#%Y0E,sO5,L>HT+4,.lY>VZ+Y('rq9$(,m$B0I5^.QLJans`jL3uulc;kN?jtL/Mptq%r`8sFW8?L=9Vqs[ZH+hSQkV$!n%e03\kpV-rs>5OrkgdSiss![XaqDTS-BdW(Vic4`<N`p3=QQPsEdfFY%!g-M72d[=*h;r$*C!Zg!Vbkjk<UKdukYAZ[h\PiIEVj0$%<""#iUB'#UC;C0[0$9`;s$-JL>/>]+i;_[e8fRmhrr[aU^lL_,oXC<2?b'P$.<c:lqK1n0R<Xs/@$'n(*T\`q4bb:Ib&\7-9mee>%,nb*](8;d#TMETWc,FZ)bpDAr^dOA#RrERW/=h_,/<t1p'?OpXBAG,V6n)GMTn/7[*)Ap0(PNn13Pe2\,Y+W]!*bVC1XJSl.#*:Z%8U*cn00U8MBE?I7J=fU_TnNTqS@_$m6Xp3l;*b2LGUArr5ta>/N:Rn$OA)mgJ`k*Y<#"I\OAU!=OO7l$_=D9$*"4SgitdA>K*7&c%*#U"2dnFdR9G/M/VF'lORV(MAJW@$d)plu03f.MO/J:dF6o<0qn=IE`=YpeXNX?(d31qNadC;Ul-']aN'VYne(l]XZB4(`?%[3RF%U]nH.?abRPbJd@YP[b8!P)1SUYl\*&BM7n99,9=OJ/P+g8OgM/?l0ljcr#ZdjFnAB71tT26F/tYM.W92<Q$IGTL(4m*G<mj_#buE%#/<Ysq#m?VD61PB(a"j05Y<_MdZR-J#_OFJTG2Z)c6^Rl@D&C;>Y*9G3m2QRKhtm,O2nV:&4K,C2@1QD:F(HZ\-*j#Rm_@L2<H<,%IYc_]G`RXU;+]8q78"$8j1sFVJPkBaEtVaq!S36fUG`>-%E?Kq>a/m]0_.2WQ\#gJ.)XupB_#?Y`?Z$o$2?*j_!#^&YV-Z$"?$`A%N(=Xj9i3fF)p=.<Tb&;#YhTPF7c]9NJrH?,=>mN9!j"$m,<Q'JK/PQL"RlGUN5J76PGEold!NP<4;n4,899FF:SOg75nr<0)J(\H%EKl"DKC#hP733c7<]!@/HQa7S@[=rB8cftt*sW![.2Xp5"F2NC@nD?_KK*Eb^`SU>47]<`/1R8[S`"W6JK&809atbMB4)Y=[02E?%"DJ5Rj:@BF&i^(O!6]sb!'*??+D_**ap*0O:'sBkOTIkm8C=)H:^a?P1^G9GT`HQ0j0o/ed253X,XXO4?kI-00Jf!8+]?F``M0!O%L-'qFTLICfFJi<r"<OF/?4eT]Kof"!EKQ0)<bt@E[+;&mb<.I!;2o8Z&6=m<%KHkfK,$$I_Wteo%`lX%h3_S9-aF^?+q?%li,(e+%e-'P\j/.&6Bc.B`Ps^(p--:aV74gnf_Qo$P$CX5Y=M3Dj7>m_"4H_:(:8DFRKVXH-d!GI=<e0j5g4T]'15NAhSu([2)0H!*@hGP>%]X4'9TM_Bl1e%O&.8PM[6??X]-6]Bg&7Cf^96pXbRE'*bEZjKQf&4%I]a&A>@*$KpTF9Q@ZpYU?OFc@Y/VbWg$uHuH8$!`Y_Vl9%%,.]5FJuFm!"K0gk$n*&;'@H.\&,a6d)[GA_F]/?U%8[]^qnaS7m1V`U!@\)O/s%8B()1im(+G\=$7$3"`J"t]r;h;m.uquL2ED/u%(dSf03,/IEMnBZ,8MV>7Zq-X98!4f=!_^uNRNF3nNN<=B_#eAfjqT<m7U/pBPSC>.L=%_I63LVf"jB8a!/_/l&7*'pSVGf7[F'4r%@?n'C_n`OJKXFLl0qfF]CnLri%?LbgMo(nehP5?m)5+QDV"g$$k0W2KP.lee3sdP@k9c:@,CX3;:u'uWJ=L*YLAV^h(^uK6`[B\%%OL-K&^tn$5R"[NDM*Z06.2N5t7[cQeMpfG`L'Dc%?&[nMI$EPt$(s60#9('Z1PS..COeAc9,4r\YeEYb^i8=i9]1d.>%G``EB!t"%ifNQFHqm7\c>^j`+N4O)7e<i"%+'n9V1VtXE<.uFrCCKTKMrH2+<aL1Ws,X7),gT2/qFiJfrR.`XoL"tP)(?S*KPS:?6K(ad==Pg%M[V-0E6oL7Y7J,E9KZX$BVRj7Yo\tT/><0L"-:DCB$MVWJrBkc"\;NgA3#d3!/$R?_/gh:huqG'To`rib:Alf:@\ENnVDK(d1;1!%O5"mp/Kdqj$t:@S_#Oe7Kbnk5S%t=/k01]"`0!ZI-K%a')A^gILP-8ALk%$(.s\^V(CpT(6Z*pj'4/UZ)"<:o1o;!#*&%j232gB5%&rg>JaK\D]d=X=XTnCtV'[ei]no5SmR>Hk"MNe*n7gTY\plM4Z5r<)5',bEgCml^\7+8pq#RhRr$`]LYSWIYb%&!uH"c[X1f!t%Q%6knd^3"e(e9*5sr0slK\jq*6?/HO&\jsUEo6H#coJ3JW%A7Pt@Me\0fc6me@P2O-+\g)a0])XaW#O_Z#&AMB<%M3Sq#saM2A@N4f%m%bf:7jjF#$&2ds-*WpFRtA;*3+@?4?$YM),,^#YTaOa6EM,HF+NGG7LLa\t.Gtsei\Xt;A6N(h/[,3`VA)ZJ?PH0AGmd"M^BN8O%6"c8eK?TQFTjC87-*d*k4NJS5PWU$_p'";40omjm`Xk%i'?h4CQk4fmpk]o?('to_*^!?YW/[Wu1cO>D'Z@sV<@"g_"1&/Z^gOR(%8VuSaN##,e;DO9pJgcEQ%sSU!0PZ0HT^[<8,\\fQX:UR?.7(N_;3'UtKHgC#Q@a+^U@3Z/KHZHj15K<DToDPm"[i>b7&)^S:H3nf%"Aj0l'p@)tH&lSU@a?H[is>:15hp;%"c.8p6QVTm#dc>ul=#DK9>G'&#mlWj.>EIP+\IS$-ne1-$bdo!"u$HB"FtC.4@qqBlk.]<%_I@&Cclu3qZTXIWe<XL)*5HT(,6362#&uU<7[f"66t:0m7:IYjN$*'@oTI*&A=2D5`V!\qeK'hbh-#hPm!Obs7K@?E0as%NhBZ,I%65$OI$_q0-0Z-Gt0=6O)SPEY5LDD4n@fREM1oq6RKWtHN,aS]$Y%0/!UmPl5<!&%!)]BTu,_K6^K?+I)GgSRYN5Vq/NIh^PXr*sP%"9IgV$9Q:A!Yhq7./:dl*YXmQDDVReh,uj%)Q?PpDPYg>J8cLPQPL4.C#Ct-<k+,TN5qXe!?=$:K`V<2]uV?d"CmN3_2JAqQsb`D%V3!(K&g[fI#O)E?9+uAulnW<!F?qH/>!C;MHsB3MHH)'dO2_Kp)N>D^65mC8Pf0dW-$_'V@W/(6)<>?2("%\+$35k^:r2eP;C[6+%A?sRL.hOdU1!g%o>QRJT,FUiO8r+N2/J*&Wa<I9JN=:C#?res85_J,7a8uF,E7;nh')tJq,A7e@YUj3Q+TY=QNIiMnLP&.T_)d2,%(TeE+Z03NsAO'clNZ'ZJ5UQSdJOiKZ%g.fSGWQlsHTPp%aDlk*`!Vj)O<I"S%LSOjHBdKFa(`XPK'<9d9]0p^2!@iq.MQn9X2H-g%LKXs8Oe@Q4M3a01M!%;k0T$KE-'$b.49-i*a1`ug#@U&k(jSLS[(6rRCi"]B`XB21/q7+uCg^scrXWl7Y,"&j/8%/_]L.V<$>[^E%;XPj-1*2-b7f<TCcs#6!?[V8RM8-Vk?"(sW@fZEl?6\FhiF2cQ/f;Bh]uB\2,82g/\]NqFZDffZ_q054_=A#W_F9b/_&jrB`Df#&%6<>Ini9-^es+k4-kY*6eL;`9+,C/YE.Z)K2kGQ0A,uW;K-*0Q2WCK2;^rOORO6?'-$T`B0o2r_e)gc#9ZGVd+N=5YXdk!Dn*s6[h%ifUk0d+,J8$CV2;s&2^3bu[%9])DL$H[:TR?<sR`OD$&f0[od;=GKUcZtf+^)%6+t@JDMcSuHF6fb56M:W5L*ee@B=YmHj#L-AGS%frcE8:i2ADrQADnBpquh5JE1*bnDZDL9)1<p+`jR[tF>*e$gT2>0MqHYSnRJ4!f7QlWPC*<'+Xb`M$=9BUc_rNPI$D\dF4eo(3iO%ikAlp9?%ik5+h^ghEA/EDni1\5<Xj:h")t9g2P2r*?r8pZA\8G0;G2FWB3"H)DlphCI:<Y#kq@rGuhU/<tc0j[SaPC47sJs9:e(,%3Z*]D+[-iT=tsk@Z5jJP*%Qp*??,nbO8A^>f@%iKBeFA[Yke;ip@tVQ?$ig&+8tDcI=D1#4<t6fnk-e;=grUY?o1+ELoeZ=O[dd)%a!,5\m7X.u8%B,BL!K\:.-23AZ8D_PLcj=NEqE`aZgI$#^itV>itW7im[o(f)gSg8:"4[77t2TtcY\ZfIf,@6pQ+[g9NAB)n#G#i%=Nf1RVJLp;8T!T-cH^au\_=LV[rVaTX+&K,9bctm/];h)FjJ'5eTSBC)gMU6h-;6NYbnP&CHOZuYO^p4,M8<nWp!-)k&?R\rYuU/%cd+2h"9sT^;P$YJ+BV[Pf3<n[ObAMZQlg`\,1ZS'<+\P&HFbAe^u3hZN%j;kJ,I(]oOc(uGKY]o+"MiCkC-r&09A:8Hp!S;Z1n1d%=S^CQr@sSd*e$d']5a4aO6b>gI3q,QS?(!9WSJ2gK`7>C2M)L^E:!J1#KjBdof..'s6Ge\EEsmh45O2amkM<28,0BE4,NW(:?!/V%(t%[E:Al'c`p1?o>0hP>9Z6*JIO*5]lWL(>B!k`E*hE5a`6NW<Tgq#Nl;=bpbE.LGB79Ih-gh]S5&Z:S7a)=R[61)NXCQ_KkMc3D%'>]R<C4su]`JrehkKqrljE&W%"7$"E@hg7@FQ=\::?Fj'_Y,L#Qnbmjj^`cRW_=@da<r7qGIN(HQ<r@dTf@9c:(2RSCV;n-rDt(T%KOW1eq]T)c5(]k!#7Qc8'0pskF$<)M&hhLqZd!Jk_E6E;H"8;V[!VQuO0eONN[M'W5S>=l9Qt'G'*`^JReA_:HLFFuYg4i_D.g-a%RJ2.RJ_9e3&Z0TbQt'"V>@(abo5i5-6*FOh/bkLl<#aYWr@!Ar61X8`SS2KQf2hrGBr>U/pW,(&D-pJBIr.,<Pk+/?HL>'I31u(F%7p7nPMC.=#RSnAQd5HFS#L8O`678%`r\Ljj;>auT6e)LHG-0WADjqh%O"E(L;Ai1up?9HX'8c/lrKO&7b`m6@^!9D^s%cl%FA@6(%8FF&Iqan?QcW*f&Vp>)27QMANVa&`6"$D@)+o@r%P(/P6J"j7JDm\*gN*'6%C?!V^)4N,%F?:bU$-,12<Ua<0)*sZQT2R^bjY'r>%08j;J35;DBqg"%8J.4)n8!adVJ"4@-3orcZb8;tZo"(D%`p[99j_*N+j.\\g(1C?Kk>FU"YWGLF't?f[4KJ50+!_7%fh%dA,@l%i%HpLo]F:c04eB@N4_;hOY487,Tcc9pmC1Z?oU-a&uX^"EH0=E6j,^b"]e8SSP_:6WjrYWd_QDNL/r`=?dIjEd-*&"dn9rpXP7,k9U%T+tR"L=S%O4R%nJHqoggm@h0H_c6rH;LGX`]0-XXAqqTUp:eO^Z&FrTHn6CpVb^)DbIXdu:(uN%#E;Nr*CTJNJQ#qS/8ZIuc_s"%%:,mE3ZrSe5DX1eX\P2?mk2tt*g1or)GI4pZbXCfM7hPSRdDn2."2<$R-`juD-_<'GZ(R_o[+AKG9gp)^Lgc,UWM_i/$bs]1Z6S8t%gDF0U`/(RceTjYeUkBu`F5g['Y]WK<`i=FbN(:;les-:kQW*##b3#,%B;&OM/T6REc&=]1>mLTbK*n4A^fRqHN,"1T<9bDM@`R2g%bo;FhoOoPPnYe5)*Ib`#iaDYDbu&5#_he"U5I72TEkd[2@PntYREWt%81J+4Hb=uD1.9n45PPTF\)*UG'>/iE^fB5`:>]TV4o.4;%J%Xe0YdR#g^R['b6[1$'S("Y"3!a3EB34G4<nWIB&P)2=%-cL:g7Op\W=Da4#8h09(/rA>gO,+*ZseM!B=@8]<YZm72rKMXMO1EE%,A@5gGh0WX?hQo>SW7(73?=\?)8lOO%"fX;X$(dnE<u/(gug!8Lo^ZOY0F!ugsPEA#$HJa,&hXp^i:`1AL"06@b#CeRRa]YlQ4*D%80Ze1Rl#/@rC2d2>9?r9"$>`^"SW0Hm<NQf[l([X@N[BcQ:>ocOk:EPs80LN'O[+%4`BN=<j#N(kL+A@9ISVnEaWd]>Fq1sI'#i@%.a*QdO[4[V9$?jhc,CjP!o(:^d>>#7kU8JU`uBk@(K1FEKTq+L!=%W4NXA,DT_i?J*Z`7*I9>;JA0*l[d7#IZ/!5$7C"]L3c>9b5%GjX3p)/*F!5`hXf*7JQo\:*C%EKH@o^Xdf;jL9U)q$E,0,-&`m#nhf"kgfYR`t*;mGK)CpVdBp]5;K&LOB&-oStYLjilGl#@#!aX%5Gh4pg!/ne#C;IUh\RqP\*e>8l'`JCkN#bclk6S>7i]OXS^X5"BN6q\(i5&c&oL.*2@bs$bsXrII"H_#h=r567B`.$WapR68#N$H%H'6ZAP)J;[)CoL0BrEQ5\U4X6eG%B[9mL0aZ$R#AD>`ttKOKul,Dou/!gPS0I&H49MZ^)PJO9)>TCJal?oZL5Na0i@i9-bHW/.nY%1qjtVq]je#$)V7MglX/]p>)-T(m2[E,mX(>l<(`JT;#]p&ZjuOF5<\jqY>K0Ya0b*r@YKINl+q!i]i]M>Mjo/o1;=E,XkaY$NUYR%$VZW@2g^j(d='W2-1e(VX[W-]n+eP-g2T7US;>n1]0pcS@"(#Vh6(J24i+2c5V"$M(^=3I%<'q5j1\+S?TnbY"Hn"dp9(jI3I(MZ%9jF3dQeN.H1Om&LS8r0FAE):&H-0R6?!$<<Ec[OK4*D%/EqIWAYH:K_QU>b8Rpe)BjU3YF#9G]'fHC^XD'@`T7r[6g[]=@^nR^=X%HGe1:dC<d0+GBrA-bf,l<g1q^%=$t<B"b&M14SsX#8XUXh[ZXP"^7aa5.U4#(OqAiM+;iV5TLu)gPAJW><aLr,"c+k8eJFa8Y((f%NVSq\9T'V^ZQ&[G*=($,KJnr`M4pW\).oNoTEQ?0beuX^dlBaT^^_QqV"<t0d!6i;^PY'G&j_S[["VjlIeeN7i3,61]+:"!&F7,I%k$V2.m89G#jGc9_H-_qc5iToJ/Uenk:l\o%/U>_!R64pVY0W`pDjlP;j,tQ#ks%YDPITTUKFIgi1lnR+GiiEcoo+QPP=[EVPA#l&%86Y9jI*?Wi_qnfGiaRqI"c7*nkX>\UGuCbSLB90`qlM189I$eKgs3q?l!Yp$am>.V`CN$'1udl91"dZAb8]5F*"#4*oCIE\*jA^\%YOLm#L%Dg4O*PW,8,Er+Aj(`,6P'I=McBgH#u2%UF3Y]5eRHYQ*4^9<[p=g5\.?c0<lmt97\&lZpYB-Lh5P=qUSi@T)LfrO"h-B?%=p?CV7OIWFk=NcZ:X^3)apTR&R?Al;*Y[s=ft[ebXNr6km#(ad+!4#ih(gI8,@=GD&BjSbhUt"P2TRj*"K5,r>V&i?GepPgL*&Wl%rVH>Yc>)0q,Mggtk9#OQM3j;:,@T-cmG4XY6rTg?XPZ^f<;^/?'Gg3B.\%L>]"J-(gALj2":en6A]2lu^`V;I^]dhdWL^2)JCmbE%%MT3s$=@)V:sJbV1)]@uL[tQAp:dUI44tr+E\R@$;T6^\`&L'-hRAGg+9pXO]T[0o%DqD%$3&O/!2\5"KYo]toTm<0/+rdF;HMB>%Sr4^K,Om1Fn6^(+!eeUc:G4hEV(FC`$$buCG_Q@K*_36_]%0O_JqkpOn4;TV=Z(PZ4XWmi59:3WcIjL>KX<+]$s+qnN"41<Vgb&q%pImrL<1jW?4.<#IckWabA@c)!YUKW_8cK?^i2Yt..^!.fSgSDI]S)A7'G+qkgE%f3f.;bV2&LnK6ullmB)rZR:S2ek"?=-V:4Uaa%K@6<XlaV5$bSL<'m2ASC;g@/*$4aOM@f=5e3RA$@-r(2.P0<gX*1uW,(D:6RL,aJ9/W[Bnr6k[q:QG\Cp>_J7@#`pPoC?(eJ;L)c%M.*1&n"o'<`3q^/4jGipTQM;.1)0fPG&.tk<IX9rFsEZ6p?^mJ<+\72^A)3'a*.8)49H02P+3=KUPgPV@o2d;ZPXcSq7lk%s7lO7%?iT^^rl9Ncp$C*%?WH@_^]*tsC=G^-o\^qT)+N&L31LO$R)(PSE7:(g^>^CGP`3b*Cq8MTbiPm[G$$Kgk+nf\9EWk"9`F5Ygc_4s%elJ?(-0:;Wmjl(t?KrCrb6/k!g7`<7'NX2MES%IX85OWd5\bA3-mu'T[Kt0ElDbJ$J-i1N-B]\K-!AlsOg[S7*G)_(GuO$B=bQn3%n6<#`$,$tL3B)ql9,./38R/`BMNg6X,U7@uZfQ@Ga)N4aP0eO*JG/`OB5qO$P$r+S`gqR=83+i2E-A.Y@o9m_aiV7C_M.sb\TGPL%4lS7op5&*nV/#dge((8G8`5:!+[]%ghEDFhFep&!JN=%Y$2q3=O3^G/",^15=<rn`o_Z%":u\Pc@3!&iEJuF_:tMu&5-0RSnf['E%^Nj0H`?-k5k.YY4@+uf,`C<8E.nmhn3VRA'om+2PA/@n$1Sa2uJUhk.).?ZnO<U')NVTE8#XpY`SPslQX4S6aR"]S-i]h%p8;950%_+NKGb0R`O]A_4FlApc<j4@EWAG(bf4i8YDpLrE>m.Z.%dg@7L6HE(04q\;5Gl#Gbq1Z,ZHV^"c&/""ZAqAUr\5ZV;>rek%h;dZh%@SMkW*OsP`b\9!I<Y@5E8-^UtNhELQ-[8#ZZW6:VE96e0d*_cS?;g1O?20R_ptf'@dhrfa.\)>@f[2qA7<J_t^D9r$/';*f6B@fP%l.u\24m!bBHeMO!7<ZAMR]qZJObZW5Np#Y3V`Eo0cgM<uO$.M>e/$"4o1[Z$c1ec-kfPk?G]AV0%_/=DO0U3d1RrDl<rcD1W6!Z^%9S'u.8EAuLUOD?h:>V3Ti!n\)d3OB3.(g=(=_:?5ca/hOHSfk-*:OK3^ok=!7?FqUqH2&3\b,V/Q_'@U&gPp4Ze-S0^XJqre6@8m%ItOE,Xd5ROmcdTBQ$`V9r-,L+g+pZ"eq@qYBkahR?U"WGqEF1=jW_cF5k=ToX#Xo?-7s:`oiZX,<$RPa;:##gcgbJ$i>+L6M"HUA%4"[SsP!TC*T#KX!#R4n\Z9#s]Ih.iF7oY<;110t:MY"M4O2[HoZZ=..k.Q2326[f9SAH`V6B`;f&X*C2c#ls8+_:;g;S^W[6;^`9%%.qC1XnR44@E3p=(d]m][>ED4/7UM.]J[km,Qtb)eq$N6J7"Ibd?j`H][E$T016W[Qg4ip4Y+p&aTo&jpE_5i<$rZr8i9%he4g'2%q)&Gs@JnQk5L<8%iYg/(Uff\accVo!Pp_&V6TCZ%VabJ$3P$57-oF@7Ff"\/hDJ)jWtU^Zff"kQWM(J6_,6Kf/"W$(m%aiS\SnqI%\a:^gbj,oM<,J,u`VIHP0HUKRq*g1DT'?/;FigjoXXhOYoZ9s![N:DZ(Ubkb6mNp3b*X]].>bETI;>HU``n*N@q2\/)@IQ2H_b14%BU1;s7)O/lHI*[eCf/m>q75,9i`#R9p)+UMVK,I4l'Q-DdL9<4.EC+[fSWD>bU@RFPfB$`b'XfMVnDbaN*?GJQ[D:fb+LOYh^uAl%9mNKDbHg,_hj4eh$U"E`Dd4ZG8Jj`Hr?+!Eh]cT+<W.]#j<j7i&[QW1.]8g,mL`aFm'm`3!P1noDMC5&M+jppVkK,eUD@E&>cM;b%Z8,\O(/Fdfap1te0bNr6Y\oABJ($sao@U!0S@%FkX&!1lJPQ,FjkPc01ESPrLP5I"kPdJ?p%P&@C0W:6mXF.S:b5Ft,52@b0ae3$%/qVN&GdF>bU:j(g*=t#dehbr`,i_A.02#C[QIIn(.#VUOhislM(#i38M%rh%@oopqf#Ds@rJQc#P/J=gjQKYj^3C9[\uk"t+-9WP%7R71fps=qh89=F[E=h5V*j[MDb].FQMC:"PC>C;e'pgF)YU%>@`-ds_k0!1G!&]fQ,UHt;Q)GhVf=9ZXR[3%cgBUhBU/1tqg/62F%)L4Rpio4JD`G5p<72E<>?g+74m:j:I)Pa3<5#/[7H4mIo&e1ppLqqWt>?Vt<jDl5Mr@$qfrDLsg(.mNK:>l2Yb=d^rLdqb+>=s]c%9/=%p74l*Zm6%]pbHp=#n8l]d+ce%+A+.M=q"%c,7n07G6,"`Q[#<lj1'JX(4l-D$kEuNbR2JG-bTFJDkjb^mF?cDNCb725D]M?W%%U>o][+m&lOo9h!Y&t,f)dVnF[[!9!H8'=)JYq?B9I-Q%9$r<g"BaM`7sFPBge,0WA-1hV<K_o$%.6e";N!E31qXKY;%J2P$.>I_%W+iabo/Z@jj1HRR<L`<tRj^[\44WIcCa<=Coo8:?S^/s\6pB;/e]5T^N#S>T;u-Yo56H9J*:4A&>[p,./:]ct<(0^MgI"9hI6X$L%(J'!d$/ba.L[7o)&g'^D9-^<(W8efY(D,&N9Ue\6"#X+e$%U-I.d/H$0LI#1"#Us]ck]P<#alaZQqsVTQpM"b6VL>$A&BQ%r!W,H%e-ND#@GNW^'t]lbR5!U9Lkm/k12%S82tb(bn?Kf?aFBW&+ZGcPj\)*OHZo;D'gtd6j2B,BHj\pr`%n=6_ZFAr2(A+ZkuAE\dftT?%+NbjMN?Uu3SC1?_[L*0m3c`KDS>KIg[MObX2DV@:?4HU<5+1MQ!ha8prV6[pSkom;6lZ2kDJQ/kDKIe^AjeX?9,B$kaD'GOP`YrR%b=ViZ9j,#tYR(c2!T0g-$F31@Np!G1g/Js(&<&`KrA/h0&&\\r;teufalN2nOnJE<D@(-2*=W,!Z?L#Mm_V:C>1B[J)%8[I30W7O%pA:.+XBC-N9A%5H^(jNFRi'ZPF7W(lA3r1oa:ZEY17^tg7R@CF=X,%)i#mI<eP"sWG2aX2--uJtTg'c`G0o'(H0`EW</ro97jhCu%fAM<kVG71UnWP5obN6CZ!-hd]mUIM-^biql@`*pFnHq_>NR8m$cGp3[WhdnjYj?=bf/s>oQ!Qoua'[_8@<"$gW]RZ&8m\.ZHjS.b%LI\6*i*L-k\r`.@CQ#lQ?%*0LABgD-j\6@.PI=#?j*\Ws"Dna6$cFARYcrc'*K2^$ZQ)*LYb4:+/,ag-d$)F?*iId2I*3h[I2<W%%?M[kFMre)3*3LmE[!ea47[a"kn4jp9I+F#XYUffZZ"h#8iH[\cW]+H'?nRV94:YG0rE_0:l'f[kIk$:/Ujad'3MNOT^*;&f*IPD<%HMWI<<,i!s?[#dD?at/;d]*qR;tHF)f\c4@ZK4J]>PCQiFcm<VUn#q(?[k4opC0TXH@<k\f(Mr[\tRm:\jiB!!FhjL^$]FWm6#W?%H=pLT//WkE*NQ1-FPQTs?b*&ae+"$^r\7Ln6:.2Kc*:L2`cr7bo=f!:>?$^>20S;u^pT.P4g]LE<T*AWcZU<U%4Ui6`u-RjaDiHB%QkC^&T`'B]9r1`]#pU)r\1U#?2rk4pOpguFDN2C'RX0LsA8M7FC;FkB_En&57JOIf$t[FmCm!uk&<6D9``7-cc+^8O99FmseW63"%;Sd+MnsC4f*%Z+^F;;EX0orM`97GcD(qJj[cAcFPVOru4gAn`CYho9Z,SrO;,F&6RBp]"KQF@M/f?XbM,uT?M-FO9C7:9Q682^F7%!34k>6moeiQ`>)&10.s$/'=Xa1O`o'cX5Z^r&,2DTW$Qi]JEIo;>umR8\i,`]'lG#)IZGY>eH_ZM$(8[e-j)/D2og!E><?7@m>5=%[DBTeC!mmt4j%+tXmeJWp#f7S,0^/C_R)m50TDE5>?"!Yd1onYYV!eXPnP&Z5e.VNB[/D"mW'g!>6:J8ZQ8(N9kprF>Wjq21V.mf%N!kt^3[1&'qXm9oU8u0'\j';*&EJ04n]_u/('Vq&H2AhS?2S_<e>a_+(=(VX\C2)a!8k^+L!Gg^"Ai4_=L\^L&3O.U2@b<]/9E`j%_>0D]PA5Y6#lA6983gWlcJ3#J64ufY@9C=fS[[WpiXK>5$<.I$L5W17ekFn[ZRA,9Xk9<dPERAJ<=oMpem@YinN=moK8),6?]p,r%13/b-e#'$eZ!."_G<c9ldJ969QOah\W-F4#S!&9G%!X[*Lh*n98GJ.I+k'%nI#4[E=oEB7V/4$&;I,MG`^l7b6$Z.sb9*h\Vu8q?%lK;?mjPu<o,;0U-K3%k@qDQ5mMe(/8RJ]ND#Ej\!DC><X:?D\B(IoiGe/L6\TVqMsjeD8"7*PKEVW,>C@9Z$]JAC*])ZD?%T,-Jk%*(U([XU$8mV4H%Ci8W@1b#2=,a`g.Y16@$f-*gps<R)6iq4YM3akuVr=F1`G(:Zi=4$ZSY4!&dom9p>];a5OcU#;dm]./>@`#EuH%-1*,p#+=;^7;P1WR>]`Co>tq3#J@8<+k@O0+rGAhi21Q1OGY;%KQZWL;%V:?OI-A3`HG>m5A6C>DT_:N6tHFmoFfR/U-_+N1aBNE%54=s-<)4XcM"`<$5pGkSMJuku&Zerh60/YSG1[hd<V0Iqal*cHUUQ!+%Xb6'LP/@(-#/C?X?bc#SZ>CZOG)1IS+5;>jW3m+[`4YY%[fciAPu=APkW/aYZa4s4+c/VKnc>L"RXhr^f`MM^fM<(j)6,%4Ka`/!$]-OQ#VJj&d6K"EfnZY@[\-t6R9DJM@UtrH>:J60c\eZ2%%FoMGbjUNP+r_bs/$]*E*75GAn1,[u4+hKIae+4I+cK%J<<BW0)cNj*.tAMKaR4%7$HU?4>pZ$/eM^dE@[ru#1atgEbh^Vi-.H">%e2+GP\]2b@/2UpTL]NWr\mU\4B8?d$553[(((q=3aR0AKoTTe4lq="iMp'6faE3ub,%%/YBOU^rd>S0Iol//Da#[a*BKoWF=r^^=%=DLdm'm=32ffNe-ZC(67JhDBE'FJ$EZe,]-V3jeB0gaD&HAWjL0@=Q;hmb,r`/g7($M'[s[Zhc*)Wj\uP9,Pe`[7WqKqkjm()2%_%E[ZM`<*-B=^'*%)e%)24Stg<sRB3WX--6`pL`nNR\I#8`h%QfLQj;`/I%BY\O6PaY:4L&p77g/BSp<%.1g.!Vj+Xi'R+1OojcO7h%Ko;T,5BC+XgD,u\rODe=.Inj1"h+h(9.*n.qHg>]qfCja=NP2o9njg[<P^N<F'#^h!f/p)o/XR);!d9pfklN[PJ;OiRt;dj`'oY$%\cB_ua8Lj3pmRm9-\BHSPU4=)+A@>OE7-CYH%19kb0l5Ma^aJ?qs9%VM$-/&GmJ&P#?j<Ka-3>PnXcfh0M)ULU!@2m5U\Ikn\PD#%#["Et-(euY@mpub7FQ_V44\kX8P,$*e:VpO0lk@Wk[]L%@N`tN/h#&o7JCD">\#5h6rXeu6p.USLH("E\kR7:Z7j>48o%)2&BG_:%B?'Ofj76X;,4s!%?C_A?Q)l)>_FAh1,I:C(:HFqEV$c.FMNc6YTrW6as/!H+dei]#\Gf!m:gcG!(N@[jR4.KA(7a$!V*8G%p$q=N%5[*oT7!DlYo)3Q!L=[Z-KJ\_[n0**3,@@V_&J'B2a9SWJn@b[e:u47g%p9$qfR@-2$*F3TFdGH4eYMY)mSMTVIe8rIlD)/)92gHi%P`O_FRrN[hK(8/:1locP@tZ`+jWbNVTd2o`FCE20^3gr6LbN"Ap_;)M3]M:OHnb382e++"@I7mbOsA@McG\(ml9aZ\gVL>pRl1Y4%M/^CN&I-F>=8)q?+/NS[M[VW7pR74TH.Zp/aXtB($CT)Y'@<['BJNnKhs=r:Z<EeW$"%6JXTV^\L[o??&k0i'aX^LJhs[R<5;O=2%:a5k-`"b,tD9#u]q8l7`luQRK@1T#a?KBZ0KiJ-:a>N!r<Y7DFf1@@Jk#*V4.tMjmY"!A2],N6M/J?&3?1_&=r_;N2qi-Sq/#.9S%?G@EK$*FM2^p4Y4=96UUg8fTF4if^l5$[ee<Mr:qVnq\c:NQg"(qQ<UO)`9ms#F$s5Y>l+3k-:'LV260Ll]8*;3(#5pDfq[YS%b0%o]8DZ'f[cjJM(2)]8PmXl@W&i:I=UlXMl'm3\6-03:n\He;.e[J4O&Ah3VUrWqb&D?O83ko7"b&59Rb_,)1F*(?42kC0FJ/Y69X%%MHu.F]+Pi]f_8uSOboQi[hi>EhEn`t1!Nnq^=P>iH/0k.9db/XgDe8k`Qu.A$'aNpp%g[3?M/LD>jEP_#<F?-BQ6):C<HuY[#D^d%'%*c_UHqqLpmA'#7Yh=JB48VQ@j#rh7a$@+J&p2D?op.rpH`7;]9$n3jb(4D,4:=l:_1_[qRa#QC62We\<!#:\1kO_hK<-kpfVd7%9_t6fqAbmHSGa9UYPZ7fWA7C>=RMge3e5a6ae!@YjF_XpL:jQlflYAc?c`WKIE:D*$b2,#Cno:i]O)lUntn#'M36G%eTbclW.G?V%CE_Y_(3sh,2bJ/qau*9,OZA`YO'er)ln^VcJ6!Kf4*%tj;g=W^%*l"geLNJShj(1g76C"L.ReZ-9+L1SIi7>*CnheCl+mqH,7ZG(%O0WtCa2I,_OZJ"D&-+%l-E\Ssi`!uiZ)Br@Z.2k2].SGH"f&9.*_NQ;9KXJF2JCX`'BsT^Ek@'--`*Q6V/EEsbUmU.<$(^QJ;;k.%X6D1i-B:S/^jne;!t1_X(`Nj?ma;e.1EKWqe;)fCUeCW**c!L-DI;L%&XEYL-;Q\#Gh2B8AMRs_MqEA*0ms,dW&FNf0D7F;1h=B/%*Hn1>(opa\_e;<EFKFtt%6'.MRB,/dB1k&?cb>&A8"QkUJcD>3;n?4[>4o^Oq<,@`6h*mfYC6cFUR4;+XAo?'`Ap5/]OR9n6J#6&%]jg$PG&"4]3h\NTb1kMn:9/.%UP;p.B3to06165mRSk$uie@3b45O\EW.'-L8)^a5gl-'K#sX&_a0A^_-DgCnn`)T^\4l6aV'co@%`)+"E\(c`S1PF]q_VhW)[b73pqW#V.(+#KDPZW]FU`^*A$pZlaR!>lpQ[62^0QZ;;P1q?-V\8#&5aQ&l_KaPiaYHAZ"MuH2kspCl%\dD=LmiDt0KRJ+n*fQ96h(M9:Xqe=&U&ejl09NtT1O[*%Y4tiGXF&q@)MG`C\GP[W\-,9',q;[&?e8j(-UN6D?7CD$A`*KW]Ditr%(mTY"aeNT`'=$2U;KK-PD[@9'NKjdp8n=r`<+sa[O\QG\L$`b,+@EW@!^s(;s,;D<TOjoC^iph@ZYb@,]`E"c0EbD7QkLu5O<N>:%M;9$69aWR6Ps8e;LEYF'oX<i>!D.jq5QI9''ql+fW=eP3X:Yq_^.)`RLq^6ukiP2sWt!34Ru'-HbED=07\h&p<pLhuVW,g4US;;b%5d#iWX6ps0_(d!mUhP6Fe$,[PJ!h8d]'Q<ElHU7L0j-l>"V7%/,>GT7j&p4L?W:IQkO&9?T+r(7+Pp)*/$o`8,)q]4ULEW\N=^c>%b,:%MQV8D_\N%J12FWBc7nn/JBW^IqdLlhM=]9i]EJ]_J-FVP]?U7K=nfr]M"R[G`pfCs6jmDY9[&-ZmG-qkrJP%")6k\Kck*]p5%[=@?)*\e"GfV$PbbUG1mIYMKj6OZ9[Q9<rDgb)(4.t%YjhfBHqM+VY"4&*MJKG@JXY=IcX+;AB1`p81'^?U_)I-W*_L6Wu-(7Rj+%"CXj%p`;COPX8W&LC^>r$M9uQ.bkT6_W:GUctd@fT]=],^?e*p.K.6\IJlO$."n^YjNWlf,SZ00;eU5BL,O87msf3d*C0+<U]kqG%U7[RhefbI,=>'W;haZ"mLBgGD9*i/1'hJ/1j2B/cZp\Vi$#kReFE%SU@e"o^>2aA<'CXjGd:rh!b0'ii7\I!Jl'dCTm@h+D_hifH%[:WTA2n-lMSO$pjCt6i@(eWr2Sn+V-dtj8kp]@WI-L7';(f4FmkU9ISpY2:d/SJFY7;]MD]uf0"mPlCpnM.6$>&N3FLiO8n?YLCJ%.f-9aOljWb\Hl,!aq;fTPHW2rhXJ'i7.o4R4I'l5;=__cM:?1!gl0LY9/jt+&3PD^`Ube1j\`C7DS\ELPm)bG9EgWqW]@Fo+^>Wk%9S.'pi0UJO7\[d3l%Q*CpF1%b<iaIY\4ut>2H:C!ps)3X:BD`h4$5$2M?l'YQ1.`tS+N5.>bb&-**t*1g_"$mB,9e;T!O*3n'8-k%NA]/Z@TVIceO"9.n2AhO8ten`YJQJjbX/n1Ditp<h.f<6M[4n_k=Y).4Tp\N&9c,)a7F-Dh`o_g]N/jkY$p_KMgmp%,F:7J6>MN$%1PCC$"b-jq6#hi/#5YR7@'TS3VC(?'\k(1W.MO@kg6-,CemYo3D%m\`?&i<[*)%htQ?Oe3Tq(EFA6+T)&CKQ.oG8&dBd[VBaWHf%%&u8?a),b71%6js/)9VTlV3OGV"%gopM/sBais0gUWpg>drL&H#4cS#F2<R(\55.cAq'G(Z`IS;[gg"b@G9Lgnh"p\mcPD59^:qca%.DWi#p4NRSEk*PJoKBu)H#d45LRXmORm>C=.W'@adRV3%n3k9#>2"H"Tm0&8AQ%IgiaDqQ\^]?3Rg8PuNQT$*?&+Q1.!eT0%^,[I%.Y3OghP0Q[8LPB;m&%pmT_+R8]jj.I!\,c/A!+^\e;=;m-cJ@L&*rCfJcX:+Q0is=[pDUdp[@LC9g]%I7U5#AIjD>io3.r<(pp:6%\r-%CG3[ST]Y*k7T!Ok^]Q73ALGcJaRYuJo#\e@j5E`l%>/ZL1KqE[%U4'<Ngj<5D-1t^28N"B\Tl:ui]!f":L%#jLQkfplaF3Wp%[&bYl.uGES5)J\K_%hZ%?G#1:@!Mm-?LQMRJ,VHj$=k#h;i;fue.H6,cW+FC3lPB0'+1NWRPd,:1sOcs+#Z8R-d#ODcrI/8S%dd*%8Es?Z+hDO5/VlAWPKDN91m)+^bY:cY$VW$.M,p-Rh>3kR`2OBRO_2NQ<_7=Oc_dR;',=>:U=DokWGo%SC.9fkUY#_W>br7UX&;$W%(>L!FekoWUL__57at?@+_H7c23R4Qb5L@;en!l.&_)#M^#/1!^n8a"sqD"h<kXYmu_s<@orl'%lSrY23M"*<m/#WQEfIH9O3S)D5%IS?lj+uircZsF^BFImR$'M$\GHc>!q]@Yft@WFGtaV\m*<R,a-[R6qg(M#-d+cghe?L+P@0C[b@XMg_Qm@uT,X1GY(lU,h"N<<\4%fAu&W7)UfiiX7s!a$gp>7"@T[<cn`I(r>C2'C2,oK;Df$AnfkDAASOBBg)GYAm8,S%-L#q.#O)L@re34U+X%+'j7[9BNN-*&hm1k%8tp/'LnaaEjen$*mbVRB0#DR*auc>!^jEGL(_rZ<)r:p4eq**VFSREFAp*N5'9)gJV]FGcpIC"@T>/hhiq]TpD\0/Ak4_bl9WiD\%?&2^U8(eV\8#4?dRP7;P6&V[_%GtgS3lN;[:u4/d<6rhX?EK3A9:[$G2K75=,(6VKgGV#0D(G&<r<j"?,dOl5m@p?LpY+l6ad_&#%B!;T8(+h/Q<ti\jRA"iil#nN/\@heECag54QNVEc2i1l4pV/8%3CV=JNq&@is5uakB-q0pOb?,M`h(H\E#\Jua*i1K`ss:n.e+4K%a6.uP<NVOcNn>QY&#X=Bf]"@VqWCu*D.Fc$#QM3c5;1di$NF&.W,k3e1pt,6l<U[@Wm`^,bg.j1'UXAmpqVE$IVG\-f[E!0OGHqB%S`6k*=c`tW*CjM-6iY2o9%.%s?OHMQVl]YNnWp*klrk,2ak%Cr+k<.CBV&ANR3cg%EUM=9P2rsl;Q`=J:p*b6oed@hfm1uY9u\C_%g`VBch.*""-tEbYg8[2']0Zg+Xt.iK0QV^Cb6PZ9-O<SG2M412>hE.2!0sNNj[keYXM1qa3Y:KO8$&Wr@%fbUc\gSZFQkJDCM_Lr%3-)-6qf(#dW0cC6SWq6m_;/T+7tOi_rS[NB+Amt>.S>@>oOuaLIRr1*EKOgB]!G!D587$GijR6!mTVb_1m0:sGZUdbl#p=R$f^l<%TCVVB<[?jgqg_C?+8AIX:qEG\:C8PtKT$N4^>#VAWsZ=R],@J.+X=IcI4[aqhAOtdn40?:1muMO%5,Aj.q$?#ZS;bpI^\ihO[#&1%7<8GI@pAhg=7C5lm;UJ0DT$&"=2h`?+Y0I0B`tPi>Xs=))Cp#bXThoa/fs\m\:8;d`76"qs&(;uM";:g[&jtHoif;34nfs\))2;u%Kfd?WDM*@4,AJPcCJ:[%=0uaX:&$1a7&@smiI-0XSY1N<Mj:<uVG\,$.kB>iWQc6CClM[q-3osPf9Bu*j9>q4IeCmpD[/"jgfgWR%J*^[O;3f`9Q$3!K=noi=-3F8[!A/=H@dnQAghI,W@BbA++]cf^gK#kjeV&2t-8C8[-'WUm-6Ku6(6oITH^+a>lVtmm1+)Q<g2]]H%W\Hd$j"$.IlBI$b-"7hj--#o\Hd,>CNH!<[8Ds-d5DSA*=ZENgVfF2JIUK=8Y==Y:Z.uX_-Hg0DR@6B_03LoAfdjYYj<uj9(PDV-%ZY[:n6L,VKj*cWIB@U3&Wp3ddAC+&.m"`"#`8O<sj3#0\=JpRk['Hr2&G.d\&N/q[.PghZ4;r8LIuMr[2!'rNUGXu"aekTcf!Lk)%Cl.@\_d<T])Ma0A5eM8hG;_k*2UiXd\R:u_"@\UZbRY>I@6Hk=&I>sphDDPVXDErG*..t;K0a26O0%$G)<*AnVBppDpg+[hW-_mP%%l1dj^'t=P>+IJH5hVThlHcmS\N1M?fRtXSSJgK*Db\`_O8mRnnmIq<AQ>'rU7M@]7H?@&oR.^u12FHqj65)t_N\jan;,;9bDhGt%Rfgr=V-rNG8D%2!8E!Fj)[A:,L2/b$k;Xl2F;)_=i)e<S[QqjTX?[M=YIJP'9SZNo;7[Rg?IYjsb]JgX`hb$S'!m88;D<]a&2Z%W%[0gAW>Mi9gEIWqYhpPen="]XWNU>EoOWuqo'`)H..1RZF<Re4HQrI;`#8DMq&FW.Q-8l6qMnh/)@A_OB((MH47I3*;NLrj\qtj`D%LoYS#Rd_@1*UKDJ%`_^u_sDC9MtU"%nW>;G5nP,H$j+U?&r4BX2onBUlrTsL=>Zp%.(_JpBClm!hrpM8[83'Ag7pY%:3ZLt#P[;D%m'^F>V6@1fjN62NLT(gPESjpg[jgdA)2,U9ED[7'$<Q-ZH?IPpd;jS<'D8`D%Ta2Q<RDW5?t^,)m(/_r<i%]bF\][$Pt%ulF2JD>%-I#QdN5?kbX\!-Z%i\M#C#s8a;c!f%r]<RBnJ!B86m=/aqslEM@P)Y[\M\#)-"dhbVDLkI\PLpfVZGIjb@)a?9=C+cis8k'o9X0_%)=\&:3D"B_*)N#E0c%o8;O"PKO8Ie(7g&(N=4oGJ8*NZ:lTV.+ZWUre12FH]Rd[,r6AcMUPM5FR%0`,rXChT64Q-4PT$GHXZ2@f:%mUG`oEGkA%nJ@<^19hu1"n3i\m20j1R?%0;p8J7(n^5`eQ)a-g+]rkf/LQh][T6C2HuZ/jemD??aQZBT.L?t0>=/(436J1(B-l?$%?E2EMS_$j&`b>EG2Eo_,-1Dh[fc<!/2>o7K#09rkgY0-G['.aFUcq0lPa&p3g&Nu)OC<V[YfK'j8389XG'6k&5bEYLn<k+LXNG,'%m)O"n(+!U5L&R@krZdiWq;)b\9SuIWg^6*8#*eaXp']-)-&G$&o$QR6`TKZ)&"CKV@\k#4C2LnAI+qh;OQhNkBtp;l\9gb/>MV"[%]obMK*iGMD-)W%7^1H7QVF*pGeF$'dAZar./>;D;&QY_\]7UZigPn#FgXr_"SXb!/h3qWCWY/g%f99=X+,au?:9F#E%`4ALo3<e3%=*<\3:EJtdQ*ohuQSMUE)NX+l\kN,A8hcejmTX/ZeFmRnjCEVY,iA#@M8\0DI[AFK-H7F&CUUMcnstc7ECsbcOHdCm$0nj2:X;>I%,XYMu/_@t!'-0Tr.?@HU46"E,h+@6OS+CG8VEhd&336["(O_:-bA*`_mUQ&Lg\PM4N"cZmBrjjOSE\;EIA7d>@:VV)YuiLTFH[rc%JHMoB-dT?,btN^mG1e>b7*/!XbipZNW5nVo;"C!;Ao4u(-kU"%G`#$rB[UKHl@/0,+1p1$PGp,%6fjjaGV#*#Yqd%p[i@W%T30KD%==ZhVMm];Qr^.9,bR#%DUQQ;4e<pf#iYHB>hNoB.:]8BiV0Z:IraI:=6#^DZ&B5\p3)*[!c=*_f?=5j_4tl3HpQ_DX*-kod`SsHR%N0R#J3NCcn;6_7onjH(I'oC$oXatW0+HeNjIgpGHI>V*/VV>'ZkjU#BF7)[[qj[mWVb2=7`3<UucX^\plV$Eao6DL0fZUI%FNdI!%o'9e#JF8SLE(q:Mo!kXWO"o2uXSMFC<1]goU;cV]0ML#,lV&(Ggs0H?G*q.:BE-D#k5`(R396[NQlMR<^W4Hk(X3s1AFRo0mq-hg%KC!ud5M/%o)!]lgn3[okk`Eq89JEX0YCRX#\)'J;aPeHI3/8F'*[U5&!mU=db0mOn5s.m<7Kj67+H0n9NG=O1[:TV<D!B.L\4D$8%4=E>Gbk+NPjRu^?">p4\QX2rq'+"d_,?;FcIngoNA8KHlCaYZr-"p$9:g7*JELkk%MgL4TX])q$S,"9CROGo\M;ej:fKqBRIQ$TP%/h]%9kUL,5pT=C>h\7O*?%_aU7b3@T>kfk/.(d%TJe3ZO9s$4qRa1BTGe/N)l5fI4UI?S=i"bia.N4Z<Wj<4H/"rQPaETHl*9bcJ%/A(djE2nKX"UcpT>Dci2TtNW"ZXbC[G*/l[iEmo(=f1S":"JL)WH$XueRUr'.Dd%bE'9l:G;!LZlK@lfVJ5/:6'O(ag.*>E[68e2%L&8ATkABNnA`G;`rK%1)5FPfaFm%?:VF=+"[s7dFT4Go7kD+Waqk$Y]l9&Ws_sL,%op.KnL@5CaUOr*K8n6>QfTc'i5C\-h?2&Fn%k*7hVOcKth*gmr(.7R6n;c#bgSjleiRJEsUb=/t0pjU1CUd"G)d,!h'OuNNgi@*@riCdQ)kXh1cBZkt%PBP$o#N6t_e$-Ct[t\L1%&"@/tDnQ)KlT6QX[DE>NLMaLH^u$:)Z.*/(1LBB4gT)=")<el1\>#]m:#ElpaXhT>dhH46.u,2ra%*,fLdJWNHHR=8>Km9NJm>bO%WZjIto`AChCW*J+lXrYd7:aq7Ke$n60rZ+/GkSh,if2NR_GdPgg7l.BNYp/Zgi[(Y<d8g6C(smSniaQ=@j4IQDX)/%[bKD4YY$'O%>[\SB@[n,Q=qAe!:(cVn%Hg1FK=OkB0ucf[1b[(gXBaW>^/#18bn96?WskJb+r7lj,`Tl=GZ'g#`;YCLRIZlJ%*@ma]m92+h=AD0%es#4,3'I030>$ME3pj;e:qU:-)c]K1fjH*+U."CK:q:.KleNT8'N2Em"6<$DF[$#^&64SFiEccW9H2L!KS=FbeW>!bJ!3j7qVE^I%62bh48p5*_lTSO'f,T,5D$s_,H_c"5dTtZD_c(U3B1f*3eDd5!#9n;Xm3`>No\u+S<E6X`\"u&Hp+nonRW^B0lDC6t%l=#k2#f?]%^XQ^nH_5?JC=T2-Ar\3X'9-3*NQ'AG^)C;UItCcq4ecteBCoW1[L!=;"1FOB3rd]p8SbgUk+sOur.oe:Yi@1Q1[lOD%o979eBG?`%RRsnhIa.0MeEA2(5Uh23hIfpRRI<HGCh12@aUk..S88se*\uTLcGjD$hV/[&J1>^VH,ir+JWeVBZj)$/L$r<cd7#bs!2D"[\QjEW%`jg]Ve;0LeZ9#I>&$#8I33B'*La)HPNb2$YC?@T-oUU>jMDHh6,u4,O2b0h'P95!SVu89H9\0\Xk"d?\THcl<-TQf!nFOB!gbMPT%3cM]mLt4g?!l-l9!5/DYYK/--Ge97-*sOTa66/LOp>OB6acdqU\#G89k&Oe2M3C\(pN4/&rS5N-k'[%a7i<^QK4A't&rl0"Uht?s%Z.D%<SA5WWFr);fqoKCN8uCF.9(DVif2o=<f#1ka^gp.>1sG/+]4Nn?IKl_H.^^JT)(<8V?8S#.f$Um)0)ML7=]LnU[%cppJ,nVp%L(lleU+46;p#YFe&h02GgnS,dkMnb_9&N],dOoG9r>5l/a+\d2:02?DXNXYE)]Mq+c=uZZ<P)X@E0XUJB,>8nN,%d#kMVR=Mm&Z9%a*gJLQL"ePq3"qS_i%'L_Q"CU\<^-Yob(8EqHOudm">g1XGSOs[L-%Y4?r1egF&D;c*mkuFA$IF%#B-c7iJXi8r;,7h^ABsdD8ns%a_DDg@;qGn<N=)#U;_2@<V>.-,1F3JK<2q%A]2",\4b0d9ElntWd*^:D82'3[\/Or#@EcMOrGtZ)setN8[:-361j+G\%#[@jQd0=%.KKY/54,-;p2ii',Hbu>cmCjQ#eD8ffg5PM]J4V);g8mB`^LZ[2,Kh-.e:&pNW\@o]+6^?63[(CrHgU>85r.UUM4mDGmZR\k<@pp%KnSsAh4^B?8MBqc?.2Sm\rO"_OY(2ie4p'rJ<,)[r(\Nj]qe2U8s?2^11Rb4NMKR><6n<9+1bOiHL5pdq"/Rcf5)eN'hoe%aQ(kN%[iYmRba-99mPSd\B)@j2oi_aYf#M&4d;g\m@YQW`<f,S@/R;7=BA3/?8#k2s,R2emC[91Qm`V4Q7%K6+Fbmh-&Hu`[!micJGSXQs%5sB9ja`=mk&slsQ^[52)KW4tcVF(ZGR%$0Sj+H4Cp1Y87gMU_Zl0/>&-*;b&5Xd>W;nI8NboZTJ3$l0<U,KE[GG)eudF[cR3*%C9%A#J_8+t=Xbq_<"T2tOJg:XThXYKjqeV6o$$!=`\O5H`!Fc&]XS<bD_oQ6IFs@L/uKX^H\rh)_C(OqCbNg;G4]a!,VqWX$-TY"hHm%9[D37'.pD^cs?J5md?jg`>&j029)jE;`A0:<9PgYgq8%CXs#2Y9?&F^SQn5-HF,Ji9F8tX_aZ7]P^V+a3LS8l>p?8/>M-GQ7$L]H%UiYn9mpk6BI88#/q`^)LU>BJ=CJK1P7ss15E[I'e2NqlEdeR2%<Vj7D@QrHcEMa,j(D+Y\YR%ak7HY)$Z3Q]DP;#`ZXO\RSbI<:(%6cj/Xe-oa<.p8dClU/+T"VVN:]6@(2^Xq9<,YEVf6Y=7TO'l7DpnV<iil_]dG<QE$)/'%lY&JM$\n5IbN4-CnL`Fmoc>jt'1lS9l%)SAof)m<C(qGX4]dEI7k60VP&bt]^`9?'R<>dn4f0%JL`qT7lcMYXqlnZI!VZ>,npU0SB[=?N=cqWD_6:8qX[iNbfR=/Ei5p61rX%N;;(@r`1@CnMWeX2W:@^\X`*GqXa%&P'ogQ[!WKf3/S;I&LX)4Zi(QU.e^($K5#5D&:(ApGrOA*"qmBP7&1$-++')(rqJY5@KiI6%Cj?ORIs!W/$XbFgKp_.,&?'2*Wj=s?o,Q#27-Gs\Gl,>/j2CllnOr:C?[_@8n)B#bl$tNND@M;^`4*r/h.:b+2B6987n;:]1Q&ob%RA$R0_CH0%mW=(n4e.Q5qeN[<Snc7imi$sR#kr61NC:"Bk24Yd&5a+#Gjtc+5/OC_/YI:F;TqDq4]Tg#2X-M-^qa[(78PrTh`&WK%E<QWAp7hZbhEEhJg:-2,!VesTSfgQd1&[>Y1+ZX;2"f\'HFQ'"_5Ti"L"DPqm\fJU(ZA@%5#-DEM#r$GAT68g,f[]:Mst(T;0-u4%C'=Np\GUJ'[HacTN,e^n=M@aZ/'9-'%_,iRCAR@"S+bZE>;+tDI0]eZ+Ngpo&0q<e,i:u%Prgs1NJA9tjGohb<L#KscKVR:2$1_c%Vqci":kOC.q'6<Q05D#J@sGL%3[q4)*qncCc;h%21t(#f4W1__9G>Gr,9m?`%.;Q7B0Vm=OWPVjYTP]$A+i:q<HUcd5k`7Ekp=KC%#L2mLqaWE<<Ol2IHO+LOn9"2!D_;X^=:icBkdDMO:^aTV<`#W"*3=pgl8g/0lHi8QXoio1laK=AasNhblAC1BcWAGoT<QJ_CLLNo%1/B.+S*5;kM=oqUc<>T3QRPn_%Q]N,iA-RejK@aNQZL`XOcP)@ch&]^JWiO--L3H$A7#,m3`qA!,=]T!a'r*sWMtte7SXt-C<]F:%AJHDROIH_r<-\]MqF$:CWYr;+]:QWX^\;#OKh4c7<KIUaU454J5,']6D)3E/S7%Cnm=#0JAJ49*-\iK,`8RkE[2k]M=^Yc3e^cu^%$tt/_mF2nf!!;3'FB$)F'D"R2RPe7o-j+f6mS??2SOT=I2?$o)0RBDPWlghbRr0]0X=`sFg$0/@>5_Tu`YU/B5GBBJ`>m4/4Xr3-%,gs:c3P(?1R/1QdTJdVBaTELN@i[r0?=kH]$%nT+2LL);h:H47OOqUeZA]\?Hb#gW>2>_=35*?1:;7)4B+?Ps!<9+7MGm<mN)$k;%7/]TE\%d.^2r!VfQ%(&XD7NVR&MA]V]bskS_K=tT<4KB=>/?%_7ZNB=??KK3gjC#3TD)bd1$^&Dg^uLMaSc07Nu;TeH_bFCZ]l_6%/^uoJYCr2>j7B)5DK@m\%Rdt?MgTU@!)\5E&Uh[`///QV5b'QajpGnbEf!['ep!Y<jdN$'O2c`[M_(.>D]LS7/\*1VjWd3,"]^`h%-mXn/`%SENm%XEG5!S_=/rQmCO-81SGI1>r8K?79ZB;&#O-EB#1f4@QWof6O\*\8E>>%9jSZ7QJ!5XF<ljg<)[[!rVIc$h0:9q%[%Ob0:5N)+'iI^SY*1@`p:aYqINWhS45a_fPTV+_e1CJ.h\\s]u4cZ6@#&?BRFbFC!SVs&Y+n=I)0#p?JWeEP2C#3I#D3`u>;isgIs%48Mp^16[2hSVX2]Q&:TLrEN.X-8p3eEFDcclZ_9cA1BoUg6MTdTjoY&a!s0=V(SLcgHj;f#3u=)&)3H5U\jS&-cd=<#5Sts,Q9+*%CA$fal;c+j5U3l*#dK2\is6=&!.."b[L1tHh55-#.18ZIdFaR:MJ?Y.F!aEG!918"WiBQH;obk)OAfsm-!FMu1U2.gprH5WJ3r"$%72\*.E-13&?1E(5R[!MfK%79,f7pUh]l!ur5+1<^>*bh[lQWJpFgO2skRaQZXiMD[C_R0/g98uflm<"V(fG0#a,u<:kD9ZaSM9fZ%T=[<<YLGR7NI;L$S<<"8,cH0")<9<!ais`@?A!+"1-K>?aOX?Gb8p6BlE(a@b)osaRdt"]FDoYAaG'54PW2'&$F2b5>gO:PLB2s:%bafLDZ,TO4rD%:8*P+Ed#M!3Z*2EGmMQ1t,XR<RGVma'KdS6Z64dN,#nI9JGgfk<Ma,_>>bVJT/#LTQm$nF2)>3+!S1ibPpP]+o.%8fU%;\^n8Dr)rH_kZAk'j;Q,>@)g#s!D>TokpgFAca_'IWgf!MNJ\ppYjhC[BjAW^H`n-PD?MKm^Hp8J)O)^D"&r"s0JgVUfd3Wp%oFlUjgMXfa7(Z^nRP@"3&FI!?H?SrB;Ar]7Ih7AZ)0PY6?i.L<6orbtVUH]EbKHqDKi666V\Ogcpl4&e0HfIN!%[jt]+N*DD]c[T%"1>9X08E\p5f;d:9o1fMig`MSDu,BLH?D%pOcUdc&dlk^eW4hs4/p_WM*j/V`#W3t,,P2c?LbZL0NQ;?E%AtZV;6pdq\6^LhH?R-%P@dV`9GqkP2n;3.@J:(j!a+m)SV5n<S^31F[cPYuD^VnrUA@0bWJ28lluCpf=trcFI90\U'p6J,h@A]8J@<863ic*kYr<.#QGQ`K%9Q+p;$f-A^Y7><!N;aYgNU^$*1E^O3\j7'j'hoZuYGt^p[cG/A^bW%Ne''HUHT/@u[D01"[80jg'gcL%,(l4rLb%C<DC)3D,tnda%9F^9:,V`7?pJLRmr,e&@I]</p%a^N\Uj>4tDflL'7E["6nQV.[Z^;BI)B7VIG*S#i+]:qke1V@f/kJEMA&Q#=[ITWu?11df6N?nK%+jP,2Yl/=*#cb+l]>DE*c"/I:Ts7.B#!]Z!HItWR>"+2m'6L`pJsgI2L@>$=H_13KcFqjo*9Oq4/W*;YVa9bob=CYP)T!PPk<-+V%qWB[c9J`[b\Uk/3NXnA=qsWdrRSf$G"W&^(6ug'0b,4.&nAH+.mH%/H)(V'&3&L![1";jp]X710:tmNgU,E7SFNr<W[mSAmPI.^!%W^Gko939Z(HM"irUEF-hMQtSbYn@A'Rn]dbl-Q:$4)__@B5Goa/_c\&Z#"4TOS&K,48D1u<(dfaiWW>K"qB;H1Tjj#_=_n,fO8qI%8@I<n;GL)_g6N!g=.*U2Qi+N1b-NXCmo>Q,I/+4^XDs45I37oLVQ4rXF^,Uqq;KEGBKO!h`G;Wo8OR6IR#+KX[=')Yo8Zh%@P=LR%l8s(k7G4[*[BE%r9\"2lHACu:9VcTBf1SINIH@l-74n^S!u7$.Hm+cE;,5;e:4m[SRO]3M&l%)@jX]9U8cRsC2:/2:]MulF*U3N/%m]`Os&p?@'bR4g\$DQ09Mcrdk,(Y\aDD%*#V=+3\XB[B:eM1$6mr#HLbNVhdI,a1J*!Ut.7p>4LfYT`&_"?HW3r&5nhTA,'EdWL(%6'=@D;$]<@?rrIB7t[AeP&QFNH8(N,P)k22SOCn,X=@=cJ,\5A%K1a:Ja?5WT$VJ4(;MX+;<3q2.QHP.mXMJ`UCW2>MqidOUD=p[%%a82*c18N\:BIfLg4[.fa:opT0RPnEI_M_&Eg6&6XnG7?oioi).Wp%@pRdo<W_Dl=AFB=K!B^M\jZMn=nHE5).N.ZgmJG5o-#1Ot%C:SYE/lB8N4_fmI6`1ICAi=fXpA/QSlZb^sH%f<hKXq9K]g[0KN<o@ZCKaBsb5GBOm5XcfJcif(`jV]oZ:sGE>u>2p<+Wa*h*e_S%9.Klt]sfDh+%%DToo/I4>5DZW,L!@^DD3>1=4)AV8]3;.-G^>eU-TF''.qW%;9Eie^,Y/3jS;+Dr&SemF%\YD$3Y>o8nhER4u]hf%C4`TVKGIFBnSrJC#QhHacIS/[^-*)>r#.A6M"GqcA3NDY9XJ!(^ct:-YKh$`-Nn2lh(?jQ,b@e<iNZ78``FKA=1QpB7Y[j"HU*_D%$-#%u%$iUF,;\:-&i(@D'N+@Z+?i&RPYFts?,[n\6;U-?O`=):^j=:8k;(4Cr,D]^4.]ARAs\V-=!O(6`spobG5g>^PcH#L@<uZA%Ls&3cVDI?iThq.Yg-=[QfM8i'Cm(dCV,1M*iU-.uiI*oqAeJ[[bj"2D9Hh<WIp)VWlWWPrQ0:6uC^B5ukW+4\(6^kF!fMRFPAbkr%k:EbE0d+*On6?>5TWL)/,tcJ^r&oH)doN#.)+9Habno%K[-c:%6.q%[\*M=AH:$8eFhDNeYd1k(n#%snW&%"I/c"(jRem#1ermjG%a8j.E,HN?=j,/^5D_!d.Gma)@)M!"a_.C=*+mg%5TKK^\%.j*1VCV:lX.QO1]l^4)LtiH"6mr_<8n'*!:_ChU-(7@;1Q`tD;X@Nt%3p5*7.o7<n[LJe&[f3B^rcgpS,_!=FlD$`JrX:>&+?0/[R/Ej]H1^DQlh*(W4!oha::7IW3)p'WWlM,g$[RM[fF[eM;NquA*Nut`%9$rQTPPXI'j_80.f"'\eUq+qrZ7>2`qGS;T-f7CtA"oIa8E4fe@]1:5#lR`AK1pF6*S^b&-H[<H!+7n9JLio4f"6m%mbS.=4FXWO%lkO_`'s"E!E/<Ap!rZ$`5f]#1K(F%@G]'ch<4H4c(6F=+4Y?r5WRXD.PueN+d]?Kg*KQeB3*-04o@&aRo)sF%!/eCS?*,kU]'n26%\^FJKioBa3Jlc"qHMFF_V!c,G5oU*WW+rZRkKYF*aJY#V)[OK^;e$$L"G%WaR["I91rm0r(FLBO*@u:POs?Xto'`NCeFC/SgdU6Z%*47jRcJm<@[Uc0%a@r+F5T@3[93V\qP?ZHbVJj,aL:qm)qG]1<PimFQYor9N#)HN71W1\GAcO7oTrb;M`77pW&]P*EoGU2rgc+m>%WU&0^Z.'':4l?311m6k?$O1@^?>p2<W$FdjAG7)N)b)gIK[:6k5F(E45b3eK/t\!p;RK\=_KE:untF]H74'hk:D`aZ(kPD3l+^Ts%GLUG%8W=T^jJb0]G3k<iGHa\&0d)2b-rGj:MgN[sHDdlA'P#60D5p!(+2bq@PT[h>$k>iQm82W3GQp$=QmYMm',;DMrn._`Mtc!S%R"dYp#XRq9<cAsN/qS"39],ps*!nmk2K3(e$;>k$js:a^rD5k=*=Uqdn`W'_a<HMZ'H-0G;bV6b3jU!F"jPD,oVWa?*_$Gm/p`5D%1QW-53-$H=Su^GcV8/;MXKB$G\UR@"=Zf4mPT_7:(_f^/TF]iEnT!h;Le''pidrC,`bc4RNDTSKcboP9+!)=%PCa&P_"S3++e%79%f]Fc\(N`S=_l`HGVI<]kUE;:*kS[[.o<ZA/,-m&pNT[)1TWDlte9e8?n@GVIH1F!bCLV:=6t1rojn9D06@Fk!>,R]'-R+Df7''>9%(Fb244e\%9j-Cj+&dO*p#2'_Mk68IAOq+Te+ks!a-LSoi)`db)s$UJ(f>*q2HpJ39X"FDnLN'ZWD5IWpBoK<EHSP^7JhbXR]1'#o%);J0HVP\ilJ3"J2W^W?A+GuD3\snf`");lLkH7[u5"I9^-+\lj<";O/n*"cJlt-[FLXfHZ^db)R""ae4(1Xo$n'Ti(!#0k%"KUd%%Nr!ERmX*G,fVXIBN]/AhI`gU0Lkue:"4a(b(pEbZ>WiP18*b)gmLi/`gsj;kaLq/V`qe643QTD`/^jRn5Q\p4!!K)op,E$Z/\2:i%HkB0uI!1M#Yh?7)[#uGp3VNPm%$@nc6ek6qNDEM(\ZSDeN9?\<^5RI\=@pp;f)(bp?#TJl7!N8/P91_R_]VlGO`)#lB8Ack$-Ap3%$GW1WWAP/:(W+_jJOh6*ShZn6o/#UOk=<URmW:Ki1rOOKj^P0F)Vs1Pcss=?eNf:O(Z<U_oN$+t5iG%4eoI<V(WOkK6(k^Ho]*Yu%d&24%dPkV@Je-)an!X'o@`g/Jh`XMO7DDUJ-IJ>Y:"uo)+Dp=H/)G+(.stujTm]>Y!!I6LUUX//AaVnf];'r!*OL,;_j/WmQDP`k%OjE"sZ*I$CM3hi#bu)e9Tt[ZT91Oui24guKf+?[>NQ6o.Z;FC^@UtC+-8sLtn@2?`VYMtd;j9MEl/jBaV3F%GIB^_&QJ@QdCI<:Z%jHhqcBmI=U#YqJ!b;Q6n=]E`<F:gX_fN:WA:cm:<*?$O%Ub/Iu`<s8rD<gdkYFN6\Z=2u-e!"C!F0!h0bpbYHb8$5MUP*4"=`p7R%C#U>)JFMZ\-IqbX'5@P>gik5[MJ1F)Z8>ABS>AaM;EfgJqS)C+V\`uqGI,7]NYjL(Bk8^u<0#Fd$'.4na0W]JFbf,"^^tcB$PQPC%XCDF8=C2Yb_C#EHNbE?V8K]>T2./s,K!/M+Xec5`XD)klKY/9HS+Iml\Z$-45+#$TG0XgY;@V1'!2cuuJdbBU1k="sI'6&GpTqU'%i[M.ZOX6o9WN^P\hq"Ws`H(`coXAso8qh@&Cc@DofVGuQbHs1LY)br,QFO,eN+o6NN.V<nJ^,FG-3:Y!b2HQH!kTh?Bd*i[)Ep'N%A$!6!K+,d;8`Y,mqALs_0_6i`bK*@\#J2M1-JTs_L?gqr^!HRp!G)^(M_#6)QL.'2YXcWVN-2/g\;3raQ<1m1i0>!>)iE&'ok-1+%N;Z57LN1AeaNnU?Sm&NqK1M+"#)c:3H+NP)JG.*P?p,1f'UsYiHc8uR>SmIi1!_:#@N8(?).Z1QP!![+2(SHm_LOZVj$\hMPmP`7%mC-3?=C>W";[n_K7V&r;;aU+D$<EJUEk0jtrbffF;QGK+oWOf[YE,ic75Ru^,RqSIYQ<LR4#;Xg^*5<6Te'giqK2i?6gN6lIsn3!%Fk3PeeDQ$mS[MSToteoRqbY4g]cUH+n^ptAe.Ep(G[(l/(KPT-p\bl1NE0!":lV9$a\WW:2B.fr6;D&K[:hiXNH0pDCRTQ1V(,)*%%UHG=Fm+4!me$uj>popkF?'=/`fs@W8S;8)1`U7B8WLC<1#^8+#GY";'[A%uR"pE[pTf7fW$fkJC5l.\'j<dkTg;M=c>!oHcIse[%pXm3.;)Poq:O3:CZ=f9MNi"OMhRnk*UZV)bC\75Vl.<*#+qdV2-'u`FIJD@c=][,LjH1H(kAQMn[XHpY3m/\lTH]Ic7bWm9Nf9\)%*:M'M6,N/sUrnXR[kR4[h_nu@D@,kNe9?_fL#IqV<k0mss&r4hI?CD,6Dk?@<>sk;fod"8?JJ.1]]\m-o^?Hn9%Bbo<6sB@0WU%n%><D7oO4nnC*&+4,g[66d";ot)Y%rHEGQLQ5,?@IB+!)GQMD:qig:[j!i-L3OTh!1%PTW?Ck`0G%Z8lrDPH)a:"e^1EMtA#eTLDOj%c&$BE,(_DsB'YZbXd?t3_@WP,L`#tBiZQ\2iU272Oa)=>S6<_!/OBk`?VuQ9VoFPDeO1;$iH4Qdkc$Od>$ID^<,AAl$$,4TeYD?,%F&pb#*JWChkgaYZ]nf3M1]dQ^#8\CAFaqJ9:gj5]C<b6lSTnXOX"N;oJ_2%:&85@c%3PmiLr/.0%Uc54q/%[J^Ur&qpq>K2!2Fh-%s7MnZGdT?#5Hi/a]KQIpp2Bsph\_o;-(@%=j7<GO[r0T1E\p1A3Ue>:3nJ;,C@I\Tg!T?fkGT5TeDk&+nuE!.ah"=-,U^PB?*`4s%6V+9iSPd:1`iI_8*A,-lTooj.[E/Ai)c\a[er.()7?(Io2!uMGTYO?p$R(nlqFAcTEXDFrmBh(3Ba5FI.19`o21*l9=\_=Wm5R0E%=)aMU#Z_J!5D-IM*RSDET.!/B=:]pD22S'8X'm,JfOoQ(#,RZd,3SbCl,BeX5dG0[ND%enMCl&%;%&Q:*Sh2BU/HmE%4?-)*jim(%&CcC>_YPDP:0_/#?j3[kpoB4q;d,s[WiJd92oG=2?L"'#3A\J<F+d\(L<Y>Q*K`q0C-f-nOd1=N\gD$RF>9%pC=A-!<<@oZJbmM)%ZX!:gG0S>'/ZWWt\>;TY'TK0*RQ40I7#f"&>@-'H6OFDXEI5M)F#0&ndoDsAMm)G"VbFI1har_uDM?TZ&.+M?,f^R83DH<?pU8.[%0^sT9)b4AcnZt1>bAkp(O/dmoJug/>$b5a<)J]Ig8=G*T6Q'l\A+<(^fQtr[d9KXsR-M&2q*MMa;84QDA(5IY,LH3Q+%St"paW[B%3,BItOph]OOk*1=3c-.)N!.H$/$;_ONujOD8CCT(kNtWk`+o6L&j-!FIH%&e^E3j^]l"lKYG^>H,sL7VjAIN%pV(XKp_kNX,%PK.%(WJree_$q=Sf1TO!4IuI0<4%'kaC*PVrt0RLZ;6'/=qM*,EWlf_p%7KX$G"Ek'5-]prItSH23SObaE*!TPrD/p.^ad;ZRFO3ZPCA%<^KQ:^S5"k`'(Gjg/X;H'tJD,kRDn7Rs'hYA_T=X6Uf_%o[G4I1\J&lD2PV3&P3gW4ZH1J?'(<8eQ"CGKae<(JR'q<-(Ts%3om_A%3P^uO-A>7!#]3ckiY5o'gI4GYHWZ0hh6NAO%b0rs):,KoC<<@YG"GsIY6a_F$i$WY/bDcqFoNm^gJF[Tm-G**9D>2:MOYh?bJ`+i%N)N@p]_Xm61dTH)[<0*@aQ&0.JA!'/+RT_fj>G8h*5TS1943(E#*mEBhHc_sLft&.kreG6D.L:-e&DI>0TGbOK$nY(`)Wi(e;L+j%1H*%EoC>nBs6D9o2CGZZ($&MT9OF-uRt#iMs*@a3'\lMX^XW=AmOEn.OLT!"\A[!AQ6jcti_f!Z.uFs)KmM.[a00\'>kQ>$O3]`_%lrH!":AC\]9o,;_g&8Q6/U=Me'AZWL\k6V%$CG&P@2ZG=^'F5+U=7V?dg:O>*L&>uC:/R1Hlf38!tt''h45IAK.JCTTrUX>>0sd,%]<@Ue8@<JUcc>jW,.ud8p%%-`jr^JTSu`#;PCI93j[6?MrV(.ih7@nXcP[0K2!U#cSr6;pTKJV8p2FEU7qsHg9IZ^P^?FuWml86m%oA[lL)=MeAFSYN+l)G)sL(S_LCe_=2Xi0-9Q!d!i*W>%^5L!U7a[M9<DbFuFfb0Ekb7n:B(WT]Kii#aEmj4-rH:IQgC#h>'<5&3t%%L./gYO#"2SmkJR+MMG?B#,V$gD>gd=H"@I.=Vkf?*e2HTnGckdCRcD.Cm*rc5JDhM/MoQ/`oMD9aO]_LU(8/7kt7s<M2.t/o%"X%9TA)7MI^8O^Q9222Fsl/1ZAbL"E,_B<hl*t]77F;8DB`nH2HW(f$kd^/02-XjK:Y7>!Jai\=0+iIZ.#U_]&%S/>1c.PoELO!:`XI%I[OS`P:%Wd8]%,MU!uf3ZK<o4?EDK5Va4tgW2V56+=hD&W6:s[j#tYR-CAAZH`Ab"Hbr^l^q.%DjJJiTa^*&L)Hn.:-[3@S@_*Cs%>h-bhS-0h-7GXG.\#s5i\pIJY0kO^n1+>_ITQR3%/a1@\`#15d?^5=K$::BQC'F`Ec_,C=E5_SLOa'gp>.LQKMF,"NJAHds+M,fE%(n$M8fEb![-))=D3A@sgfp>fN.rRORO>L`UT%CW6)NU`l7Y\^J@qI3'3;4G/0S1!W"A]F\ObFT3KN8oM=@grZ9lt1mcT;^Ghdomh%IZZP*2bBr<\Pm\T&UUnP9,@t=Ie5O/8YW2qc/@8E;G-k[c)c6+`=03^.O>b5(D;K_#SHe/Z@qAdq6kQAO2SYWo1.s0%$jAsgqM>*%<1<kN-E9-(M>?WNZhq)gZUYd;8JEsrWV2AY[X&=R]%!M2$ssY\Mfbh"TSVL8CUNW0Qai+"pl`(cR:gb?@KhJY&$R!6@$IV6n<ei@%Hn.LsCQG[6X+cVH'K@n/6TGWVocN4:d$-XRjjg!<6@!NI*d7j?/_O](@u2,&l90:90MM>0WQ(KX7:hC1Jn4^9$q/?=6s=0rk!T=%%'!`<8J%)Gge^/d"qqUp"6"jeuf@t>O7CK!C(YQC5A@Q8&blh<RjIJZ\aRWNN>GDK:3QK9Q]c>4?ISC&kB&<l6<mG[a_L=s$qBBH^%KN\E7QbTNJr`+!odjb5BdVAV*Od5l>E`uXQB#^(qg9]aEN(slg?DKp<^;#S*5Y$C3PbXO='Qjc@$fl>'])QajVqWKqX+0sSC9:T+%H3L*'RP!7(-*'d57art]WEuL7."Q,YUBGR1;_h(7Jm"]Cd8Cj#(sG+d&b:8GlY4r3Y/:UiDj6T!>*:Q_<$sA9*t#"<V)QcA."2sQ%-^!60p@`q3nQR8Y8E/kpTLGUf('L8=j6>/J*b+)5Yr*8SJ1i5N@AgchFG/]*Z)ZH[VXIDVnTOb-7'+f[1*bfQKRL61e&6AZC737"%9J^,<<%4j#HbAL:XB$-#2FPbqN:B#iCOuIL^Zcm*$n<]n']a#.C+XAAo6HtBm+U'M;">7XMRLj.SdP#H+P?se!VbaNe0/,8=(V)<%3eK*8&8>[04"mN[1kQnR_!1d4CSjh#cAR@CY:.@$(YI.SDGKtB)pS/Fm.;\;^hqaNU1+^hhr2/(R58\J531"K]XIN-&nB?"CY\W$%Qad7NG_[pAdSr/UZf[gi+25B!fH.'uNJ>]4l_E"ub^C3]G@q2gb)sV+rcXp6OgO!hrr2cWoR?SjgX)9DZm4\rQP`KgCa(h`QE.Fb%83:\0O=a4U79Q^GP+(Hk7u="j-WghD4[j34`-Ttgr9du(NsmtGOhcujjr2M"*@dm&=i84hF[CSW"@Smqk@,G=ZMls:^HT^k^j6KG%*MkdP?TE_*Y?"n;VXoXDBXH"X?`!Q\&pak@2/Kh\RS4nBbpU$%`+Wic>[=6Jo5_E.B0\@m]Ap,2<;q/bs,N20d/NU0V2RGg@H/'D%[NNlREMt.m89m>CM\\,nX*JY7Xc#F+ZG.>j#8WR!1CWPt"36;U#dup:lg<BcQQ'83jD0S8\_3C-6-aFs>u@Nf.!et<NO@5ABuf@g%[WGaaOIPO*Q=7;2]`,F8bK61DgphjYZm/\g`\fe6>)E<*cX?11N9VW1*h^i:!is4`==!:jN]G&]Q%Q=*dGtJ!ajg30Go;cKiVr*K%!%;ch9U2)#HW?fOd9D_^7%fj_4YZe):1U@0/0$qA3g"Oi^/WW!!P,-R*ieK=*HQEi8KXms>Y1?2no);CA[i^R!@jGo5W8E[ahjR-%`/-ig@-J6E[5B'PZ7@O?BP62e$#I'607[j>l2MC+,fZosgGVHWA!0)k<;;'(^8i("=ooFdgihC4XnSh9=9NUkkr'qIo\u9#3\dqT%5MH(iCMNj!MYrSf2#,9$W(-F:db"nrbAM/X1OBhrAWq852QpToHOH!%pTKHtg*+V)6`jte[k+s7CWFBY4g+&DVpWn!)n>Z^eiQ\@%qXn:,?K8Guead`P7PP[1ESiZ"lW%fNfQ7m@+HDDq#:J8"CBQV7DA$<+A2V?^pM7(iq<?Yq[8[7;l"#SH5\+56D3Cil;-hnSOm\=i%7PoF(@UluhOo5P@qdH[l#\hS".)E">Mu^QI7=^OPcg1OuM1:!`T?*ZeYmQf8=C_jq?:fo-P6t'E'O]!WNe:HZ\AHta]nDQuaj$$\%U3&+gQNaZ]D=_0'oj^_=TYZ0I4Y#5$AHtZDO7b!_3pH`lcb,5TI#4nf7Cp+K]ttG)j_">oCL?PNp/"j((#*/P*/`+/TNUALmQ)P=%NLAZ6*`422oM4biKl%&a7C%JtZ6!S<Q#1FW.j.BraF!M(H$i.nCm&blc)G/d?X>,j_6-^o5eO+,GbdAYQDKr/)csC6@3e2X+]JBs%Kc%&G;RX]:FFr'aRsG5M(>/BZ1f:C65H&9;08FU2RL:har9[X"N$PiB=1KcH[r+(R<H\OsU.E+lDjisnh##dH*VqXq/p3a_HJpWr%ViNAUqQVMM&Q(>s1&ED$#"7$^F_5\aX^k5=5.-F5,71EMK.d[;(SDUYdS:#gn>/SH$WKp;*3CFZ)O<BZ8q\sN#aK^$dXh-rMF.7l%Sdn6'"Sf"322Ob1&r(!lQXpn..hWEkDc8=IcPn5mWQug(``A>@0;?J?h@#3.6),&sEJ;"+!DH]cB_uhn8XNMLV6IA,`5>Z&c%QtF%TDPjaG0#32;o5`09?bu;7)'@C7p[>.rU<F3KRcg?M#cZnU)6H><)pBo,GRUui4Y1f''a++DZ:[c8"P4*/K(?*/tAdfQut[d.?"ZI%&"-b(r70b[k@gDbj6r$Jjab$7orE>-W0gQ/Re05%W>p?gp0"'\1aj>nCgpg\7>jO7NN8Mj\t)TbemaB>(#ldud)5<DM$<cLg-?s%%X;!Mlf57E[[akV2M=u]Q.8#[Hoauip"`m'*&[cTF64$h=QEM\qMa.8Y1bi!/7p=q\eOC#3]J)YsA,sAhW<*jDMZoSQq6BJBN`+i'%R8!:-<sGQjTqrn3lXDYJj`s.L7]rbA,/b_,O='pms8F+Ts5WEprl>'6DnhmG56'rPlW<oT^]*slnc",+-&M;R@N*@aEerV_4aRkL%ZI_iQh4T-_jpoL`ZTqI[V!?77P^3=qRcSAs)YE!M^];Q"2g@(Cj0E);.jm2"Yg!T@2n7"C1ml<[`(]8:Z/l6aJRL-egI':<W7Re^%GIgfuUFm260[2OA+S91eC&=:dIE!1I4*0Uu8[sTFCe+G3?Srdmf>HK@4h_l1(R+l?-4$oU?KC*L>q<LE+'RpCP$XRQ>TGG@A7ENg%XZTmK-4&:=PERO)>>MlL0?O,mpQ]0T/gj]O"h']&9>f`>c-)(Z]F+@HG1k,_&Me*A3L*!TM*sqcI_(^2_tS\_'Dk""f"#_qp[2/M%/";(FLL_E.1tc/HW'TFO5gSR,Kf5+/S'^_Q_RQkH/j_@3h]PHI;%B-u2-9U"h_UWkPdg$(T_ku[dZ,"=Lr*28;"u9'-\T"(m:4*s%eO<P5);Rcj=A[Kh6fj7Dri/X/ffREdSDYD4TdIjT1%NCTU\po!6>G7+!<3ei$H3RIJL?ttE>m7(I!L-<$08hsg:1NrO`U2`m4GGY%74[r?l8l"[n=kn4?+*WRN*/BX@P3#%P%$hWB1XdGeP<P'U_6p%mEX-,-W>cS,qHs3M]g)A"4HLU:4X;`Fd)L,;^b*E='3a`3(U65%KBb_eWjA#IOq.f14QE"rB9hj1Cp#\71-gaDAk[\5`XpH`1BILqQOCQ%jd;UX(ed``/f>?E3dj>s1ihu`=qF.s]b$"`[)`IqanKVj%gbsK0V*`2c]dfjImibO+3m>osEo2bsq)d;c;CS?C26-:Y>$;B4MYg?V.).22oXt;m02"mK<@4L4DUB<pPg68^<-23YOm\L6^2=CV%)XX!<Vq3)-5j")!'F<7R_?nIA)"\G$6ODITrisP+'N#)bOf8Q:</HS,EE><:(K>*mh+$OE`T*s:HN\kD.]7N;aIa5gP%f/@UqnAr%osBgQJLqk>F*rsAU=,1(_MZ,<^ULULe?0ulqNhQNj:^Cd.@Y=l7GXV3`H;G^>t]G<1a=uU>+HZs*oqn:Q"ma^Qn`\chp8+!7KEqA%MB*sY%1C(WH1*ldq)LBa=-(01:_$)RRee-"ritloF!aV%lAf@O`Kc"S:oMasSsq7#o*&B16:P"pV!<N69)\%?FOauj8$lJbZjs+3%f"!pI*HA'A>D&okQ!QK>CPVrG10(GE_G?>oJ&_UQGP*4sI%N!L^ilu1'7Lcf>ud->p=_8^*$e:_W+_*;''L,H:XLsc)-EMPlhhg8%E(<!:ods74Ge"W[d4clhN.frFV>EX1lN!l/clGTQ:Jm]sWjJ?Ld.L8_)Mn0"1*WQCCLI.fX0O%M6NYN9RPEfQ=p#246;iDLl4_K5%:f9j=F1<HenE61'8fM1j0&u,g'o>I&,3"N:$4E_DFXWaune,9Fkp5oDAe\hK'n&rd<Wl,aiY&Qo`"*?S'=EQp-Sr&qXUePl+G$Es%8l&Q?oXK->!&*u0b'0E=*QXO-JC>PZV>hH"Qu=D#'/2CYi,@H7rpcf\gX+9KHFkX$<p,1eo>!NR.7(nTiI2Mnr$f'%Fsp5'WC[$2%[9qB3(#V[W0P?SX*F8SH(hQe<fG]<Oo^Pe#h=d`8F=JT<mP;Ru;X5o+HMADp7]2MS98VMl_3psrDI'+6ILW*!WoMu$f=9QF>`#\;%HEFfi7HF?kX4i_;!)UjBam2#'&lB4?h'DM^EB9(MU^FcnM8XM&(!MRFRD\dlh8j\;C2!j"fV3SC-]cOKQV<W!h^$W(h^)^SP=94E%Imp/mc_30ROrMoU,^.c,e#MWP?jV[1+!&,%+Y%X2>1C&L3ekV385["S!-'WVa="7n'-bGhgnkBU-(J\oQTN$o=\6jZjSe_j&T?g>%h3dbf0Ea-s!<Im37;"tdkB=qKT)AG_9V_8,R8=(8g4h`ki96:r0O#_/*jPn0:t.u'W-1.?Jp0i-L>'/=k`ruA-h=)\7/[Vp9qAAM%5=_#Ad4bn]<Y/$BT4b#B+@B+XPT=0DT:ufLlp0q4gkL+`5j&W6LbtJNjX8Fk8RqP<<p$uBcDn<Gh<Ei4&,mZ5as]e+4*E.6)+\R*%dF0gPDo[81+.6oBTWeZ5WCX-#reN9%/=+)IM92&W)fLG.LSTie'V;>\*)lF&?SB5&26=8(H:B_B+m@_#[^=7ZhA%BtX'[Z7#clT^%jD6bDDjP10jIqL(-HUEp%,fF";JU+-V\thIVe6WJ"+(IiX!<2e,eUR,&UmQ9#<D]ad_*>U/_cQg]fdq318d$#;Qg';j9_.j#/NEU%9ObOu;pVC8J5>9)eHfaa,hlacEDU2s'C\TE'kF9h?Wfr8bKC^01*X"sW(+9RL_%:[&Bf[C-FU]/F&DlKMdo52%>gHf7Fjeu^;O^3%@k?d[R69iJ\OEE7gE'*u(Qh+YjQll\:n;nHJDfAO2/AkQ4h<[/a5Q+''8V7\>K7smLbNBJgoRqY,V`aMh5;]^lDl/pUV533ri]L%%neA`=Q]Lsd3l!Vu_!+Nof&k+tGXpQ]gpZ*j#aVTI(RYUCUEp0IFZ7dd`&7AsgUoWHapO0$]0CFiC<j1!3!fOT(?SStQnNFZ%@0p+%6-7Jh\372O_N\b))'0:@Xr?rkrhQ:blma^qe&f,tjs!.5^Tt<jZl`U>c[#ZtN+DbIU/.-JP]kqX:,d$5<S*@HjP\Gh:._<[)"3^+%[MJh/=s1JH=N5::k:iLSD1qGB)SV2IU*C80YuS8#^/luG8ELqp.F25ldk?[k^/\oBd>Mu?/bhG.g='*ucq37S3FM(#J;[@KM'OLc%AqZt1+#.oH$ca4BI:__HZutQ`X@/e)fVGqX:.hm,6Am$o\*N/4>r;78$!M;6EutE%0%pdP%3JeX`%m@niG(YJ^4[;&eAId%D:H#(%e6F>t"derl6Pc/;#04M:EX#YFJ%[%oOB<:&f-gj.A"Rt3H?5(Oja=';J6<A1'e<P!%?^.&ZXp[m+dM1@h7E3u8ocligehG+F4+^b%GT1#(Z?c-]23r\m(Aq`90W@`;KWR<@_0C*q9I>N3n]5g"b\1Hf>9"^sj\-ee(suq0UY/gsebQ`3G8fo8WeQ>0S-DBTme5!STTh3s%GLk73J,*Ua7*CB[>&o,*KQJ'X8g^:i,a"`-74,T^V/Y6fI(6N8CFF`$W+fVk6:WKbdioB4U19XYPH<VF4a@4P.i$T(\+!RD&["ID%Xuf6<CY7BaDTg+@]8g%OdhDX3F14A=/:o1j=Grf+a-1l/RW-Nk=n'R'()LnG3)03,d3T@d_6@?Mr!rBfGB?=-V7R.YmO_X!MDO\k%recO\8KdkNE\q?!nqV^WC\O+-C\LGj8WF>\<]7cOmkMW`d/H0JRcL9sd9'6EMqi%^!4c(P<DlnKfB'Y563tfuet\rc2ai9jeL72#%8^sQ-&)t=X]RgR*p!\W:X'qT^d(_?Eq%:u`UATSETpFlQ$N'q&9*ITUhR=!^Zt//:`WR$1JaP%s(fVToRtk-f&tG[jKOO'%--/YK%s4lim?;]K/)^8D`Y$_HJd@HD+ZR3N)TAVD7_!TFFH/M8u5u6AhQ,c`XU]aOL:JSZ&[AF+9i^<INg!OqK[#s?%+Q4Xu7`gXrhj%6:%q[frM4$+Zi=tP"rM<?/DhJP2%E;C&k#>=lME8s.:P(lNe?Dc?e$85_,k<Q"7VO%r1SZanVUXt`.;^?\ji>!BW&^0.%L]X13Tk%Gg%kF7mBHDqKBWJZ]!h`Y"P*p;-u:HR.2;prlLB:i53WA?cIhRW)X#31^DJ/V>ns!;l=3AMsRDR7j55IPQ2\6ZlK+-ES7'?'i)KbKf*%>>-n13ug872CN?<QOU><^7tp[EcC&pWW`W%ff7_Dam,QEUK*c!eN5lSq\W3$`De(GfAC`O/\0,"lT6(j<T"%K"4]q/A+']p82Ic"%gZ>P]`oH)CAF>&"+n(]Gm4;/GB5?M^[gjOJ%Am&839jhmdqi*rF&d%NfX",C<#OnK5,rO2+OB4I94oh+)3"@ma_K`$#W>8kZ9TVT%s1/`DP@(t[]3C`QNn[#2SFcM6HL$e*l*]#6':c3ailBgB$m/$;-7#YnGWBjnY\jS*hF\ib@).>uj<>'d@@u3k8CW%oM2M;#Gdea-%Y<s90Vmi,,&\FfCnOkW57UB_qS%IJ'm8=Q0WV*t\`=\B\4=f*6,`?9)iF"s\F;`s&4b)&H_13]/]&s$nmHo'C=gmY/-eRn72ZtZ6%'&l,206O]O_=iF/fFk8IiLkTa)g7DL8\<rjGE$Ob)-O"ua*52K_!Y<)=dbBa1Zm#N@u->0PS6D4K*Y!7\>ln)CP[58G_,8<0r:aS%VOSOqOISIk4!@GP`2a4*=>7J0e#:IlqXZnVc%lMmU$Y_i&[_GEG*)`[T)=J<98N/h/4hK?\&'2$[A[VNL8i't!@H/,+2-k6bbs^N%oK>6F,ds]g3fR7lj_@;S8#oB5+H8DAG6GocN5Vj/_L$l$5(8P-2a#+=YI`CPM_`JEIA\(IogfiHQ-[Y-VS)[KAhG-;T+.]/^68'P%kd--cNG>05kTKUSO,7"]rF&2@T_V,BN+b-H4Zi,DO/*s]p3MJG.t71J&hLb0jEF8;,=s.bH?611H0?Dd"XSHJ#MI@h6k-+8Be?FK%rB%rk`eD3dJ(u??Ra:]?'49*<*GY"lB85kd8i?GY@4A`cG4oZXbX&^h7F4J!j0M&W8`=1cJ.bS9Yu'm[A*W&*^DB$-JYhF"hM:ji%ZDWDVhJql31IJ]Z,BVLd4rt75XMY.?+If]qanT:A6jiWG)8DrK.k4.08^#>UX2bJO3AaT?TtrfKd+=o]bcajFaj'":#Pb&KMDHf>%bE`bgp.fbEX1___Mu%2JWUemr`#))(J,B-q:W(7tB]?B@$t13f!@P+KT)s?n,E[:qIq5kW4j&6+#ihA.9A[`8Yjm2@3R:$lKC>SL%1U>8cYmZVj\5O":-<Z3>1OLqSC@ek\ZO'ko=\*&g638]dr7Z?]TTknW9%I*%"rA?CZf3]@1EUW;U,61k=P`/Y*HVNW0uAm[p>W8X%<tRq"qK"r\NOSWMIV\QuDi<(bfcRt#/#X\%.5tq8a`P(C$otmVXF05uI$_eG86!s9UBCZBG1S_Q7H^@CTYW7l6UNfT2F@&<kd!\0%]ofSad0QkQ':!6H66@L<CR:qE??ED7T0#Yo)XBQQlTkJRoc[L?AT:eX%_Cc"Xs4(P1#KA%4iBacCS_a/[55XLcF!hOQcZ$\;JNIa%M>a'<10iG)[n#\RG1eC=(R?iC(@)&i,\]HW+'G#YoRL]t"0#rIM:c5S<*;'[1GhFHT>qA5'b!Msd_>NLh-Y7!.b3FZ_g%2,kT""d%Mi2T)p2qAo3>!pY_Eb$SOiI5<5*g5JLbR92.)1RLg?u>TB6Q-iF"_U[W-CGF#Xd_.[LUhfNo5(nO0TK[Nfhhm_(J$C!oeq$h7qCA%WF*-SelE\$dDh>U+)Usnj]nDE:BbZ<HS-H*&CA)AMG;l3fo0&o;IL$/^#E[U?`XE-:'9(sX*:/+#<Jcf?>k=.)u58bf8//g%g31n%ok%Ssl*^\Md<ZZ&l].*poOs$/rnbh!Q33Y>EedLF(+0KV\XqBg)FYOh#J8ASp5O=\Cd>!dk^CH-@Wf%2,:/rD>[N</mK6o*$BOtS%G^hh7Z:K+f^7;cTi_(&[oXV3b,lo[?k*[0^KX>7n8aHGOWr(lQh@kc'ZO&U!3S2U79`(nGA2E8HbE@@'`>J\^SCH+6/:9(R0gp6U%$Io##U9/dsSq,)6M![7_jPHiCRb.p.MV7D0KrP-bXe"Z#ks!g-PfS,Yb/FXOm"Ylt>r2)n=Qksd)T<@'`sJWQ@]oV]maE=b_teJc%>g@BbEon>g$R(2+E+d$^dF^k@**/QfUAiuR,9sVrG+,Q'/-;ZV=;WP&n)5q<;7Sg@cXM;a`De;!Xr8I5Yp*Vp1<U6ichg-!kr`$N%_&nW`)i5*Zj"=YRXY[9I7o(ZO,O6nc&_iAbTS<F*6fqYLpc35d?&pEE-"b/)^GpZin<Mt5dIW3dm1oIoa#GPK;>_juGn$pDinl#<%pA'',MRQCt(YUOJR=jNX09W1N)JT`p!iO`ogNT_a=,?!k"Fu$SFn76Q.eJ5i*]f)!Q'I^[XiK$fLk/>BDU/F7E8X:(i3iLZ[GO3P%oVH=cRNc1s&"2@"Z,4Xigi+r`7[0i7*TC`R-8gbMSh7@0OQ07uJ\gHtb@+a$7HCa!hs9+j-?R4I`3D1q77E7$HuD02KHNZ?Iku5r%">q(9.ZRnt`F!"G1QTVjIYK+]'0!XAJJqVJZB9["&s&c/3+%Tf0WZ5q@-d!+*]Fq=[i6g1Q&eu,4tN'qWdM.k,c[+5NY>4*VJZ]/%L<]0CRk(+"(cUgFg>V/\T\k2fet$OR\$6s`)f\Y)0$oObd)WgBeq7.h"<[)9W#gMEK9=?)*<meVoH2]Xrk6oqp2[T+[089&VQ02r%.F2H`mD%>&JsZk(m_rGnXL\as`NO&5<2bli*"h38Jd9O;Z][-YLC:jsMY;e]gt^b"0Pn-ONur.Eke`1R1t3X\`t<e!6bVM)`4Jsb%:Q4@W>FlbD!j0oU,90Bo/$kNi6eA9YaTH[oVV]m%cp<D"#Q`$o<LbG:"HSGj'h-T[VS/AMQ_cX3G*"Y9Am22(AG++"PW\/q%NF"d%EjG<r!F#!WAYeU1Q4?>C**uUA'O('[L^jIdArG_S]lR8+U_LJ2Vn3MHOIL>r[ao,[;'MpcSh(co\tLVbg-s7]0F&5RksQ,B_!.lM%*bdQ!q?b<USLKh8I0UnZ@,bE?l[<m:20RKA6cgp1n-",%.^^F`qZqF]ZU9SFI^`XCjj95LRKSjJ=IHI/f?*ZdOGH4F?CAb!nk;^(%1(?4&Qn(j%[2R42a#$,Klkp)Gh(N-iG+F<?1>8ct2I$<"!'m\`3)`KePrY#52]%Oh2gRD^=]6jW`1l/?Xj\m_ouc5U+^q4#\<K@$%.SX;/RCXc2VZ,gNe)&i0!f\)r%@'][V]a8aqS?LWGaR::eh+5/G">]cDUTQ/SH5=HB]3jo"V20+dL$%Aku0tbK,u7Sn?M@@.i71B%KQI9jKhWjVP&4qi<\em7^`aLo>tr1J[(q%+0GJ(1FTi)3W\I6p5,GShW#D[M/]7KKb^N'QNWL:L\H>qQiH),/kn_X+GHfXI`hifT%6[Vq-X2^:DJ87@%cJ6u7OR*`N;)74PY;LCbEg!r!qhfdZ]$HV>$QP4=LSbR&)o/97[_%MJM+g]0J2T!nRo!R_h*_EiJl=OUCr:lF%'CV^f%781<7(9/Mk_aS\8h&Y4WdmWDSfj:Fg[K+&_?n_BJ02M4N3c!jj1`s5N9Eh[BII+ikP"9[KsG645jM[u,,F-/Q,$i45Chr#%OIE!G"&V>;oXF;2p#(dUX^SM7DY+^C7u,n3fBEW/)Hl.M(cXk`7XWJ-@u6'Eg_!Q8Deb8j6Sl\UBZ=l*Fd3`]Bn_j3-UMt-b0tW=%:+^i)HdoPs'@p3f%U;-P&eY<BE;@5Ul)tBSBL5'_!<8*(H8P_,A3legT`!T9XF3^8_i_`LhU,=Mk]sZj%g(ajU&HX+@Wtu3L6$'c%G^;7,jnsX.GE=i&husrpR2e&'e^LQ-]gh"./L(X_3PDZ&ZnKI'YX"#g\5:73?j.O>C!s[Pn?<&MU./;a26(S0V6tRaOu8>#Haq6r%hPCN.6rLnQ5i%:RlMt1s=e8CI@77AZTm;K+JT.gs#(grBB&]PWG%QTDl>.7a0b(D`,>)cMWDo4uXh&\!'`[FQh`bdIV:iLOC0dbY%iRL?Ki'XRfPtWocMq)*CZrISa_W>Y.m]"ZkXa34!6W(0W^*Y,QN$`uC[W&D#4'4V"UV9,^Mg7iI\V<Gj$5O)Vq!*Tt;h+:,XaNK@%K29=iT[-%48&YPpqP'Ii#Bb`jSQoMbp,d0?22n_[<Y,KE0O6qFjD?2b77\]hR#,,O].!:)TPDs`Dio8P'nG`WgeC;4[(XOa]5'ZO%BaMch5?hu;<U*LAh$-1?$c^^OHHh5gkc<8:eSa>l$J+\7.D1Z[^l:D7Ri4jhWt)5a@SA:Yr<8H+?1fX$>&LnIQm2*bgF4Lk0XN+R%L"6HaH16:s-H@W5-A'eXKc]6Y(efZNb*(1"20t<el0"kC`Us.(/:2cE>R%EJKF3VK38W!CO?W_Q,3,ASLKFg>JlJ,%+E)mOEiG9:%;?48SVkbG\)pAE/)#mY"\_J%fA)Gl?ASLS$eei"S]3VUiYMa(Ci?`4a1&Wd+0$@!f+rCm<Mp"C1QUoc,s&CLA*dekfM_Q\fP`[:/%#Q&n+Q5YT]5_VocMOu[iUAKEW!SjWD+"H,$:_JN<;/rL*,k0ND4eg1]9(X*1Hu!9^U8fiOO1-SDQeO65U!XaO]f'/(M/9&Y%Vmqg%WY4ad!JZpTV*7)&F8%h(1OT_!6:L)=o,l5Id4hc,'iRV-/a)1?mQ59+;LMO'*`0/2)5cV#PUHZTOP0kqCuZoD"YESG]"=%d(e-Pd%ou=g)E5"fN>f8bDnh:tdEh#D+:1QMQcFVgM2uI0@\ZM7h9qRP`jN^9&Ajm`-;G&L_I5h`O/_2O?fH&"d533LZjj9re8sr/S-E65&%Ab[-akH<$@mtbQ'2PlIZ<UKriP6+kL-F^138=*e*I>I/o,XhDqE&&qKD`:`ECCDGo![SO=jU13-Uk#8FRFtS;]5G?\*Nt^>2B"?K%47Z$bqabPgk77Bo?uO6BTLS0^F4=pBC"b)u:$Y!_MpdEkOu;C=R(u;Fj]D$LrThQ]kVIdW"Bj9bc-0/7K@Q>%'!qGfC\o,`i^gI)%CQf7C5\N<Y#[LgPm`oRcH[Aj_Dj-;<`.pUaoFt:7TSor!DC7r%7JDh^9_`i9P?^O>]c%&>kb=3\(Q]nDRgJYl="lqX&?$0Z&a\`I%nQ*^@IYX9(MVUiEq1MaL8BDs-fL'"Kf0"=.MC\Wl[asQrA@+bXG":[FIdXFhC[DF8^n"Q4BnOF]C@^-X&@q)KLL^':>?HT02[Eg3%Le"Eg]4riMjr2@Y*6p7i\fo+XhtrkHc0r7Y[%\jCD^@3<$V"0'6)BYo2\Lun72>clLe]0to%&iJ)q.Q!-4ElV7^#jdhW2F`rnL'&%'9dHTD``2h+Fll]=d55JYEJre/)8JVI.<(pF`l/]_aQ,^bsn?S/)bDPq^KbHNX@Ut6FAr)e^[M&p.%;:O,dq=PU"LI)l4%p.pCLB%4[*&r>$$5)HB!+rCE;k=?CUMugf1-Z?OlkUNJC;Ta1f.q%_G"PUcI$D=3%]]G8?6`4dBV"4Xhf+:bT/HZch7?!D?Zb5=@rsVuMS\%S1`6s:fbL,7H!ar49X$eP*eN[OX*i9Cl4]akGSJfWD+epWj#3]kc=7%mr>Z1a9Z)n6fjla:qqaQM9VtV,D9o@h4:rrKhJYfB3)i;%G=Abu$XiXFce"IK,eQup$oPie=pImV-k2+;L-0b4C"-H$6eEF`h0%SuYNn'Rk1<YrZC8.\PlG,_;0XV9]n1-4]bes3Fj"lE,QYX7%g9)Sa;9YCo"T)*GoB`*]Ns:02]O+u]`HCP/nqrgDXIrOT2eq3;UbAXLZ;Rr-EkI'oS[P\011GmH3Na$q=H=LWAtW[.0l.Y2PXV9#%c?'<PE#5i][-,77;s!$Wp2UFP^]9ZEbNeHp"Yel[i*NQd<cjb5Lbsm7`n@+f14&XBMlI3fJ#2q/\2QhGk2Nn<ktlsR+f:tJ?c\8*%'QP/%_ftX])/fLj8N!34E=0%DY:[)j.PXJk>SM8(r9hu0-PEqO25^;?k^$Wo+3$$NU^D]E6)!iGTcEW(Y0pFI"t#?UM8V/9!`br*%2QV/l>kFG>.*NBS-A=*Y#::^C_,LpQh$Ba%NC:%f<.Ne)/qQ$A]O"WKKLI.-5*oX=S^pSH#QQ=46*$_^n*&qfadmVD^>nt;3#5;f%S:V$).$LWnW=_1qaa;1P&mJ[iD`lqC!?,-=4Olt:Vg:nDpIp^Q_[]PoMnf'en?n(S%RNY-@lj9u2L]BdT<H40CQ*>EVU2GoO8=D5%+:V.LLGkrk,">8gNpk*B.4GHU.rW+UQjG(C?kLo@*L-DBe*?[d=+LsmR1drKAWQT_S39\ki$'\,^hkY1R_*<-m*/Hee/4uD/P.s<%MdBm=Df-sOBBJ(%o=Z:]f?JXbV-(_."1VnG+@$?d^<^pg'(,eGE6TH)>0.eTA,._oS*Zqf0G8\[W^@@7Q8t8)fBHOF5K&uSE<oFh%N4kkd'QE8r&s)ID/;[WcWRCu^_sn6"de<kX%K-mU!_>ND@@/U?MgA;&AiX/B)KWkPA:H(3+jbr!9](UWe5]Cr%BbD!>`=_E0ojJ(%#I4jMa9)rVM=8st)lFkgL)cZiB]9N;PMTRuM,661BMF6_O;j4Jk&+N`0Mr0[P[>Bu:cpO6DY=Y)V]6]Q7Lb",K\np#=BV?jcOj[W%FI0X(Q-r9(MWp5MIJ`-^VdY?b5RKpX=pena"7ub22PEL:4k%O40D!ku0g"aL+!g_^mbK)-YJ&Sl"G343\Amr;6H0>D2+i*cE]gQD%,D<7Bj3C`UiQNs#E'gA`3\Nik\g)R"OVb;BVgE_A*fG$S5Z+M?'N]QG*$2_[.=G-gd]K2]0A`3kX$o=cE]Lc-9Saa`lT#VXE+X.N%"9@ELnc`kZ)R1m*k<"<rg$(Akm(H0>FT]#nNaHqe`_=[rbj3>ek`SL:9USG"O+q66OrV\J5ljke-JsD1[dh#9/\:<WKuXfHJ,5T_%<Q]G$5a2>)-U])B`M?`^F"P;KRuC7(Y+.]$$mIWF+_n_&)sk`QoQpX<+9s-'jWQ*N&f`ipE_!VdG^R^Kfq^X#lH!sGG&Ds#6?uS)%VdKFp;^Z>$2RI72!37g[Y;Mf6o/5N`4.@!mrb<@:a0JnqB(C=78a?d%7^ph<i'(X3:]+0<.:5G>SR`D?0[SK*XpSs_o3"k9$_L=d%B?f@_NbHHE%BYF<oQ+o_X9YoI(i0R?`_FhjrB:iYp\):;Wb>qk8SPjZpuU[4?99u@nfm,%\+IZU^4H"dfk-4K2,q!a(t[:OlM'Y<%2,'@[Y#Ya]1k;ibO[@Mg5N3t7j0=47&dt=0)X]MXdo&cTBAM60?-;2XCWGi?Pa8&,3s6u.3AJ=2*HGHV&0<U8,)q;U+m'P%P*R-^%Kl#NM'P8u_*@s&*#IQ(H0!P3ZYD.Mp"+Bcf+<X[hN/`2"AC+TY3O]YM,3+Al:R_ms#`,\)oj4p<qe*t1B"oj&o8;onn#.mF?VaLX%\V]SDPZ74H"Qtl1/fJkaq1^-=SG3M92qij19[G@khGddVSs<lcqm`gS2-esSE1,j7(mAZZdZNr`2FG$$jT:K0;F,nVm;!N9Y!="d%=W^UV<XD0P0qrf$628.rb:@45R*7bJ=.Xe($F6JVU6!fps&X<8_+lZA7<ud(J,db=fA/#sjusQ8UFqUh4m"QR9p_q?nD`>fRadg^%hOQ^.dZ<ZNGcUS"LM((M!^l%3<'Gq'"BdM&ecZ%UGg9/:)_TY"?]T)^PVm&$/4G?/ZS1X(o4CLM7-VL,?1G<.1+rU\%_0J;49kq_%`:$XN'-ha_N^HU<6906Dc"E0;4nUS]R$uXL<[cL&i+tH=c"3F%E8:dV!&$E'io4p""/M\)qm#0pdofNrc40FK[V9q`_Nj$&8U]-#%Ys[6*1_L2oS8nZNbQKmj>sMQG:?mcVq)ZgQ6Q@Ck'R<4E6]eQe,aC%!,Pj3C]QmB:d_>'AS#F@!qOTeO>#pq_muiI$`Z,bun!L.(%Fh!FBh/>OP[M.7$O:?#9eL]jfUm6Q!p[`8&n3)HOc!?X"k4NYJC[0#m9H.i/h&gb4GNb]nSARu'/[@C#m;"0R$gD)VBHhXE#=H_F%qq>J0A-#s:1>0dP>`Q$'`/BLL_$eg+\dZs1P^j^$//?a^c=Z;;3Xf^a708aI;Mo[k%<f^+LVd^0m5&D!_rBl$bh#YZB(3ZkWok,:%9D@q\B1-%d7[=%)Ba%!/:,can7KPqtnpdmDfBEd*/_#hO&qR`JBK[<'ZVE%WYbfPrCJ&:=cm!+>1]HcAYh.W=/W"V%GtV4niR1>[%h$YHRc.f#+@E&MIF)G;s#%sY3'o52?j>F[7ZOHD`J:Uu/5'k$j5u\AIAh@^Y\a;Xo#`2Pc@'5]52!R)FcqsrOl"S$6c3o-42=>g:%R38P]\:78@r<CnfBB^\j>f%RkX>uH>W[a6+<u2ubb&$u+EHB`'+@/ao[[m#5R:VO,WGR3.#1_")+ui/9b]Udm'nS&[nC'@K]T"B+%^TM33Q<hshR-C_L`0sbeX/QGfFV?kdr2hh$!l*oT^o?T-LPR&pFX;jdf\3M$rVCm-[4D,l-1's3$U&-.d4V@T1[$i'ess)C9Z"I!%>&X&#J-O)/5hre8I*6d,EBh+@@.DCE05_!N#o)@:/V`paF/E27S:$+C<LJR/bSHc_-DEDN&IlE8lf/G$#V0<tRip$Bie:>p@S+`f%EFdtiaQBmRM]78:Af7kVMpj#p6AkV<ZGBSj7^:XJ1LEj9a0(+Wk\?aH#c5QRQppO9TL)Aj\O:G%=jr2oQ6%gjM0^6W_\RG6]ONeV%a>Xik%`dRXKFdKYNV$p.Rm?[U32;&'/ZSC08$*",aE$SfK/*HjH8d_s,GS/.kah<4]Ho@=J!rPI:Ls"PDXuQ.Fig5CRGtkkWqDNj%Y9"mM2V">Gg_l!5`JB^Kf6bg"+F9U24-B\H+3jC[&UjT2Q1prV:aZ`S=5Pf?+0nHa'gD'V3ukFa\c_!^KD<UaTY4#K`4e[[$n'e@%eo2ROc6"@e'f61!qXPPB3+=M0A-Ik<,^AE6.)[q_`>,P\!qo+&qKBBAi&,uN3YAdhJp2B6l-t`V[9"Epl4]ELIaX(`=W&Ft99$Z3%VdH>kJ&V/&MYH@;dJ5PmAdef>RpK;n,B9k,;LaZL_nusA^-X!s9H,_T\"Id_S:ca>_g,fgiQ;p?DO'0?YPY]7oTKl\`EebT7>Z]G%f5%AqR9no3/uKbo52Ln"D6GZPZA=7a+AZ$5"-m2Z%\>MEG`Xj!Gi]NqX12r-r4WWDs'0(#RT&uP3eSSMr68nujXdIZYi0j;Dktc:%M0dkeaNr[.!<KehV5Cm%;dIt\NfbdM_^J9:W_XQSb-9Zcqr<u*oZu9&gWZ(TG@f+8;EC]/&3uS8mlVR$dsSM@M4W7=23!0tE%g*f%8nZtH'@f8n"g0LuZCMu+g7`Lg_S#/+Iarf@3&sPV)Q'7_1T01l[f1SfD)f.$`VW:QZ*KC25f0HYa,i-WCZKVYgciiqKrnlGH-WjU%dhkLf=]*U9;D3-MfJ*:LMF@1f]$Z%/I8aj$k-DjE,c>fr&U$=[:K2'?)->c(Z]OYtL%WU;Y&+*o#D'u+:ug&>LL-0HS+"NKCBtsH%M<Ku+96s8u@c2o-GbF](fgp8lMEFi51k/R`WE2!(0:=f-#EFV3.+ru!0c&V:>\5UA+!*5+P=S1sDjifj37?1eld*9-@>!8]1UEh0%/OcL>bTCpeo=^`uDBhraC#"prLK>N(!b6nk=4"R-hBhpQB6q'Z(d`Xk2s3WNC[`KNT(Ptb&pigTNsC;D)oNHS>]s0jN76.R-=8l-%2I\m>EE*/0BX3/)/F!b*2btj(*?TW?5P:)QNWKiGJ6R/[ShUt`^)tEqI4?*jRb@>S<!!pD6s+4LT(m_;n:9\qj4]8fA58>;iQBTT%0rO9QXM?=sAWE[aQ0t!%nlPJ7$M1"nGNKLi.DVQ-[o.701"7F_E^WC6?Z?(-4k/Lq&qoZEqORRh2E:p=,M@S9,*\`<&QiTNo69BX%<7.P#o!7Q;G5$S%?RKEpp64,[iVa+FeO*-YIA&-<2H$*>PkA'I-6[--\Y_i*O4C!]=WMUQaJcF/9`R!']+p+M+JPT]pd_HJg.C"Q%pY-`Grt0iam8qDuH(/o5.8nGa,I,6!NYVZ1a^)&s\_E3VG&6^;IpFA/&L0gCiU,6!_-(JQiSj8.._&2]Wr]\&mR,q]2tHXbhMj?^%<mn+tI6sfhMH9F"V2^!@5L>Pn+%D&9n:6bq546j%\g67W9rg*VFfgA^,+kq@&gQG*pTl2#B^+fgmOs?rGTnus.*I$E51Ui9G\6HI%Ir$GP(<7%jokdA\n-^G&H0')5:F>orb!TYacH5YkNNHUg)&0?YpQfYZ17][@[th7=i!&Y`S7[W!Dn[U`lF?4'RdjEq4giuY]?!^J%,RmuP+dcSfjYX_qhkW@uYU'jRQ1=85-.qC[kr.D=@7(6>H&<bhdqWhgB"<t,?].ssq399q6+kF5T[kS+)Qg@jAp_[R.q,h*M(MOQ%$5k8Z%HA`C]K3I7pE'bu4D'J.-^od31^..j"g_Q5(%X"iNd_h[^E^<sCHa%2SGREO7OYU05eG2%]3@Z,&d6Y#7aq4m`<WP7ifIi*%HW'VXkljq$I_L?i_]q.T'E3\K!jAoaFXhY>Y23XFfX9rUXSXF^G;JBDb6LTdEoO_.!EYE0G8gH%B>26jI.)l<>^4$+D-tQ`ToZg-%[V:IH2YU?PjAb6W;'_Wqnp8]@<C7TUh9K'?e^"*7R0,X2^1Ig:qM^pO]ip9u"*8PW6RAXV`QY\%IO:;JnoI<B2:GmYHA[Ot!u8,9%cU1bm,X^7i>)Y7t,s:)F5rT'b%>0gKGL6-+!7X0gMP]ond#(8Wp#a9m%^oUBoO\N%drIP';s%MUe!RCN$7]0Vb)2NNb$gJu?\;XG%>]+s;mtet+]_5HIq\kliehb'a)VRrs>sk:O"GifrpRK%qcs/2.iY1t]Z,7eIT[Ai:)k+V]OHsoIaU-:P8]O3XXQh.n"YJd8k-D!C%,9mW.NRDJXE1hZ[SlUj,D>:btAk#bVZr53jL3T4E9.,;:PX2%&UOhhYg9b(SmU#g$4N[7Y_K6::0<(]I?Vq:HSX1jI@cPR7l`^qC%\]2uhVuB\S0q:GV<mQNhVf@&X$_\ECfkQ`Ol4/E,p/Z1[R2B5#g@hb:.0ZKb2f4l!;d,Y6O;`nu;gBRFQp$t<)!mZg5W@*nERN&t%S2@/W$b%XJ'WAQgm0:Ab`sjD/!eQbmOZRk[f&\7NPuo"iUsAKD/?\e$)s\b3<NtROQ[.="[-D(]lZKCH4ZR)M<cA9X33roF/FJ'Z%oKA]AAp^&njnuNpd"SY?aU6a#G<#']#0P&ucJe.C4>'2^Uoha?l)=:ONkHYsDoeLVKVDqSec=?3C?LkQZ;"ncVbZ/)k';#WQ122G%WZ1@L^"H-9.Ndm+(N6J_($$YjBelDf+ZGosm=*_t2uK^2_516?AfQr)pqbV>E[er=YPhR),)M*?dVme?!M8<#eJQ#lYfX3I$J.A'%3J-DeJZat15Z`VsmG9@Jp4?jUL^:i:0]"iedeAsT..K3R=/0f#-Fm'YR4*(?9^\uB*o'U<K!\F3Y/o9Im.7M0kl^(>fAfh0+2?`g%%BmLo4)$#QP:m\oKf?Bl6[V^EM?N[Xin,FqH//CaX^DlD_8tV$;F2qjDh#h>(lOa5X3(ii%qQDPN>Lh@n1d,oI$PgQp*u-qH+1">%/4,dd/P(sUEnEt*VPq!O1V+tKMO6h/5S<,XE1'g>>(C^]SM4qDM3$o`8IZj'5e_)7F(SYlTC!UKVn#4adnEn*%Obu3.)MiAU3*')%inV@019qgFh;%W7V.O&"Qq9W=7f'Y-]KJ%1P_n*9N9u'JhU/?7-M3S=c]d<krFmLL,KAtQpj":@W>8&d(Qd;@]k7L_o/Sp:26pU1%BJElG!rBE"\TUI[m$RMhTO<jt!oH[]\b_G3+NS8`6&ah"8ns&L%,=u9as(e9:op4]]QHV^jMPNh/H@?#665e9`<g^%c8[[AC;e07%Hs59u05Wlkh,oY;&M%t5C7p\s_\s%IL\t&O6@[L%802g<Wg73FRkMGgH=St/d"%!+8MOKN]b@t+NB#DXp2_Ii>A/:Y\lYc>k&F\*%(I(CJ0]Hci(/@ee'[d7M;Wq597YDl%kOh3_+pS@iMA7g.GQI"n?Z@EPPFc.IS.7.72`9*_AQNh)nC9,&o':%q#9)AMo2Gu<@^p<j%/th>LkL9X0QV8Po,@6K'dG'o<]f/NfCP(a5V:Vie0LOqVYt[E0c-*[bIFuS[<)__gGqs8U?PB-jh.)N2p!)u$m1=!+jr52XaV5KF%#MMV.CEM+gOe2Zg;$46[o6Q30!aUG>VS%UPbjM6K:DJ1$KuVRL1I)hu<"@i>,:`jPB`Q/oh=7r?7NChP3!9hpOl>9cP?Q.lpX>;N%oZ0Su4//qFili,C18[5O7XSlVcRuq;!7t>/U"(D]>!@p&iqj^V:`/2C0H*Xh4Fu$uE!$VpDiE/.o]DS-Uk$QT@uu*E1/7=3GNHp(%\5%8-i(drBX,g@7!u%hN=o]?:\tGTq3B<"d&iu<A+R&G_lu6Rd]071E3_QfOn,<6Ta"B#[W#^!QCDGT/M!dHVO&5a8hTC!/6J.N*%*JZri=ohuHhZZSW[hQR6L#a_G'6X<fM,&Bh<`$<9M;u`Q\p@rt0Bc"P#@pP%p$`[ag6#&/hJLTqB$AFV@Nnf%ThWEJV\"#_LWDU6%Pk;7N8;+PVSX,eJ<8AK]'.tDg!t8m5l$LNS6fU$jV4uA^VO^g%WV#iC2'e$Ua.PH?aA#6/,D8^dVl/2XZ!PP"M"VA$7'Qgq5?)J4%=@:=?CVLo+=G;s*3GV`sPpVh:ar3WCCJn^;UBmcX`JKIfmq0")G@JMgeIj]8/=R"7H<Oa0)M$,dj<%Z/ETaFFEtT;ET&spqB2MS=%D.'@2cgAhEK=J?oNM-g:Vh8#oI-^4M1BlJH;(escmNc7i4^<>IKEl\M?*Y^al1-&ZLq$Tm2rlB\*i["Gk;b\t6"toI]ZpCi35LKD%%8Bo%*%X':KA%t!Qrhej)0,@um_$fn@3rfP!/n2e(G""!gEJZT4rjEDKrO_og!b)$2q(uLqJJe[Lr/3T`UCmLC-,T9Y^!?_\tK1p%Vo7Jc+fELrR0CT:b7Q#I,'QXdAJf,_BuHOm3pu3./XZXg=V2N*LpNt8RRi=RS`4_9`'&(4Gdj906EB_u:/VrKF8''?SY;LISnD^-%kB5Qu5X9P+C:>M@?rEhoVCp4W\U:^%eCNjW+Zca*J.3Agm*(RMq)"PM/aZ/;mGNO,il'N9;W!-TDn?+)kL""r;Bk;G_J(R6g<3H9%&kh!/TSgj_1_PPMT#-j32\k#eE1:44U#_lick#]omEPUTdV&7t]bl-deq.X;-,_(eo3RrBc<#3D,ZE<,jHSWFK9fk7+;p?'3H9S5%D"2QN-<p;u*pH:!>uX:lgur=Apk_o*NW;)&4(rP@8Q/#7n*&+=mT`>>oR$X?X5pk+m.+56CmE;0caAO$o<C9XK,c$H)"Hi9AIJIS%Lqm=Wn<5`NV=.7-LTrs0_[M4H/`%Up<H#?lka-Q3BPZ]jeJ4#`[Fm<3'@B3nX,SWhH-Le7[]$\BJOI=^Y4kFdiIIu$2[\N%<#oh4%W`.RdVO4OBI_7`)oC"%T,-@kmr\i@>f32dZTqie<8SQ](",NHPA,s%-ioubsK=Wr!p_HQ3#PSRs-1n@*N+S>lBX]I;lQ\Wi9ZG+)%HHVoI:biV?+CJS[=6&a<VWD\OD$M&lHMm&W[/#g<>lKG^;2S#I/\;;F]CmTZb]L>>BD?B;d)tR09P["mU*pM9FucP*q/C?ap\s@Z%FH_H\FZ?TUjnen8+3%/`grp;O^._2p?0/@*d0;'LR7Me^$L"ne<><L]D[g:!1-q.9*j:>$:LBJ$D(6;:_lpSai.g@!EnnSX('L`5%,GfS=r]"pTiY%<`pn>Z*H^gYn.CYYu^!fX[m3c@1U?Qe'eIZ2=).mE(;FA0VfnVV*].LUVBBiMQV5uQbW^ViAe&J+4M#i9l*jhol%ZQ;TcbWFP0mTTOf$;=cj%r4/G#\qibp#gdZnr:"5fjJb+1>:N6:1dYScaE*S^7V,bCe]mLJY;@u0T?1/^gV.r>O=BWek]aioH5Vq%N8.&8n<3^/c*uE5:/;iW4*WhUl_;'(1Dgj(9GF:mB2[d(`IIL:R#&Dbi#nc4/(/n/T^=2t2;=<NC:5*#6YFme`YaIPm;n'Zmk)+N%=1j_O_q@(Q?ubY5qMLNFC8lbC:Z&\%/t8Vf]ESHi[W><0hWHEa*eDqJ^S-`Sr)+cYcftLCa^u!0>L;P<T$;4s7#_9WR*N*WSi35d%";IAE=)*kVdh<u#-^JQT"JTS_!.X]YW4Xpmfq3Sq)!]1dWP&araF#n8hnpfQF\>]f`i0a^@,8GiFV6"s4c60i3@mCm`<T(k!b9!S%-^a44TQ<e2knouq'!Dh(b8WU%C8Fr!RA0GgJj6@uX"`*>,=(ai!ZY^@*5WGt!b-9j2;V@&4kW+=WBSV2fhbs$8V?\/a?TBi>eA<p%A)Gjjan0k/?lF(d36aGg$hM/b[h*pmLK$*ab]Qn@NpA`a\-1,m2n`b7h'9Uko*:RRSE9<*jAthAGd7K:_9qo2m>%"5]-5A\#[:_*%i2HLUerE4iC[:`*_)?pD<<f'X<f>7HW2q,%Cl,>6O3F^!-adK-`/>jM^q[\m=JjEn4e7a5dLGO<38[5fF(iK([]C6'OPmAu+3F-f%YUl%?B"HF0]>n'c6b:sSA+6>'K8gSXd*1/f^s8Biq\R#]CKA6e1%tKXS1-'hl&V73h)SIKbDo,b4?5Ai_D0(L><_W\<`c$3>J>[h%?I-rW_kO._YJ2e$g+.f>4)3;Z:+NLg?X%.h^fjZ"l]>=1D]bcC8oPiqjAT]B/\=CW&uB?rGK?q0gXhl0[guD`\taE/\.2kE!.KYF%#fO+%rJ8^6b-P;?"UBQWj@Qk\4!Z!GAJ(-P=7AAc>t84rT'GE4#$;UjPjHCt\BqF;N8S(Hbl(oi1km9dIWK=50AD1bQ3Y3ie)&Rr%!X(6pTaKKuSR&?C^$UFeR+BRFIL$`@?F-0aJT*oc2H"lbQs8mA\UshQ_F+7?U2<1bL<:a!G!tle8n"^N*@,%e$>OH`76s1\&A;ts%l)4f:p.C]??`,`ZAiOm/[,R=8eaIW"ZH.(</%'^FA"n="3?)C#lAWsG>_*nMA_CM:H:W#i<S[+>JTbf%XAGXRIX+-UrZ98iI&%$9%5g-FVDhlq8T!6*LR?U2*W;k0?M[X*SBuK8hpQ<N(Ieb%e8L&aB>R9]IaF9M;jd@tphaC61%i<R40_HM/%P[_k:4%NYYC&?#,=+'B%X=,N&[L3Wk&8u!p0;G"C>AcZLnN5C&]t0=aIMF>sgi4C.e,4K`[Y<>NHC_K@INe@p1^9f#4JF[SU/>@YWFLl3"?o_YPs\.:!g7pM%!Z-30C?P7g&#E`,aO?oL:#Is.%m;t:`^oe^,s5BiadWT4:+-/L36&khc!I?_`)O&hUBOE;?J"[4I[)>FD/b(F_&N??'C)cL4I\Nu%:`?,-RsZk1E&H"'ZPmr-Ts]@I4HpFi^pe&<^t<^5"33CS+l6#NY=0Chm\$87Y4GmL)]0+H"5;H!:YVLDR6%B'P[JUj/r-G\gUYL7%TC+dUTI%q1FYlslg^<aJ`^iGOLa6'9H&H:o&R4\$p*fIiiIEag]"/enF9IF*:%B,60o:SXiLK2?`@5`"*&NPsWgcYk!:`D:JlQ#&%'DAT(&ps[ierd=@Kq.1.ggu;+XHUso`6Kl!Q*%Y0J056^R?:-_0BnD%_c8"&(Eem`3=@IiQ1j:WCVbHGh3aBh:TeKk0-m`Z0nl/2%@W@BXjr,]#"=s=saH&hjL>\pCfsEXSPnV)_,VInOP,b*e7Unn;b>CUM\50kl)AVAj1Hepb;3L(nWgV:L"R.0.-=D)e@X:e[ak@9[%2>rn_Ebb?o6n&AKE8?$gf03-mB-+%D'f5tgC=[V76QVLT^'dZ*`',IV^:r/bUKDED%XsCf.ae!`7I(Z<GQ4Ca,WH"='BLD@3RObK%Y)^S\=L2&R8imHZ*OlW\[5\`I>/fnd8E7Yp[1_<J%fFOK4dY%Rgi/hP@mor74X6D3Qp8#L;MbZ7L>ohN[egR%'eMht6,1RKU>m4^%)][p7)b/gY0,RnZm6_11NEF-Wd(+8>NE&8@Tu0jkd@R#*Og74jYj^1=H<jm1a;BI2jecPs3d="ohn$AH6Oi%:rUr>3:uighakFk0%1iaM`g<j6TrA8.2Us-\G`o4?i[in[*G%_`K#t=<<M+=*,FD0WiM53W-oHD_aC:oL@3<B!@c4jde9)T&gPe-]V^J#fj/06gm]X11,%$*-p!Zp_S%[G\e8D[ggM7t8/n0JubVj*g:A/UniK!St6RbqN?/,M@FDjNPg8#$'5Mj6lCr'DRVM6_9AsUej_S6P240Atbt"&1f_X%;B7(Y,</QYYpiPGf*K0"NLX(=;@t4SPZ%0E(PhA.XtJtY1cPAp,E0!3S3p,_UlL,A0]de"QBD&Y2qOE)Q5R`pjt:+&R`R/59VsuW%TpgZTd4ahaPO?q?#TkfuU"],"4fU-/0Vb+>!>jFn.\oKBDbH;qT<H&Hd<M2WCeIUJ2&9IRg4BmQ`GJnQN;^>[jWCb61-0c8hQZ6s%Kjfb"6<,jo!7C85@+bPbLuMe;0WA\]`jhsnfQLZtjm^=bNXReqLLM3Aab&j<o?%'5Qk',]e"Mn,:1+lCTKc\qhd1&RUQk,VPZaZd%g*2[2qr+e4"S7'W-C@(7A,3Ms65fd-@j`1BM;*4aURDP!oR$AP>N+Ue>eq^m_IRp@J7qd$1D^r)i0(/D:IZcY73]o#YXp(#hg8H]%mP8:D?IMcX3(f#2$CIlo?<mCWCCSh,5VHbNFF<P=*-W`2997Z8Fp05Wr8(X`SF*dJ<YQ-uNL73JD!4TraVrp>RRR%e(*>!N$<<f#%O+`<_P/ap4RFd#1:2AP6WU*\dc9p-0!8jp!.rRr4[%4:daIo#N3_FSn#cNoP<?+R?-KDWZ9emsaX^L!S_@J!_of/DKSFr[iE*@mQ%g7k6$'hP%I46<oSa,NV)"Yo"GgJjXB=t-/["[@;D\Yk`6o6IEa;G:;l:]`=%etr\`K-JaamNLV;+?6KoB#a_V4X\Q'-`XO-,;%!/%6/.KRD5ToUGQM::G)'%1WBPAHQNmkAn-\PkEP@WH"i6m@AJs\Hfk)q66Ne0"_SJ7V!%_g,OpViDf51Usf!HQX;nc$E;t2-%PCV1?%kg^T$3j#P%3!kmE>hkhs%W`bg^30^seK+d^s!n3d1[fF>[N#gj[o;f$2="6WW9i!>BLhe$Ud[=LS0N=qP@SG:#n*cRN<ndbCdS^i%%;iZN\J=$774`k?hN!)g5O[NfhAB'E>%L/$:_A"UjJl`6]00Wm`S*!s=)*!n6\JK>Q*b>pDk@E]jg+k*^"J1p>,K&)p^u59V+3dD%HV?R_\seII%9Y/3()J8`e>arUOYORkY9"emAOB]iD($F8)X/dq)5%bA`=N&55T*3`l-+[jq'J!I=/<0#24;jTm'.Qp'o`6;bSqXZ%fUAm-EO,W1S1mm@VPJtj](t;>+I''"Ft*Y--I2]R_b[,=St;2i,5"6(/\r-i%0b?QrbQ-Ab)mVU1[3CNOE7)mS43K5,;1NY%Jd#a%)",F%hU.Uk`@3#Ukt[+J=pPgXjDkIGWb,DFUW:u&V`F(=\A\*L&hGY_*aXnXlqO+/D)\7hr>nbaKY&]e350R628Gua7&mak)b3]e%)j%:W!mX<oZTXZq0t?MYf-pd4\YNE>:(bX2-+f$L=QS.("Ml[?:mUC("NET[E<:=A'99!ZWRTL9h\StD.J_nSAaXK/$\d]kn%AJ^%F;afN-4LU3R,3'[7+XA+\]<Kg'!efLZp(H[i.d4Jpe#aaBfQPe.B#T/O=]#N)Rr/])-gFG/(aVrFLhQrTu@(f6$ipk,afb4bq8Tl%+%RNNE_<4_h#k(3&PfU6jL!s)Q-oG,F5Kjad@%J'P]igfh@q/OUHAh+9KSR(,hH2E`0%=\E@d"CiFDl#WKWT/K`W8qR2`JdE4J)\%9.=QbDt#IB,PA$/JV)J(7mp;W&pY4?9o$gQc]Q)G_7uFQ"]mltZPP8f`9bY9ieQ8dKhbE;4-i;a'k!NuKJ@[3,i(=oi',,8eNr9O%&N-g4J<F0"dqfUm56a>X5U1f<4j`3hgT)jR$3b+'*ooS"ZQQ5%UG[7WU.K97(2k^:ruPI[`,?PR6ik9J=$k9g1n?V"Lm43!hmW]7%dX/403V?Mi+JmSS7u*KCb0!*EJOl"RiNPL)mr+V%e@?SfLXYF6:0!7+?X>V8)Cn6l8.3'2WlOYT;tJ:\HH:D:L\YuXP!iH6P_kS4%O(4.-[+*?DX=<b`"Z/!`"GcX0@="('[_=8B?r@Ra2qct-O*][ud7m69h,e.cMPXtYCphb-qN.X%f&oB?E!kDQ^J0M<=B!B`h*ARA%cH?&r++,HebdP3.-PA`eoIJSKcONr?B"&tBOQFWg*EfOcV#tg0H(a)HfdVRXp[cuVn")@N411kgmHN>,2:NQ3S?Et)hVV2HofE%c%HA?I6B[af8Y?B-bl')8p(Ghem_oSpa'#I;c]0RlSRJ-lr[q7nr30]cXR9o)6ce(7l*73I`=0CW>P2?s)r7=NiDq?=p_s'@!dJ\C6%XfXaSL_fHQ>,DmK7'aMNI#[ek\u/%^SpMZn]n<mgN-J(+/UJZuJY"IEe,]\e#$teG_GnO:X<Q!d1,3:QcX]1um'u?tJH'4jc'jTc%)VNPU7&-aB?H>t$MBlr=Td-;=A#BjsAV\A&Q=Ruc#8'7:@Q#V&h%lsE`-1W7-H]",)AMI1#>E>*AK42kVj&+Ub@q(bK0L0L[nMB+%gWW#Z^YkSpM4uOK:HX6rZ6XpE)lHCsQ?(6+J*=_qe\V)h`cut3*/@_@Uja63*s<P.K?/25WF%M(JH'ZeqUOKYnTI`W(-7LF[#LCa%?OXJu4"t>fY%Cji6J^jF%]JJps-'>\8sZ*YpcXdE1KS)U+)>Ip]AW7I9/Gk0\X^Eibo(Z+'%]pm_Qj7p-eo<p"XS,>*:.@tl3,4F%a8+TaJV.IGDeH)?92Zu=@#pBGUbm<"*S]?)CQ+]3LQ*4jH:kRfj$rFu$6[l'oh6W`i=1D(Q+SOgHVAsifShd@4$JJ?p5W7^U4Kn-%2QaQdI-MWrNGF?i#^I+T-0WKL,16`HX*g^r"iqfT--]/1B,C]FB/M`IY,G]Vb_SojaeMgefB<IE"Pp-t.jN=t-=%LSN_<G0htJFe%Eue>39W):Wpn>khn/K$lauHU]XUY,e8nuoBJ3p;#`S83'K$,VSR6qG?2lA-F:Xs9bLnNPCEl_CA\U%AP#e%1$g]>b?b9<6,lkM+[%$L7^(C=<qK677VV$jQR'ZEd='[rL\e#@BMJGGoC]`1E1@s6*g^%9O^FYnDIq"*D<K#skVSkX/eJ10cD)f@+lAo7`a`;BJ3*SLgtM%O32)u5&@onZ_j"O)Vd\pi->,8%aAr69J7a8YO0-cUbiJBV6[``NNkB,VW]k8G6I,9/WW6dSV\c^EKS]^liYJ[-.T^-\N%>oL=!Y+%3E^Qh3\YXii0oS*;A#i@H__2hs2(2r8!sbq@,/$`^nU6Or4W7$H&#ag@CkDWc!'23CWZFj>1BQr1KrWG>AJXSloISQg1rmt3uF1p%F\#8/qjL#%[\i8q`ORY"[@Hg7>kt2pF]L3UGA)(rXet%]!qJ*P^qMatn1&k+Xh1+-'9$/iaf=gjLIH_1L?WO?<lTFj/QQDRO!9_+%Lt=Hk(]uKHOk/-qZ8g_>36E[+$l<pGmOdl>/:q&+()9BU@l_mNNP1:&$Nl#66q2'T=L(a@<ug.=jAf3AKVGgV";'F3q@g2:_,=6Z%4[.-6?C,1Pf%/3!pp,oUD1q+J3mTm8o8)=N9.peLHrqHDn/u"AqmV4.\A%lEbJR-GZSkhlV;%75krh<Wj\U\GXO2?eU5(cU1d\g`%NsgL@H3.I>TigR%\P]!#MVf_IXgC+aGIaIK6<]\3C3$+n3E?KtAH\?/dB6sl?75QHl6&4;f8M[t-M'dCZ\Ckr,#N+XQMI!;]-N;5%4hs%VJ1R70R!?t)7<1]M^56tRP*)oEne(F^1Yg\"g0Z1#j%DO'K>.,F?7)"S1d0Pp2.At4.+1I)m$uDbHc(qbQ"X9!EnNAYX"-6E%Ibgt+>lC%]#]sGN=1h`;g$sn3P_B['_cdBsEU2p)iDacuQg`lIJuu\R%`+:[I>cQF)+,[K6tQa\f0IBFW.C6mX3Osm\lSQ/;$pqS%$Km?n6E2p$?0nND:XOo;I#Gn0j%a1Jc3)[JP<_s6\p>KR#T[:&FX@oO1jA#tZm3E"ND/dfSEKQdUZAg`=B$El\$lDQ-r4LGRl(m$%]oPi>/>L$+N^(V,?f)nGf.Ki3,4an8X42YVV/"rS5V8CmD16CHF'PlOLY2l*)P/?`hWk4]EP4ehh+5AcI=.32OmQPn&C*iO<%&u8%-OGp<isa^?,,Q"5,:XUm&63pVm^hF4)Qr^hj)=#`(#r2d\=E;"!BB4I/\ZGcbTUB_;`:bt6J-k/$5co%j'&&]!dHION"JZ2Z(`qY%U\.gWIT1i/C?)[hI'>CND'NViMS8p6h5<!]Z8'L=lWNT;Qc!@g+ikgW\_Olk:K]/Efhho[DmO^WS%o264J,GZWs<h;Z8peJ+g!SG%C!Q\&b8oa`Z3=XEcr,u6VB`CM873g`6ia>-2(7geMBogSp+8R$.*Q1k_h[PT@r+3Z:8I,tk1t/^Wt.N5MKIYDQGJ3]47&\^^3qB-%;gsKEZ$b\,I9SqfhXGE/BcY4V(2-%FgRgP5=/TW4s)E1'b_2*Il+GFbmCbfTCqW%b6A<;-Z'9Bmjen>So4FXmc1[<HR+/?8=0p_5%cHl<Kl<SgEClei`'n&(cpDr0_MJ.ls>24>_:r5o/Vm`.$\%4T8%^h"_eKZO6ggkbL&cnah<^p2;-r+nNQ@I*ER=(K;rGN8Rnc7LV%P46bc'?<N<2Nm);8`e[d=?tQhiGk9*#R.Bhb?K&WSp[.J[f$3;(I3T3-h$7o$uaH$i\0-/Z8+A9o%dl6mq(Hb<TZgcP*@XemHj*g%;_:TV)kj->eS^SVht-CB0@dHNT%'N:VONH3UV1V,?FSfB9<-A"oC4g+B*.#?ir3<o#2,<BOYiDgH'a42R5'm@VOduVqMop<A,I/V%pk28N(_&W$$Dd.bDdeG-+nu\mI,!WV$oTEhj:dZl(^1(mkt.i'$rn\C8*aY2]NCeG3<IX=H0*S/;9ASARF5VO3Y*%kl\3sZ-0u<Y%A.5ld/4G'Of=A7IQ,;OgS/G'd;5Amu@KEX2M6Tceep<Q`iAmV35X,M569Z$O8mPJa$TaF*4VFefa[JJPh%rJN&<MMg':aoFH7<Dg%Ng'tAFJ9-W#ll84IM=i4TI!%Bb%Y+R'G'c."HJd_Wk((t&o.\BH6nmNHuDH@23P7&KQ>2A*L94Pb$0%uYL'N#BjuQf^-q_-F&hPd%"n5^\GiEa]iWmg`kEre`>dZGe*lnsW#dp*Q@86uL]-tHNoFM1&Q_H4io9.g'j`E\,iWBQe%aq;h/&9hiJB$"%PG7\nI+f%<QH4#7%qQ8..HO'IPLR)a83V&Oe"ikHsdT>/.D[dF@JA)d22%-A4"6!.`#&'^Aqfeis$'ebuM,Q5(k;l16h1B\O3rfeKb\$T@oAm9m]E?pI%Q-o!CL,Y*ceu>^LZDe8/bJ`M&E`iV3cWfgnV:@OYn079#a_5/6:=Jt:)CEWF\AR8UiPG2HUphr!%9bme`(E68TR*q@Q6biG'koEC%O[t?LDLuIn$<q\qZ+)>.s/cHXS0c0)OR)`t,Ks*",?0/iW@$=d91fRfW<-kdC*.418SuiQBMZdJKBfUGMIniY\,041$#%p;<F7b'%JOiUEpPpsG(TKPP:>-DhDVf$fY@E22^W]BJlfg_J1N#V,h4NJ.CbqdD2eA=d:qk$:`J['hkXp&lSG'4BT\8rT'Zt/VPsVoKUb*uV%?m<bP%>WitYeM2T(dnn&PLj'hDW]BR%O.gGTW5<?>>TOE#MV%9,6H]mfk9PQ8`A"-UP>JndbKu;:?@+Q\jM&rkn>JF\^[p^$Eq'1%]IdPM5?^,s:c/].4guOSd)(It><<ojU8tuX]ttQ+WMn9)5aE&-/Wq[-)j6IM)24H@I,-)l$fqC]gXA7%6)!T4f2kV#/piW]I8juQ%?Sli`#:sZ!`mYsQcHc5"2RaFE*tR:!S4OuAc:f9IA;A9C3Y;d[Q9IaL#'O"-/"pbMnD6YMXXd?TpiqR8XG#8M:=\Xl]gW>]bA515%f.dF0=p[I9lTq:I-RI774kEHO+hq#4b_ISe!SZMWK]$ZP!jc8$!lj5iYGZrFe&YWR/HdC=_9^[p.sI[&Wi2G`3^Qn/"&q+UMW&0K%N\4AS>SrtZI-)F<*S.eP2NKQ*q@qU:V95($HMcFLKj@iC*oRBoVlNt='q!?+rckm/8U+e7G1ru=*[A2H4UAhrm-312.#L4K0X%"l%!2<T4*ka*^I4J\^a(,+GJmUSDjToC["9C*V)(mM0QuM4GHQnPP)!qF(Uhd$7\M[Xr0_ai!.)Jg*VB7<'7ET?),YsL*D.Vmq9%Zm)%$k!Flh%7EFnYA72rIJn,U[>BOKf=]F@m:@r]GNRXJ>a"hY)B9R_Qt#[L[*qFdT4UWf=`$=F`(t'!3iaQL(`f/O[Df;7(\X5`U7!I%?4PH)UlPsISc8#b]k)M1JA!>je70^i(p<UH!O;NFrBfs;$pcnuDatI:h+qF0UcUu\<cuH.gMMbK=eB<5bEZpNP&RaB7YC?.,o03"%a5b;"9`hOuB][Are^/AJ7r%-q2<2TWnf.o9+#\o.]u#lfn9gVC<!ECYnkmg;G[g%P#QRUk&1XGcV=TT,s-(S&qRo@aU7>P-!SLNo%jt-k+:6?rb"Ei7i=%XbfkWcNSrSVdk.r7V]2\5M/cC<bWTKAa`#r#\V5U4oJNq9<)lZO1LCVa^qdG_Pb!'k'I147QV$P-.ZCW)q^%iRe<@)f=B'm-1oai<sBGE?!%XWb2J\$NYeS0%G1Y]S)adkFkLrW#QuNN^Fu"PC&j/H1^tUY8h%r#6NqU90WL,4+/_)AS]6ToKB_5%oY-pYIirSW,UF,CIMCG7`N.\$g[r?!4Dd,9lE(?`i;,-V/Io/'5%jcd;c$O6`3#Xmcu>0:X<dscd=/U2]/Z>`,G_6RB/P)-b9-ra%-:El6YQoI^\_0rqPGbH9a97`KH!SIFK,WJ,Cm+%`B67^2LnpN?Hqu\Pi"7o-$JPt.$?DLbNJ*3VJ3MuK\CnD:R,pd<UMX`G]JL7T%@ksi==el[fmWg?u)QLU\a`I4=\/f`ogpB=55VcJoUR7g&KhM'hatiGNdkS]m[.er/RV0'na-Vc84.b'.hZUmS/pkgkE'>l<0nfP;%,!la+Ncl&kkQKR#OCSHY*Td):g%L2RFp="FG>4]5Ktum<g++Wf?XM[a8Bo(/fA&9%*OtJ>\_u7dc@Yu!A\@=hHr#3'7&Ed.CU=O>%S(e4GW7+oBi(sof)uLnb85&<Op>g'%1?S0Z+K&jCfjJ3$n.bTe*hF3)j7^idAR;ZMeK%P&B#6NOB2E\m_lWb1`I@e]IB5Da.d$DJ%LL=EHU]bPOf@e)!?-/M*%aGU)U/gH<-?MXI!VHn3YPK!\j^V=#DLrT7!\gkuOleLoE*?T71gn)3BuSD1ajCM(TIT/g_]rV!\KM9q%.]4j5U_MNbg,1oX4.sdVh$,+ekMrhOp6C"!Zl?A_g0n%o4mj$)\<V'dDh0'4+M'/$%Lg+>li7DcMG`+a5:l&`XMBmHL:BQU54Ml@%<oL-i(Q'-QR^iTo%_?e:!8m#thpE\Vh@mNlguN/PdA+MI=$]?@I$F'e1QY.Sjg$p@V'%sd9P8j-S'ZtdW>6[@4((09DSs8_FC3i6%G*2&9m_-;*S3?[m#K/nQq^"$6qa"n)l*EI)UUoa%C=@?-T).(9\_;KT%[U*Q>'rNl1nllsV@SVl^XMZlJiRg@J3\ZB=H^6*KmHFb%n;QA>fYd'nH$"m.9]r\:iZ5rS4l3H-r#_!?*h:WaTc]5FIYV.AYFnq"VQ54Wcj].[0ItKB^b_58\(l"JTt=+@T7RjM(EE9\@]+=I%V'[PQ,A:`b8Pg#_nKGU]h!KJ7"/-@D!rD'879g*)FA%_!amJg*?T[iu'SL\t_&=WpU.W[BIo>7\7F,P6Vl[Q[#;fM$`m8%_TKWf,%]u,O>0uf>=m5r8?_+92nJOmm2.nhaE^g-[Q)ICsb>2"tC`ep[G,aMa`cs?kiA.+G'TG[-@gCaFCI'HZOH*C+9(4No463Z"5_RU,M%*pD9HM\lds9tWn.)f\:IX7&/=mVH2Pl&JBn*P@O,dR$,D0+cfC)FV(5XM_n=PJ;*,7SQCtAUBGfT*ET/Pm4IROAD)EU5M5m+8(0B%#Ps^:k!:SgOc,3#6Lms!%[c#:E46%i!`#sjW/3&<K!Qs-))KPs.)CG]b`JQEgD=gd&*oWf4;&+#HNh0P4=(+p[o[Vto-Zqjef\pe%LA!q-[379c,:e4-)l/0c=J^&u(,"2o@#'jk*G4`JfrV*m$r?V/;i5%>"[7*s>Pu%Be%3:K`@j/3@+I:qV&m&/^?kq26^V=imu+iT%8gif0q-A3c8BEZ'.>IJ+@<-m)/VC'G@,OkP>rK0M3m1Nn!FkTb?!T<D#PH#E2FC/s6SWH-l'Xm$<N5A)YRY_L,B182Of912AX=#.%a<ZHWg[(U6TIC#E*BMYIeUB)dPL"TVHor8^\j[Du>LEA<SS$Vg:BiEleai,LHQV"sc4RdN*E2Qb%u'3X;hi^M)E:<GQ.5+5iG!H\%WK<_VM;kWMU58VbViV.K47E-0@5FeG,=ca5ZtZf>Sa!0f\ZrVlen_Wgdi0oEZ*AQ0r?hc_VA^pRd)j;reZb(F](%#^.h(QS3pib9%f=Kg?<!Vk6lgA:T1"RDU&3/4p;<GK5(IsU#V-#'2,:(sH+p'7gFP+pgr=3H18=@7#e_p[dA+qm#]_@gH76+LKnbQM"]r`g+W.;&p%<j87)HAa0"UC`O804A)!:Dh?$]F`oo>[iHQhRRLL_UI.V,X%klQ0u.D6k*O=\H?F*C%.N[,jr-!+Rc!6gAT76@DYa1Pn475dR5U`%+T[qAH`L"ql"*#I-J]gKRF*QRi^)+G8-s0l-@J(JZY%)i$5a!ZLdrn1KJO=Z;EY=3GHc@oQKJ'qR`LJuJiB:nOM#-QB<J"4*g/2q%3@JC&B3?6"^m*T"jG6$^XP:RcT^?`hlu%IdMt,Ya"EqK,\.(eA^-!CdjZ&scFVsF$L7#4U)T=!@Tm]R0'7'M+4K8;G/WUE+r<e]M%-%]i<cj2DqIAGbpa'4>LNQtuRIYR#YB5'"<!2taaP#pkb?m\I8ajF$\cmA.+_;0@T,sNK4f=Z`fR]a.cZ&3t:RF^)o:q*j:i:,D`%$K<@u7,7seS^SAVVPoX6_rXn]5P6S9o!M7oiXQ8]r(-nOU(?S?,L2Q[28=>UjG!#K\+!,T2ud+E<"Uk7-Qc.H,:!i9OJcE)K_3XX%]n2/<`p0X@b*+Soa.%o;8Y[(d0W`gLLJ7@]m44#Hf0i($;AKI!!U9nmq6F?$Ncn(GC>rOLisWcjO6<'9-'b?"hY+=YN17JO&m>Vl%8OGpP<%V55/=<0Sd)VZ\1@E4RF8:X;km/V$Qk@.!`$T2k`D9G1I6EK5;e0pnLP\l"g"Qe$(\OpJ_+[AfqZJf,7+UUJR=[b5iR"^:%>nGP:99!"5Q?!l>L]E,>efC3:f8*^4cMXhd(s*2il8K-0^M^@7LUg\jkDqW39pPUd>4aRJ42%\S(BX*>>e*-E's8,R7Jj(F#r[bi%38,3aGnqOn4>^"S$"A@1B]0WL/(4RJW=L.(GpR::7Q'?,Tp:FNf[pplI_#RWs!rmG59<T2rSRV;ho`EXB*dc.iK/G1Q$?!7/)O4M%J?A1P4VWtAmdl>U:P7KbZ6+.B4.sI$Gg3IJD*(rB_8m8ib<4>:[mC^`r:Los/qn1B!^3X$IZitP=Dh"KNQ*>F3u.1!9=_Yeil!,1%<l3I"&pa))K="/Va<=FLJbn]Ms#>GPC:S+jN<V6fFk7X8]tshk5E9JVBrICoF0c@!Q'=--kQGg,YfT7#OB'!P0*p)b\:<I"DaC`E%;Ab0*lli5jh/:AHcY-P%c%LkrNNB#tZ;,&%=H(Js,YHj+2I"WHB_eT&YpTT-lddC/[fVSYAD/'ripgM!3JijR/r,3SpC2a7:EisV%_)]PV9pHWW)W/DGHmDuibrUWLT%(UMg-lK\E=36sinO18A4hc/mgAMO$ah$I-`HTf'$(faf]37$,KXCq1>aW+B>0:\e]cg_>qnKg%VcVd\AKk-1K^g(VFX:.XgVYXAg7_8m?K?uuDkTur;drU+XT<ZSP2T]/=11jj?!NrEYS]?MMCYO=*hnrZQWW_2)Fb_;e,1\7s%sQC%2p6lLmqjYW(I^C,`#%jD(9hW)8.O))\Y#&*l*lU8,4b7K(?LR02IX_d4Jk<V:4$V.7oqB>e)#q7LBrArqqu"/K4&%'lYAL^6u*N3%RTFKnM]!1^8GlXS$m'rgi?'T4j%%Wi?'f(ncqB.C@G@>HEKh*PJlr>9R5fd^5/]4?M$$g/^hEN<=1XGJWK]6Djk[KgJjm$-A9L`P%Z=Nl8%4[^,*MHq/4U=$V1RdEimB:E5)P'4Q=?m2P#cj:i=_T2XLa`#62epE('b:6/RK!!-*#X6RSL=I3lT"^4?N9tZhs.]NrgW9-%I(e+'i:k=K9F7.6JFBqr/Rq+9FD12N.pF5*&UK@m_gI]\ro`0,;g-81r<Wakh)H\hd[]<ocfjJ,CCCL`SYDXk;qb'Ji"I=cLn)V4%^&Ae=+RaLaHF%M0jFX"!!C6-RK^7,?dKmVN)qqK7oeknsNEHmA@VR:2K?@8bN)a?f'sUXiRj3f>)M.j*%N$-S>^3qW`7Nf08\;Ti%Vr.]$j;:gqQn]Y(&?tYB/Lq$Y!n'W+rh-q.EpFCtA;)ljd4/'XHh[ffOO/#(&ODeP`;n:DTt[W0)Ul:EeH#]o8Y_PS,>Dp9h];>)%h^".B*=2?*gSCdpiO4$VjqN#;3RB[W@2_L9df/+:RG0_-KCoAN<NhgU85;k42:po+ck*&(@3X;F4?Vk8c2>b[CSX:'07#>DRp<I`%<3;GuX5-j*RB-#WlVG/[.Nc<!_-hcN4UP5k+l85A0_PnsRbEk<ge:uG/h5u]oCj0OdCNE3rCK7'=O;kR7eab0;,c;)>K74&eF%dK%,2:rt#!Qfc2ObQ>g@d]LmZc."Y/P]lG1JP!k3`iQJ8WpT-QXM,3RX0(U[Lbeb%'bIEe4Q#&)@:j,onb$m1liXR6@t7pYdFGGL"LA%gZu@ZcBkZlKXfXW?hJe8lE^]t/Fgd(]k?#uO9^ZKYsM"tjaMW[0u[I.F=Vt?+N=(1pYYV@U::OmLk(^FZrOoM636$[GPjE"rbm8c%Rm6nM^\JuOqV1=(?2s1oq,Y9/QiH$R.SG)o=\Es$4>pr"?6Rj)?&TNm5N>Zt!8h`R[[s\eD?V(X:B0K-U^uPl8JWT-MGhg%>/l(:%=+cSQ%Isrsg$-dni#6T8AQ<8.Q$t0^YE(hVKa;P>qU(COT?-92mXbt31'QK`0eff<="fp6k#Q]%\fk"d&3j3AW(>srA#d%89'qq*%HbHK"#W6?\dmu)fLi32gQ%uKrK/8=G]o9UQ?.!"0MV0#Q^214ule@n?Rsf)uYDtNs]RpBHi8M;CW>4#OFqCT4";,dEqc>!hO<d)L%K1W/;bF?$Fhk%QELeJ_.`"/Ut+[q&A;YpY#DMa^(?2[,MV;FkOf7giB,Oor2$jj"K39/WPNZEO[#OG-@!U3a]Ypci1C,uIIZl8:C%PS(B)8M<l.L?^I"%M4%X2Cs;LiX;`[eY,A2"FVLQ'fE_QA!o7:9*^!uZ=95"r*bOZ26A:;j<uFmRpH.DUQLjs=&-\N]:0fEn8p3W%WZ^1#:s$BQP6+>W-;SdDW<9dXI0m6MHHLNYNWV+)\58GC_&OnLYneXLLaT!]22ag:s6nG_$iFg"XTF#HH-nJ6%.L(,a]^H.jZT]8%o$>+7l;\/VE7n``@^33k6]D"'NNoK6?n?nr<4@XtV=.^9MQ9Z(k1=`ge-2tcBTo4c@o:J_C)4tLX%d*&+';o88uTg*WS0E3OHTdb%6hKj+-$9`3TeO8\LfgB6GB:l)rs=%-M-9SsN[$Z$86,?lpa"Z`g(A'\@7=p@b,@jMTm6O:IKNs+]X+<WI*U/q06]3SWSN_9P8pA$%aCF2EV>^#5\:_.OA>N7mP[%;`Y5p*d3/BL"7T_Tj2j<$1dbMFFYMr*LQg'NQADo,IQm*EK+_.ib/jo8od[VO*S(XRe%,gMD/L08l%JX)g-'b?4+lHMmq",9]oOOcl;=#MmNq-39"D2Z6q_-Y`!+D/\!YcqI>0qEklnTg(2<@MG-b>SP5.P6Bq6l@H.7Fc;21S"+e\E.Dt%E9&rn^qX+5(8j9)JC6mNFWYAs@T([Jnne]$iUL:S<RClG"0W->lG&pR_lobWP"bbtD#DR*&/^'_&G3JTA<u!I7ZaL>i/3AL&btrp%NQ1o6&L!=MVVO%%F\iii#;(mjg@%,=K3iVt;fc;d0.^Lh&>F809+@ZOC/jY!K84:,63S()9Z4h^2M_d8e;2HTo_/%+6@^I-7(6L3%p3JeVWGreQ0Y4.UrHEK$?4j?KmLEFcf*ES^K;S?Vp]*_4@onuuof_[_4n)JcX0;n?)HJDQA0-jFlJ7*`c"$[_FJE3,4Ta#e?a0[#%;,(qfWIX2+m?"PVku7=f!8d?jAWk6+$WH[1+WAq*-&?nhcm:L^N1V$+a.V[50[NYZ]u"l,@%EQ[Q7UEZi3OBNX86)n$3I=J)Dt,<%Q#n-@kI@W^%o2;IA,b*,7?7Gf5]OgYX?qlg,NO5=[SX5i\QFX;!h^-34\g6I*gS7`Frs,Qh&/$<ON8uY3(ih2N-<-+\Xt5/pCl[d%cWlHqrW2Q+m<@GjX!P?,26sKnRGu_"GeY_M'!J@]RdNs3)Bu1deR>!W!4H(S<8UQjW^.Ipk)U7]bS[s_VWI\6WZIR.,j:Uj*SP[q%UY"V^.@Z*o+Wi$sY](ROM`/AEe:N-S,fPQSWZ3MLjZqn2q&CAp7_b.[UBaLG](OfJC0C#j9s2*a_ll7,Mi*_#eZ*D<$SZVL(%r?&%e?th-gF,O,A0MT<SbcncX?V!\L<E.[CU(TLbX%@&ioXN&pK$+VX:\ng--.:od)amDQ/KG#[YPsFf)1'_F._L$"r\B"?6>WTi6uNZ%:oD.?k^GP`]':<!,eVqjK&tJjMfNm*o9A;[nW'S2h^6KRi4@tjP.SKH/n5$`P^62'?B/4*]"E/l9?fSlh+T".TUplj_,I4ji_%HQ%>UGW'qrVm`-0.Qi3"r28:(*Ap&lPOR^`@:t6H,Nb;(k9nWF>_ijh<(^Eta%)-lk&r:t2GD7G2Y`,r_`^9#N1H_EIukW*'&rDs$F>%m_s<X?f#[=k&2>iL(o4@2>GZWNr/N/s"Zn2s1s<#j9X?QC2_a-K;C*rimVCjJJCaK7;<a'jf_:)`7NqJrr';jY[/'M]e6?0qR%Qg%jusqo">GBH@bU9#1Sa69Cln@8D(BZG7kd*/Hf<A<;"4X)in#C<r`*H!5at^.B:t<(='1(2%Y#B5?)j(_U'1,%+2.lkIUTE.q9%;9%3PJa+#).$:\l>@_eg2-/$MO)#44Gl'RTLmBq?+^=)H0,3<Z#\R)pg!Q[N1^*7n)\R7.a\38^ArB68oi("F:r1%%qWkX6Vakqqi$h%X?GVekk]C0q@=&P]oTH/U(hddE[nfpFB]-o.HGWFoXmnM=@YXNqgF^o\Eo<Lk4Jm#7L7]2@Au,[$UN%[bH56e./>;;W`:Q[+m:^u%Ld1Yc+gM\RLGsCc%.";SMc9@p14mLTkXttZIb.\cqU/Yi#-*at5Ck:^CY,0\Z6H2pcYY6:E.q#,M)ntu7AN=I+t>DsZ+;,nk*:IG%2A]u/=ZpIof:b5LltY&^h1r(Va!k)X:@R0Shg<[e]W?j9AcPP3kO>5AL''SF66fV2>dp-i+S/\Y+JX&u$S3K3;Yeh]<4g`+$?c&p%55;8<?U-;<lUd2/gE5)WZ:A0nojiWLM8R(h';a_VDe!*Kr@5RYrjcT.1$W]%#K#k?98HGEaAEEX.EUo#r9NQqh/?o*8<o&Amg"OZ%o;B'*F]Oo`I#8T;b5Gt"j0A&m?$XlDo>;+gikHN/FU5(6c;]-#PRo=%_4W)s#bD/O_2Em=0Lot15J`C#lW"TPF5$e+59mD1dfi^>%$A1tNpZ<]%[\lYKmlNLu?pa4r&Z0lEC.J>2J?[,Jg`QV"7.C(lcM9qV!T^tR1j:&Z0ulP$'(h^bJ'l04:2OUVc#%`(jtC+P48:b1%R5#pRj;Vt;>hQq#U\,KjlQ>K\2dYX\'(E-Cdo57_<.M4e![V,m#B/?]>%gX6iIO8Oq5WF$q$DB)qgKLc-PeY;V&<Tn:h\c9O?'/X%@>(YVT`*uWCiCa^^YkSeoqZEUEZ#,$9ea7265)iLW0'-F#n?DP^U=*79$EltM[rfDC$JZ6XjlYI`nZ$D/dh-;%!Hj^J]sF'3ku[<%\+=q$'30PCm/;SriC[[B/;od.L5jadVF$d>'cb`_;_,4_R;ogp,KgPfT$t;*>GWl:HnJWg%[:0$)6p>;VO.rd)nHLHd@Q<fi9LfY%F2udb1-epJ+g'rD3qeY&$N@ArAf4@-OEf92H"5TX;QdUif0ElV]'5UMaPgp5Q4QhhTH[r4)uN_G#*B7cq1HV0X=jFl\\-4aR,)YX%BM(?CP*L>_\[WRL.A3]!@c/^7ma>Br\Wlm>aAX(G02H'N\F,]u]9krtKV:efiP81?:";:(,5EuoTi4]I6Ql13/eWU2q[\b0II^K!%Ci%AQA&LT"r9]%jcWb0<B9DLLP'=du(,e2:bGOD<0+d;U<I`/QobLPGdE7eS,?[t.Trg'hE[HXn&'-MF5GoX`pcp<7WTZ#dG*6\Q%L2`l>AVo8U05`g:g%c2WTggGQaB0kJY(<nUIb)/bb(#"d-,A"86N;Yg/BWmE]-JXPH1QlgJWBIuB[?F+2l__PVKH,jIb"c#lbnX?%/-=:'")s(POq!eW>j/T>&`m=4]n+7qbETd<H*C_?<G&0"o8S^;BmjX)'5Zb,l)V?_5M^:=D:r6Do):p-d0J?1g2r^*`A-1Q^ki9?%0ipR&la40MaL2*2$t4IWkbF,)-;>luK1UjEc_6NCY4FY*LK[4!gC+GOOP<SR?tIH;rkMehF2f%P<eWr1#@t,5\@*:U`ZNC8.*MQ&%Wnm*skfEN6E3G)K>]c%$$ofGrS.XZ-:5'i`3/Lt5Kf&#\qT2dX=A=>i!Wu:rc!nb%QkCsc)M(ehVuGHsEkBd=NC$b<dfrppS[K2.%Sf]l?AMA3<Bdlf@2`p+=OT`AN]beF?^48aj2H2g"].u3)bGs%Zlr81].Z:<.Oakr9?`o`@I+FPne_X?\D)9f!\*o=QEf^^DD6?K*%A?+0=6e,8Gn!;si!#RH&bstOA\P'$B5H/J9BqQDo>pC]u&0CQ:#)c@-a@?!re""Gfh\cC.AFG9]$CV9BrfdrqdS,2-.j7ri!V"hu%__:=]mkCDA5@=RcnT(@5eY:kf[&$^j61rA<9s>(#H!>#:kGT44o+s#AeE!SJ?EG*[9p5aQ)UV7N/5`6Bc^GD#ln=l*Rb0T*mKKJr%]C%L[1dc]Ze@=p^"lTIZo35AeNoK(&87@9@BDHM?\g0++=1gXoX<_DPXP.G4TmT>GmQG#'<(!0T+2I\G;kS17\Edf3k,He&J>99q%M(0GXJb!P41&ZZe7\\lp-^O%6:R54CS\";t5)IAr@uncD+OI]X8&-n[V8msh[sK:sqY))O(TH(^:\F;H9E[lEG32]d*&Fm'WOqa`%J/e%h'Dc5+%p4n]abeI_i1Os)\jlDR)Q["VH!`t+Trb17+&Xs-c=+3gY;$\A$i.SB5F$]:(35fS><?Mk.?6?EIB$FWEF%KoD@32@%_Z<J&Xel@(?[AEGQYPSm)7s7%S#6=oB3b2_^].^.(Ae1dLH=E0%7?!>V)')5;q#Ai^A1<d1'Tu%ZF@,p\t(\O"((msBnrLci^kHk%W/faY&);Lkpk(E]feNB$Z0s'b42P24.$Fqo(!+`>4_XCb]KJUPDpZTK(KA)6a>>Bq.C+g!GTqs>gr[DjRr`D)d"<Zh!i.\!D>ot`%@b&5m0e9o_&O9to\QV%7<\!"=>r;'FTZNf-i/du/#TUM><Mu&a;.r[j>G.+**T5Di58-oJ:R[.06ZeG@5S(1>*'?N]Fq\g.Mbc;W%Q/S1Jg,2<,oSWTgjgGbO!J.b6Q_&6]<RT74NpuIe<[m&_jR`^dVoB(+@X!p"6D]NP73je+q^1F:_ihS.=QocujI-G?C";?4bKRN3%is!GDaOe,]L/7M0,=@1Le!NAY<(or+^!<6s`:>T+;f#;G];NS.HW$[k;AE[GOtJgjq?Tt-H&8^6OOJ9a>UnK,n\a=TQ].m$73M.u%<=;8j!SR[uRHQOa44Pkm34gt\h:N8P??"<EWAl#BG^-t^l^*$nOaB;FT]er"?HRG31<Wcg20+Ac29)W[V3;i71(ciiGii0jhobi`%rN*1k5*O((?N3.`V@egop/>BZZTPLk$;D7n$1c3LKWP0CTR1aBT58t+!4E[sgck+^C,MEL7#=(S*b`8q,#u,T[fWF16?N$8HK*J>%fI6_kFaYP4a>A=r6kDim!*53k\a;)^;ePL.DRn^q`RK`2"IN>=oc?D0o!6AdSPu,GM+gs?ZVZACk(K="j--lsSNm7us!<k5NOID<%!:.21>Gn68$?c,uDkBhC30_)D]%?k<2ln6([TmIG0GbWn9PGjHU!>2r\;W)Em^3jLcYtbN0!@k&6U+sOJ])KToVFVbjkS+`?T+f6%+[iX>\fi[gLAab>Q/UG5n)0(S0se15?7*F-Iq3@u>3[LPd3paW9_oUh\nr(k.U=k7c5eUChBn!kM6naNC,\E0>*K"U<E=705kqX0%9sWe7F&tG=m@I:*oDq%HLatPD=<X7qktd^BF:\1cAbnQ',`MGCZEaF=YgY?XhN<D_a;lXk;a)nW-%](9>6?iCrIV^B%H>V%+`eo%%Ti@C[_cSLk!R!`n+0Vrm/44[G=&c#a+@akb19P*InbHKX%gr29IkU64]Zcc4\h4QAjan@l#?8=#&sS$bmrXa`?ocHU$RAKT<U:+]%KgqTS%MCB`?u#&+F$1M<96W1U29QCg4=(b6?$&+ZQl7RCC#Tq+d&u.JUatTfYmLf1<7'sB[#j*EdQiiboot?>OkX$4`&!SL9rV:b%(fqh.PT>4R'"eu:mM9&t<4=7Y]?JA`^HJ9,+M)gj:;k:IbKp_W060UW;Q5(,WdPsG#c]kM.O?c;\Ad@ClZ6.c6mn3_m`S:$d[Nb:%F&(3QO"8:n>XQ%3#JMR6&0THZQFc":Ff/$5_7WhjksdY>)%kg5$IdMgmd^Ni;$Wur#]ZW2e4=/Gq0HDN`8F/nFs?bpI>F-(8=:QZ%+B`Kq8&(f?"*#%m4oo1:X\cu/,HbEdAMdb[_YTl]a=Z"$g/4g8A8hDJLKlb?%mhb'1aM(,Hi*c(F;H!17XC:'0B:XK1,H!f:""<K%$Z_+XrYB;uHLIdQngVs^6`dYGU]m6Tf(K1Z(TfBY*g';r\!kX5.[',&\4OC@Z%`T9,I]s&p:08aZL>f+N!>r7=1(@_l\@R@K(p%7%W.AcoVIkN\+Uk0Uh.gk2a!a!-aI=V<;a"%c]BR[N-e5P(,j\4'T9L+qApO+Pnn9CdKKkk?QTo3naX_d1%6KQL%D8Mu#"0Z8<\0Xe%J'H\ql:t;G]5GD&I&_?Ko.8kRH/OA(V;(MRZCPX,k/dA7:r'dgN=K:8CmSLTG<L9im4HSHoTBkT=S;38+,l?'-i0X5-]S0kG)87)%KJ]\s,dCX"-%4S#s3GhS?)9Vb;KMt-<4%:H!A/#*#\g*,>5"%6>iWD&rbg:_PGZc\J!l%TJ<LSeph;"`.IO+t/39(H5hBAQDCCX*%WFCcHTgS07_ntN^K'UiKWtO<<]Mrn%&@OnYL!Tt9c?==E[j!>r/l_W;jaD(2I;Uti14n/a<fu+CIKt1%B(HWmp\^u+c_MkE9VP'p%9.XS3IqDHu+tJQo$lV(a2,PW3:<t(-7?(I+&Nqpa4+RbhU#Z[MP!u"X=mr#Yl_-sSK4p#gTNZKmYc8K1h([mN<31tA&Uu"P:uP09%Rh/.mJRZ*TT4,4/GdLqY")[dG3K*d;5t3gTO)<]\r=Fa;JG1OK-Wm5R;&l]IRW.R-W\(=<4%?s>:M."[5C`K`/^aa:lF&eX74[d:%ZVi#E,$FN'db9]kl<uuh%k.r6S*EFXl;O(#Q?U\ee_+<%1G@L#QZN2[M:b:Wn^oPC.[>*Er37e1(*kMk4T=7kQeOT@;;e@61GKo-%$Lb$O6"@_L50RJ.+/t4fB,@O"r1AIcH+*b<gOK$+hYuu)J,&E7rp>1os6F%lh>d>l5Q/?HreH"%YCHGM^\X"@qV+77VgnKjs8INI%q&b(_gOK.Ms7>DlJ,6dlqtkm>dm*g,s*FY*gY`"JTE"GRrr+#=r9YU+\%hsBOk3\*j+$`'J,M>+rjVn<Kru1q~>%AI9_PrivateDataEnd